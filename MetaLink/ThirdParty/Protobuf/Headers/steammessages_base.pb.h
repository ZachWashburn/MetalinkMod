// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fbase_2eproto;
class CCDDBAppDetailCommon;
class CCDDBAppDetailCommonDefaultTypeInternal;
extern CCDDBAppDetailCommonDefaultTypeInternal _CCDDBAppDetailCommon_default_instance_;
class CMsgAppRights;
class CMsgAppRightsDefaultTypeInternal;
extern CMsgAppRightsDefaultTypeInternal _CMsgAppRights_default_instance_;
class CMsgAuthTicket;
class CMsgAuthTicketDefaultTypeInternal;
extern CMsgAuthTicketDefaultTypeInternal _CMsgAuthTicket_default_instance_;
class CMsgMulti;
class CMsgMultiDefaultTypeInternal;
extern CMsgMultiDefaultTypeInternal _CMsgMulti_default_instance_;
class CMsgProtoBufHeader;
class CMsgProtoBufHeaderDefaultTypeInternal;
extern CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
class CMsgProtobufWrapped;
class CMsgProtobufWrappedDefaultTypeInternal;
extern CMsgProtobufWrappedDefaultTypeInternal _CMsgProtobufWrapped_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCDDBAppDetailCommon* Arena::CreateMaybeMessage<::CCDDBAppDetailCommon>(Arena*);
template<> ::CMsgAppRights* Arena::CreateMaybeMessage<::CMsgAppRights>(Arena*);
template<> ::CMsgAuthTicket* Arena::CreateMaybeMessage<::CMsgAuthTicket>(Arena*);
template<> ::CMsgMulti* Arena::CreateMaybeMessage<::CMsgMulti>(Arena*);
template<> ::CMsgProtoBufHeader* Arena::CreateMaybeMessage<::CMsgProtoBufHeader>(Arena*);
template<> ::CMsgProtobufWrapped* Arena::CreateMaybeMessage<::CMsgProtobufWrapped>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgProtoBufHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoBufHeader) */ {
 public:
  inline CMsgProtoBufHeader() : CMsgProtoBufHeader(nullptr) {}
  virtual ~CMsgProtoBufHeader();

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  CMsgProtoBufHeader(CMsgProtoBufHeader&& from) noexcept
    : CMsgProtoBufHeader() {
    *this = ::std::move(from);
  }

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoBufHeader& operator=(CMsgProtoBufHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgProtoBufHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgProtoBufHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoBufHeader*>(
               &_CMsgProtoBufHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgProtoBufHeader& a, CMsgProtoBufHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProtoBufHeader* New() const final {
    return CreateMaybeMessage<CMsgProtoBufHeader>(nullptr);
  }

  CMsgProtoBufHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProtoBufHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProtoBufHeader& from);
  void MergeFrom(const CMsgProtoBufHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtoBufHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoBufHeader";
  }
  protected:
  explicit CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steammessages_5fbase_2eproto);
    return ::descriptor_table_steammessages_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetJobNameFieldNumber = 12,
    kErrorMessageFieldNumber = 14,
    kSteamidFieldNumber = 1,
    kClientSessionidFieldNumber = 2,
    kRoutingAppidFieldNumber = 3,
    kIpFieldNumber = 15,
    kAuthAccountFlagsFieldNumber = 16,
    kPublisherGroupIdFieldNumber = 19,
    kSysidFieldNumber = 20,
    kTraceTagFieldNumber = 21,
    kTokenSourceFieldNumber = 22,
    kAdminSpoofingUserFieldNumber = 23,
    kSeqNumFieldNumber = 24,
    kWebapiKeyIdFieldNumber = 25,
    kJobidSourceFieldNumber = 10,
    kJobidTargetFieldNumber = 11,
    kEresultFieldNumber = 13,
    kTransportErrorFieldNumber = 17,
    kMessageidFieldNumber = 18,
  };
  // optional string target_job_name = 12;
  bool has_target_job_name() const;
  private:
  bool _internal_has_target_job_name() const;
  public:
  void clear_target_job_name();
  const std::string& target_job_name() const;
  void set_target_job_name(const std::string& value);
  void set_target_job_name(std::string&& value);
  void set_target_job_name(const char* value);
  void set_target_job_name(const char* value, size_t size);
  std::string* mutable_target_job_name();
  std::string* release_target_job_name();
  void set_allocated_target_job_name(std::string* target_job_name);
  private:
  const std::string& _internal_target_job_name() const;
  void _internal_set_target_job_name(const std::string& value);
  std::string* _internal_mutable_target_job_name();
  public:

  // optional string error_message = 14;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 client_sessionid = 2;
  bool has_client_sessionid() const;
  private:
  bool _internal_has_client_sessionid() const;
  public:
  void clear_client_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int32 client_sessionid() const;
  void set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_sessionid() const;
  void _internal_set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 routing_appid = 3;
  bool has_routing_appid() const;
  private:
  bool _internal_has_routing_appid() const;
  public:
  void clear_routing_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 routing_appid() const;
  void set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_routing_appid() const;
  void _internal_set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ip = 15;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 auth_account_flags = 16;
  bool has_auth_account_flags() const;
  private:
  bool _internal_has_auth_account_flags() const;
  public:
  void clear_auth_account_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_account_flags() const;
  void set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auth_account_flags() const;
  void _internal_set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 publisher_group_id = 19;
  bool has_publisher_group_id() const;
  private:
  bool _internal_has_publisher_group_id() const;
  public:
  void clear_publisher_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 publisher_group_id() const;
  void set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_publisher_group_id() const;
  void _internal_set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sysid = 20;
  bool has_sysid() const;
  private:
  bool _internal_has_sysid() const;
  public:
  void clear_sysid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid() const;
  void set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sysid() const;
  void _internal_set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 trace_tag = 21;
  bool has_trace_tag() const;
  private:
  bool _internal_has_trace_tag() const;
  public:
  void clear_trace_tag();
  ::PROTOBUF_NAMESPACE_ID::uint64 trace_tag() const;
  void set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trace_tag() const;
  void _internal_set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 token_source = 22;
  bool has_token_source() const;
  private:
  bool _internal_has_token_source() const;
  public:
  void clear_token_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 token_source() const;
  void set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token_source() const;
  void _internal_set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool admin_spoofing_user = 23;
  bool has_admin_spoofing_user() const;
  private:
  bool _internal_has_admin_spoofing_user() const;
  public:
  void clear_admin_spoofing_user();
  bool admin_spoofing_user() const;
  void set_admin_spoofing_user(bool value);
  private:
  bool _internal_admin_spoofing_user() const;
  void _internal_set_admin_spoofing_user(bool value);
  public:

  // optional int32 seq_num = 24;
  bool has_seq_num() const;
  private:
  bool _internal_has_seq_num() const;
  public:
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::int32 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 webapi_key_id = 25;
  bool has_webapi_key_id() const;
  private:
  bool _internal_has_webapi_key_id() const;
  public:
  void clear_webapi_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 webapi_key_id() const;
  void set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_webapi_key_id() const;
  void _internal_set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  bool has_jobid_source() const;
  private:
  bool _internal_has_jobid_source() const;
  public:
  void clear_jobid_source();
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_source() const;
  void set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jobid_source() const;
  void _internal_set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  bool has_jobid_target() const;
  private:
  bool _internal_has_jobid_target() const;
  public:
  void clear_jobid_target();
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_target() const;
  void set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jobid_target() const;
  void _internal_set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 eresult = 13 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 transport_error = 17 [default = 1];
  bool has_transport_error() const;
  private:
  bool _internal_has_transport_error() const;
  public:
  void clear_transport_error();
  ::PROTOBUF_NAMESPACE_ID::int32 transport_error() const;
  void set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transport_error() const;
  void _internal_set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::PROTOBUF_NAMESPACE_ID::uint64 messageid() const;
  void set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_messageid() const;
  void _internal_set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_job_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routing_appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_account_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 publisher_group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trace_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_source_;
  bool admin_spoofing_user_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 webapi_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_target_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  ::PROTOBUF_NAMESPACE_ID::int32 transport_error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 messageid_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgMulti PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMulti) */ {
 public:
  inline CMsgMulti() : CMsgMulti(nullptr) {}
  virtual ~CMsgMulti();

  CMsgMulti(const CMsgMulti& from);
  CMsgMulti(CMsgMulti&& from) noexcept
    : CMsgMulti() {
    *this = ::std::move(from);
  }

  inline CMsgMulti& operator=(const CMsgMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMulti& operator=(CMsgMulti&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgMulti& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMulti* internal_default_instance() {
    return reinterpret_cast<const CMsgMulti*>(
               &_CMsgMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgMulti& a, CMsgMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMulti* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMulti* New() const final {
    return CreateMaybeMessage<CMsgMulti>(nullptr);
  }

  CMsgMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMulti& from);
  void MergeFrom(const CMsgMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMulti";
  }
  protected:
  explicit CMsgMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steammessages_5fbase_2eproto);
    return ::descriptor_table_steammessages_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 2,
    kSizeUnzippedFieldNumber = 1,
  };
  // optional bytes message_body = 2;
  bool has_message_body() const;
  private:
  bool _internal_has_message_body() const;
  public:
  void clear_message_body();
  const std::string& message_body() const;
  void set_message_body(const std::string& value);
  void set_message_body(std::string&& value);
  void set_message_body(const char* value);
  void set_message_body(const void* value, size_t size);
  std::string* mutable_message_body();
  std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // optional uint32 size_unzipped = 1;
  bool has_size_unzipped() const;
  private:
  bool _internal_has_size_unzipped() const;
  public:
  void clear_size_unzipped();
  ::PROTOBUF_NAMESPACE_ID::uint32 size_unzipped() const;
  void set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size_unzipped() const;
  void _internal_set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_unzipped_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgProtobufWrapped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtobufWrapped) */ {
 public:
  inline CMsgProtobufWrapped() : CMsgProtobufWrapped(nullptr) {}
  virtual ~CMsgProtobufWrapped();

  CMsgProtobufWrapped(const CMsgProtobufWrapped& from);
  CMsgProtobufWrapped(CMsgProtobufWrapped&& from) noexcept
    : CMsgProtobufWrapped() {
    *this = ::std::move(from);
  }

  inline CMsgProtobufWrapped& operator=(const CMsgProtobufWrapped& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtobufWrapped& operator=(CMsgProtobufWrapped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgProtobufWrapped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgProtobufWrapped* internal_default_instance() {
    return reinterpret_cast<const CMsgProtobufWrapped*>(
               &_CMsgProtobufWrapped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgProtobufWrapped& a, CMsgProtobufWrapped& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtobufWrapped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtobufWrapped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProtobufWrapped* New() const final {
    return CreateMaybeMessage<CMsgProtobufWrapped>(nullptr);
  }

  CMsgProtobufWrapped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProtobufWrapped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProtobufWrapped& from);
  void MergeFrom(const CMsgProtobufWrapped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtobufWrapped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtobufWrapped";
  }
  protected:
  explicit CMsgProtobufWrapped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steammessages_5fbase_2eproto);
    return ::descriptor_table_steammessages_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 1,
  };
  // optional bytes message_body = 1;
  bool has_message_body() const;
  private:
  bool _internal_has_message_body() const;
  public:
  void clear_message_body();
  const std::string& message_body() const;
  void set_message_body(const std::string& value);
  void set_message_body(std::string&& value);
  void set_message_body(const char* value);
  void set_message_body(const void* value, size_t size);
  std::string* mutable_message_body();
  std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtobufWrapped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgAuthTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAuthTicket) */ {
 public:
  inline CMsgAuthTicket() : CMsgAuthTicket(nullptr) {}
  virtual ~CMsgAuthTicket();

  CMsgAuthTicket(const CMsgAuthTicket& from);
  CMsgAuthTicket(CMsgAuthTicket&& from) noexcept
    : CMsgAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgAuthTicket& operator=(const CMsgAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAuthTicket& operator=(CMsgAuthTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgAuthTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgAuthTicket*>(
               &_CMsgAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgAuthTicket& a, CMsgAuthTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAuthTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAuthTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAuthTicket* New() const final {
    return CreateMaybeMessage<CMsgAuthTicket>(nullptr);
  }

  CMsgAuthTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAuthTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAuthTicket& from);
  void MergeFrom(const CMsgAuthTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAuthTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAuthTicket";
  }
  protected:
  explicit CMsgAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steammessages_5fbase_2eproto);
    return ::descriptor_table_steammessages_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 7,
    kSteamidFieldNumber = 3,
    kEstateFieldNumber = 1,
    kHSteamPipeFieldNumber = 5,
    kGameidFieldNumber = 4,
    kTicketCrcFieldNumber = 6,
    kEresultFieldNumber = 2,
  };
  // optional bytes ticket = 7;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const void* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional fixed64 steamid = 3;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 estate = 1;
  bool has_estate() const;
  private:
  bool _internal_has_estate() const;
  public:
  void clear_estate();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate() const;
  void set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate() const;
  void _internal_set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 h_steam_pipe = 5;
  bool has_h_steam_pipe() const;
  private:
  bool _internal_has_h_steam_pipe() const;
  public:
  void clear_h_steam_pipe();
  ::PROTOBUF_NAMESPACE_ID::uint32 h_steam_pipe() const;
  void set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h_steam_pipe() const;
  void _internal_set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 gameid = 4;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ticket_crc = 6;
  bool has_ticket_crc() const;
  private:
  bool _internal_has_ticket_crc() const;
  public:
  void clear_ticket_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ticket_crc() const;
  void set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ticket_crc() const;
  void _internal_set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAuthTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_steam_pipe_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ticket_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eresult_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCDDBAppDetailCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCDDBAppDetailCommon) */ {
 public:
  inline CCDDBAppDetailCommon() : CCDDBAppDetailCommon(nullptr) {}
  virtual ~CCDDBAppDetailCommon();

  CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from);
  CCDDBAppDetailCommon(CCDDBAppDetailCommon&& from) noexcept
    : CCDDBAppDetailCommon() {
    *this = ::std::move(from);
  }

  inline CCDDBAppDetailCommon& operator=(const CCDDBAppDetailCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCDDBAppDetailCommon& operator=(CCDDBAppDetailCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCDDBAppDetailCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCDDBAppDetailCommon* internal_default_instance() {
    return reinterpret_cast<const CCDDBAppDetailCommon*>(
               &_CCDDBAppDetailCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCDDBAppDetailCommon& a, CCDDBAppDetailCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(CCDDBAppDetailCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCDDBAppDetailCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCDDBAppDetailCommon* New() const final {
    return CreateMaybeMessage<CCDDBAppDetailCommon>(nullptr);
  }

  CCDDBAppDetailCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCDDBAppDetailCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCDDBAppDetailCommon& from);
  void MergeFrom(const CCDDBAppDetailCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCDDBAppDetailCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCDDBAppDetailCommon";
  }
  protected:
  explicit CCDDBAppDetailCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steammessages_5fbase_2eproto);
    return ::descriptor_table_steammessages_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kLogoFieldNumber = 4,
    kLogoSmallFieldNumber = 5,
    kFriendlyNameFieldNumber = 10,
    kPropagationFieldNumber = 11,
    kAppidFieldNumber = 1,
    kToolFieldNumber = 6,
    kDemoFieldNumber = 7,
    kMediaFieldNumber = 8,
    kCommunityVisibleStatsFieldNumber = 9,
    kHasAdultContentFieldNumber = 12,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 3;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string logo = 4;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  const std::string& logo() const;
  void set_logo(const std::string& value);
  void set_logo(std::string&& value);
  void set_logo(const char* value);
  void set_logo(const char* value, size_t size);
  std::string* mutable_logo();
  std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // optional string logo_small = 5;
  bool has_logo_small() const;
  private:
  bool _internal_has_logo_small() const;
  public:
  void clear_logo_small();
  const std::string& logo_small() const;
  void set_logo_small(const std::string& value);
  void set_logo_small(std::string&& value);
  void set_logo_small(const char* value);
  void set_logo_small(const char* value, size_t size);
  std::string* mutable_logo_small();
  std::string* release_logo_small();
  void set_allocated_logo_small(std::string* logo_small);
  private:
  const std::string& _internal_logo_small() const;
  void _internal_set_logo_small(const std::string& value);
  std::string* _internal_mutable_logo_small();
  public:

  // optional string friendly_name = 10;
  bool has_friendly_name() const;
  private:
  bool _internal_has_friendly_name() const;
  public:
  void clear_friendly_name();
  const std::string& friendly_name() const;
  void set_friendly_name(const std::string& value);
  void set_friendly_name(std::string&& value);
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  std::string* mutable_friendly_name();
  std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // optional string propagation = 11;
  bool has_propagation() const;
  private:
  bool _internal_has_propagation() const;
  public:
  void clear_propagation();
  const std::string& propagation() const;
  void set_propagation(const std::string& value);
  void set_propagation(std::string&& value);
  void set_propagation(const char* value);
  void set_propagation(const char* value, size_t size);
  std::string* mutable_propagation();
  std::string* release_propagation();
  void set_allocated_propagation(std::string* propagation);
  private:
  const std::string& _internal_propagation() const;
  void _internal_set_propagation(const std::string& value);
  std::string* _internal_mutable_propagation();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool tool = 6;
  bool has_tool() const;
  private:
  bool _internal_has_tool() const;
  public:
  void clear_tool();
  bool tool() const;
  void set_tool(bool value);
  private:
  bool _internal_tool() const;
  void _internal_set_tool(bool value);
  public:

  // optional bool demo = 7;
  bool has_demo() const;
  private:
  bool _internal_has_demo() const;
  public:
  void clear_demo();
  bool demo() const;
  void set_demo(bool value);
  private:
  bool _internal_demo() const;
  void _internal_set_demo(bool value);
  public:

  // optional bool media = 8;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  bool media() const;
  void set_media(bool value);
  private:
  bool _internal_media() const;
  void _internal_set_media(bool value);
  public:

  // optional bool community_visible_stats = 9;
  bool has_community_visible_stats() const;
  private:
  bool _internal_has_community_visible_stats() const;
  public:
  void clear_community_visible_stats();
  bool community_visible_stats() const;
  void set_community_visible_stats(bool value);
  private:
  bool _internal_community_visible_stats() const;
  void _internal_set_community_visible_stats(bool value);
  public:

  // optional bool has_adult_content = 12;
  bool has_has_adult_content() const;
  private:
  bool _internal_has_has_adult_content() const;
  public:
  void clear_has_adult_content();
  bool has_adult_content() const;
  void set_has_adult_content(bool value);
  private:
  bool _internal_has_adult_content() const;
  void _internal_set_has_adult_content(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCDDBAppDetailCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_small_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propagation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool tool_;
  bool demo_;
  bool media_;
  bool community_visible_stats_;
  bool has_adult_content_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgAppRights PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAppRights) */ {
 public:
  inline CMsgAppRights() : CMsgAppRights(nullptr) {}
  virtual ~CMsgAppRights();

  CMsgAppRights(const CMsgAppRights& from);
  CMsgAppRights(CMsgAppRights&& from) noexcept
    : CMsgAppRights() {
    *this = ::std::move(from);
  }

  inline CMsgAppRights& operator=(const CMsgAppRights& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAppRights& operator=(CMsgAppRights&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgAppRights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgAppRights* internal_default_instance() {
    return reinterpret_cast<const CMsgAppRights*>(
               &_CMsgAppRights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgAppRights& a, CMsgAppRights& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAppRights* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAppRights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAppRights* New() const final {
    return CreateMaybeMessage<CMsgAppRights>(nullptr);
  }

  CMsgAppRights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAppRights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAppRights& from);
  void MergeFrom(const CMsgAppRights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAppRights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAppRights";
  }
  protected:
  explicit CMsgAppRights(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steammessages_5fbase_2eproto);
    return ::descriptor_table_steammessages_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditInfoFieldNumber = 1,
    kPublishFieldNumber = 2,
    kViewErrorDataFieldNumber = 3,
    kDownloadFieldNumber = 4,
    kUploadCdkeysFieldNumber = 5,
    kGenerateCdkeysFieldNumber = 6,
    kViewFinancialsFieldNumber = 7,
    kManageCegFieldNumber = 8,
    kManageSigningFieldNumber = 9,
    kManageCdkeysFieldNumber = 10,
    kEditMarketingFieldNumber = 11,
    kEconomySupportFieldNumber = 12,
    kEconomySupportSupervisorFieldNumber = 13,
    kManagePricingFieldNumber = 14,
    kBroadcastLiveFieldNumber = 15,
  };
  // optional bool edit_info = 1;
  bool has_edit_info() const;
  private:
  bool _internal_has_edit_info() const;
  public:
  void clear_edit_info();
  bool edit_info() const;
  void set_edit_info(bool value);
  private:
  bool _internal_edit_info() const;
  void _internal_set_edit_info(bool value);
  public:

  // optional bool publish = 2;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  bool publish() const;
  void set_publish(bool value);
  private:
  bool _internal_publish() const;
  void _internal_set_publish(bool value);
  public:

  // optional bool view_error_data = 3;
  bool has_view_error_data() const;
  private:
  bool _internal_has_view_error_data() const;
  public:
  void clear_view_error_data();
  bool view_error_data() const;
  void set_view_error_data(bool value);
  private:
  bool _internal_view_error_data() const;
  void _internal_set_view_error_data(bool value);
  public:

  // optional bool download = 4;
  bool has_download() const;
  private:
  bool _internal_has_download() const;
  public:
  void clear_download();
  bool download() const;
  void set_download(bool value);
  private:
  bool _internal_download() const;
  void _internal_set_download(bool value);
  public:

  // optional bool upload_cdkeys = 5;
  bool has_upload_cdkeys() const;
  private:
  bool _internal_has_upload_cdkeys() const;
  public:
  void clear_upload_cdkeys();
  bool upload_cdkeys() const;
  void set_upload_cdkeys(bool value);
  private:
  bool _internal_upload_cdkeys() const;
  void _internal_set_upload_cdkeys(bool value);
  public:

  // optional bool generate_cdkeys = 6;
  bool has_generate_cdkeys() const;
  private:
  bool _internal_has_generate_cdkeys() const;
  public:
  void clear_generate_cdkeys();
  bool generate_cdkeys() const;
  void set_generate_cdkeys(bool value);
  private:
  bool _internal_generate_cdkeys() const;
  void _internal_set_generate_cdkeys(bool value);
  public:

  // optional bool view_financials = 7;
  bool has_view_financials() const;
  private:
  bool _internal_has_view_financials() const;
  public:
  void clear_view_financials();
  bool view_financials() const;
  void set_view_financials(bool value);
  private:
  bool _internal_view_financials() const;
  void _internal_set_view_financials(bool value);
  public:

  // optional bool manage_ceg = 8;
  bool has_manage_ceg() const;
  private:
  bool _internal_has_manage_ceg() const;
  public:
  void clear_manage_ceg();
  bool manage_ceg() const;
  void set_manage_ceg(bool value);
  private:
  bool _internal_manage_ceg() const;
  void _internal_set_manage_ceg(bool value);
  public:

  // optional bool manage_signing = 9;
  bool has_manage_signing() const;
  private:
  bool _internal_has_manage_signing() const;
  public:
  void clear_manage_signing();
  bool manage_signing() const;
  void set_manage_signing(bool value);
  private:
  bool _internal_manage_signing() const;
  void _internal_set_manage_signing(bool value);
  public:

  // optional bool manage_cdkeys = 10;
  bool has_manage_cdkeys() const;
  private:
  bool _internal_has_manage_cdkeys() const;
  public:
  void clear_manage_cdkeys();
  bool manage_cdkeys() const;
  void set_manage_cdkeys(bool value);
  private:
  bool _internal_manage_cdkeys() const;
  void _internal_set_manage_cdkeys(bool value);
  public:

  // optional bool edit_marketing = 11;
  bool has_edit_marketing() const;
  private:
  bool _internal_has_edit_marketing() const;
  public:
  void clear_edit_marketing();
  bool edit_marketing() const;
  void set_edit_marketing(bool value);
  private:
  bool _internal_edit_marketing() const;
  void _internal_set_edit_marketing(bool value);
  public:

  // optional bool economy_support = 12;
  bool has_economy_support() const;
  private:
  bool _internal_has_economy_support() const;
  public:
  void clear_economy_support();
  bool economy_support() const;
  void set_economy_support(bool value);
  private:
  bool _internal_economy_support() const;
  void _internal_set_economy_support(bool value);
  public:

  // optional bool economy_support_supervisor = 13;
  bool has_economy_support_supervisor() const;
  private:
  bool _internal_has_economy_support_supervisor() const;
  public:
  void clear_economy_support_supervisor();
  bool economy_support_supervisor() const;
  void set_economy_support_supervisor(bool value);
  private:
  bool _internal_economy_support_supervisor() const;
  void _internal_set_economy_support_supervisor(bool value);
  public:

  // optional bool manage_pricing = 14;
  bool has_manage_pricing() const;
  private:
  bool _internal_has_manage_pricing() const;
  public:
  void clear_manage_pricing();
  bool manage_pricing() const;
  void set_manage_pricing(bool value);
  private:
  bool _internal_manage_pricing() const;
  void _internal_set_manage_pricing(bool value);
  public:

  // optional bool broadcast_live = 15;
  bool has_broadcast_live() const;
  private:
  bool _internal_has_broadcast_live() const;
  public:
  void clear_broadcast_live();
  bool broadcast_live() const;
  void set_broadcast_live(bool value);
  private:
  bool _internal_broadcast_live() const;
  void _internal_set_broadcast_live(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAppRights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool edit_info_;
  bool publish_;
  bool view_error_data_;
  bool download_;
  bool upload_cdkeys_;
  bool generate_cdkeys_;
  bool view_financials_;
  bool manage_ceg_;
  bool manage_signing_;
  bool manage_cdkeys_;
  bool edit_marketing_;
  bool economy_support_;
  bool economy_support_supervisor_;
  bool manage_pricing_;
  bool broadcast_live_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// ===================================================================

static const int kMsgpoolSoftLimitFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  msgpool_hard_limit;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgProtoBufHeader

// optional fixed64 steamid = 1;
inline bool CMsgProtoBufHeader::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgProtoBufHeader::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.steamid)
  return _internal_steamid();
}
inline void CMsgProtoBufHeader::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CMsgProtoBufHeader::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.steamid)
}

// optional int32 client_sessionid = 2;
inline bool CMsgProtoBufHeader::_internal_has_client_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_sessionid() const {
  return _internal_has_client_sessionid();
}
inline void CMsgProtoBufHeader::clear_client_sessionid() {
  client_sessionid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_client_sessionid() const {
  return client_sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::client_sessionid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_sessionid)
  return _internal_client_sessionid();
}
inline void CMsgProtoBufHeader::_internal_set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_sessionid_ = value;
}
inline void CMsgProtoBufHeader::set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_sessionid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_sessionid)
}

// optional uint32 routing_appid = 3;
inline bool CMsgProtoBufHeader::_internal_has_routing_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_routing_appid() const {
  return _internal_has_routing_appid();
}
inline void CMsgProtoBufHeader::clear_routing_appid() {
  routing_appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_routing_appid() const {
  return routing_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::routing_appid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.routing_appid)
  return _internal_routing_appid();
}
inline void CMsgProtoBufHeader::_internal_set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  routing_appid_ = value;
}
inline void CMsgProtoBufHeader::set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_routing_appid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.routing_appid)
}

// optional fixed64 jobid_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_jobid_source() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_jobid_source() const {
  return _internal_has_jobid_source();
}
inline void CMsgProtoBufHeader::clear_jobid_source() {
  jobid_source_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_jobid_source() const {
  return jobid_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::jobid_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.jobid_source)
  return _internal_jobid_source();
}
inline void CMsgProtoBufHeader::_internal_set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  jobid_source_ = value;
}
inline void CMsgProtoBufHeader::set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jobid_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.jobid_source)
}

// optional fixed64 jobid_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_jobid_target() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_jobid_target() const {
  return _internal_has_jobid_target();
}
inline void CMsgProtoBufHeader::clear_jobid_target() {
  jobid_target_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_jobid_target() const {
  return jobid_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::jobid_target() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.jobid_target)
  return _internal_jobid_target();
}
inline void CMsgProtoBufHeader::_internal_set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  jobid_target_ = value;
}
inline void CMsgProtoBufHeader::set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jobid_target(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.jobid_target)
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::_internal_has_target_job_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return _internal_has_target_job_name();
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  target_job_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.target_job_name)
  return _internal_target_job_name();
}
inline void CMsgProtoBufHeader::set_target_job_name(const std::string& value) {
  _internal_set_target_job_name(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.target_job_name)
  return _internal_mutable_target_job_name();
}
inline const std::string& CMsgProtoBufHeader::_internal_target_job_name() const {
  return target_job_name_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_target_job_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CMsgProtoBufHeader::set_target_job_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtoBufHeader.target_job_name)
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtoBufHeader.target_job_name)
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_target_job_name() {
  _has_bits_[0] |= 0x00000001u;
  return target_job_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.target_job_name)
  if (!_internal_has_target_job_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_job_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(std::string* target_job_name) {
  if (target_job_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_job_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_job_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.target_job_name)
}

// optional int32 seq_num = 24;
inline bool CMsgProtoBufHeader::_internal_has_seq_num() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_seq_num() const {
  return _internal_has_seq_num();
}
inline void CMsgProtoBufHeader::clear_seq_num() {
  seq_num_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.seq_num)
  return _internal_seq_num();
}
inline void CMsgProtoBufHeader::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  seq_num_ = value;
}
inline void CMsgProtoBufHeader::set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.seq_num)
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgProtoBufHeader::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.eresult)
  return _internal_eresult();
}
inline void CMsgProtoBufHeader::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  eresult_ = value;
}
inline void CMsgProtoBufHeader::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::_internal_has_error_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_error_message() const {
  return _internal_has_error_message();
}
inline void CMsgProtoBufHeader::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.error_message)
  return _internal_error_message();
}
inline void CMsgProtoBufHeader::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& CMsgProtoBufHeader::_internal_error_message() const {
  return error_message_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CMsgProtoBufHeader::set_error_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtoBufHeader.error_message)
}
inline void CMsgProtoBufHeader::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtoBufHeader.error_message)
}
inline void CMsgProtoBufHeader::set_error_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_error_message() {
  _has_bits_[0] |= 0x00000002u;
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return error_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtoBufHeader::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.error_message)
}

// optional uint32 ip = 15;
inline bool CMsgProtoBufHeader::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgProtoBufHeader::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::ip() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.ip)
  return _internal_ip();
}
inline void CMsgProtoBufHeader::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ip_ = value;
}
inline void CMsgProtoBufHeader::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip)
}

// optional uint32 auth_account_flags = 16;
inline bool CMsgProtoBufHeader::_internal_has_auth_account_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_auth_account_flags() const {
  return _internal_has_auth_account_flags();
}
inline void CMsgProtoBufHeader::clear_auth_account_flags() {
  auth_account_flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_auth_account_flags() const {
  return auth_account_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::auth_account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.auth_account_flags)
  return _internal_auth_account_flags();
}
inline void CMsgProtoBufHeader::_internal_set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  auth_account_flags_ = value;
}
inline void CMsgProtoBufHeader::set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auth_account_flags(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.auth_account_flags)
}

// optional uint32 token_source = 22;
inline bool CMsgProtoBufHeader::_internal_has_token_source() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_token_source() const {
  return _internal_has_token_source();
}
inline void CMsgProtoBufHeader::clear_token_source() {
  token_source_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_token_source() const {
  return token_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::token_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.token_source)
  return _internal_token_source();
}
inline void CMsgProtoBufHeader::_internal_set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  token_source_ = value;
}
inline void CMsgProtoBufHeader::set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.token_source)
}

// optional bool admin_spoofing_user = 23;
inline bool CMsgProtoBufHeader::_internal_has_admin_spoofing_user() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_admin_spoofing_user() const {
  return _internal_has_admin_spoofing_user();
}
inline void CMsgProtoBufHeader::clear_admin_spoofing_user() {
  admin_spoofing_user_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgProtoBufHeader::_internal_admin_spoofing_user() const {
  return admin_spoofing_user_;
}
inline bool CMsgProtoBufHeader::admin_spoofing_user() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.admin_spoofing_user)
  return _internal_admin_spoofing_user();
}
inline void CMsgProtoBufHeader::_internal_set_admin_spoofing_user(bool value) {
  _has_bits_[0] |= 0x00000800u;
  admin_spoofing_user_ = value;
}
inline void CMsgProtoBufHeader::set_admin_spoofing_user(bool value) {
  _internal_set_admin_spoofing_user(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.admin_spoofing_user)
}

// optional int32 transport_error = 17 [default = 1];
inline bool CMsgProtoBufHeader::_internal_has_transport_error() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_transport_error() const {
  return _internal_has_transport_error();
}
inline void CMsgProtoBufHeader::clear_transport_error() {
  transport_error_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_transport_error() const {
  return transport_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::transport_error() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.transport_error)
  return _internal_transport_error();
}
inline void CMsgProtoBufHeader::_internal_set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  transport_error_ = value;
}
inline void CMsgProtoBufHeader::set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transport_error(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.transport_error)
}

// optional uint64 messageid = 18 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_messageid() const {
  return _internal_has_messageid();
}
inline void CMsgProtoBufHeader::clear_messageid() {
  messageid_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_messageid() const {
  return messageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::messageid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.messageid)
  return _internal_messageid();
}
inline void CMsgProtoBufHeader::_internal_set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  messageid_ = value;
}
inline void CMsgProtoBufHeader::set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.messageid)
}

// optional uint32 publisher_group_id = 19;
inline bool CMsgProtoBufHeader::_internal_has_publisher_group_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_publisher_group_id() const {
  return _internal_has_publisher_group_id();
}
inline void CMsgProtoBufHeader::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_publisher_group_id() const {
  return publisher_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::publisher_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.publisher_group_id)
  return _internal_publisher_group_id();
}
inline void CMsgProtoBufHeader::_internal_set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  publisher_group_id_ = value;
}
inline void CMsgProtoBufHeader::set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_publisher_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.publisher_group_id)
}

// optional uint32 sysid = 20;
inline bool CMsgProtoBufHeader::_internal_has_sysid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_sysid() const {
  return _internal_has_sysid();
}
inline void CMsgProtoBufHeader::clear_sysid() {
  sysid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_sysid() const {
  return sysid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::sysid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.sysid)
  return _internal_sysid();
}
inline void CMsgProtoBufHeader::_internal_set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  sysid_ = value;
}
inline void CMsgProtoBufHeader::set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sysid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.sysid)
}

// optional uint64 trace_tag = 21;
inline bool CMsgProtoBufHeader::_internal_has_trace_tag() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_trace_tag() const {
  return _internal_has_trace_tag();
}
inline void CMsgProtoBufHeader::clear_trace_tag() {
  trace_tag_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_trace_tag() const {
  return trace_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::trace_tag() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.trace_tag)
  return _internal_trace_tag();
}
inline void CMsgProtoBufHeader::_internal_set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  trace_tag_ = value;
}
inline void CMsgProtoBufHeader::set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trace_tag(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.trace_tag)
}

// optional uint32 webapi_key_id = 25;
inline bool CMsgProtoBufHeader::_internal_has_webapi_key_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_webapi_key_id() const {
  return _internal_has_webapi_key_id();
}
inline void CMsgProtoBufHeader::clear_webapi_key_id() {
  webapi_key_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_webapi_key_id() const {
  return webapi_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::webapi_key_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.webapi_key_id)
  return _internal_webapi_key_id();
}
inline void CMsgProtoBufHeader::_internal_set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  webapi_key_id_ = value;
}
inline void CMsgProtoBufHeader::set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_webapi_key_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.webapi_key_id)
}

// -------------------------------------------------------------------

// CMsgMulti

// optional uint32 size_unzipped = 1;
inline bool CMsgMulti::_internal_has_size_unzipped() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMulti::has_size_unzipped() const {
  return _internal_has_size_unzipped();
}
inline void CMsgMulti::clear_size_unzipped() {
  size_unzipped_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMulti::_internal_size_unzipped() const {
  return size_unzipped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMulti::size_unzipped() const {
  // @@protoc_insertion_point(field_get:CMsgMulti.size_unzipped)
  return _internal_size_unzipped();
}
inline void CMsgMulti::_internal_set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_unzipped_ = value;
}
inline void CMsgMulti::set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size_unzipped(value);
  // @@protoc_insertion_point(field_set:CMsgMulti.size_unzipped)
}

// optional bytes message_body = 2;
inline bool CMsgMulti::_internal_has_message_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMulti::has_message_body() const {
  return _internal_has_message_body();
}
inline void CMsgMulti::clear_message_body() {
  message_body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMulti::message_body() const {
  // @@protoc_insertion_point(field_get:CMsgMulti.message_body)
  return _internal_message_body();
}
inline void CMsgMulti::set_message_body(const std::string& value) {
  _internal_set_message_body(value);
  // @@protoc_insertion_point(field_set:CMsgMulti.message_body)
}
inline std::string* CMsgMulti::mutable_message_body() {
  // @@protoc_insertion_point(field_mutable:CMsgMulti.message_body)
  return _internal_mutable_message_body();
}
inline const std::string& CMsgMulti::_internal_message_body() const {
  return message_body_.Get();
}
inline void CMsgMulti::_internal_set_message_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CMsgMulti::set_message_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgMulti.message_body)
}
inline void CMsgMulti::set_message_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgMulti.message_body)
}
inline void CMsgMulti::set_message_body(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgMulti.message_body)
}
inline std::string* CMsgMulti::_internal_mutable_message_body() {
  _has_bits_[0] |= 0x00000001u;
  return message_body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CMsgMulti::release_message_body() {
  // @@protoc_insertion_point(field_release:CMsgMulti.message_body)
  if (!_internal_has_message_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgMulti::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgMulti.message_body)
}

// -------------------------------------------------------------------

// CMsgProtobufWrapped

// optional bytes message_body = 1;
inline bool CMsgProtobufWrapped::_internal_has_message_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtobufWrapped::has_message_body() const {
  return _internal_has_message_body();
}
inline void CMsgProtobufWrapped::clear_message_body() {
  message_body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtobufWrapped::message_body() const {
  // @@protoc_insertion_point(field_get:CMsgProtobufWrapped.message_body)
  return _internal_message_body();
}
inline void CMsgProtobufWrapped::set_message_body(const std::string& value) {
  _internal_set_message_body(value);
  // @@protoc_insertion_point(field_set:CMsgProtobufWrapped.message_body)
}
inline std::string* CMsgProtobufWrapped::mutable_message_body() {
  // @@protoc_insertion_point(field_mutable:CMsgProtobufWrapped.message_body)
  return _internal_mutable_message_body();
}
inline const std::string& CMsgProtobufWrapped::_internal_message_body() const {
  return message_body_.Get();
}
inline void CMsgProtobufWrapped::_internal_set_message_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CMsgProtobufWrapped::set_message_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtobufWrapped.message_body)
}
inline void CMsgProtobufWrapped::set_message_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtobufWrapped.message_body)
}
inline void CMsgProtobufWrapped::set_message_body(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtobufWrapped.message_body)
}
inline std::string* CMsgProtobufWrapped::_internal_mutable_message_body() {
  _has_bits_[0] |= 0x00000001u;
  return message_body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CMsgProtobufWrapped::release_message_body() {
  // @@protoc_insertion_point(field_release:CMsgProtobufWrapped.message_body)
  if (!_internal_has_message_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtobufWrapped::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtobufWrapped.message_body)
}

// -------------------------------------------------------------------

// CMsgAuthTicket

// optional uint32 estate = 1;
inline bool CMsgAuthTicket::_internal_has_estate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_estate() const {
  return _internal_has_estate();
}
inline void CMsgAuthTicket::clear_estate() {
  estate_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_estate() const {
  return estate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::estate() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.estate)
  return _internal_estate();
}
inline void CMsgAuthTicket::_internal_set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  estate_ = value;
}
inline void CMsgAuthTicket::set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.estate)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgAuthTicket::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAuthTicket::clear_eresult() {
  eresult_ = 2u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.eresult)
  return _internal_eresult();
}
inline void CMsgAuthTicket::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  eresult_ = value;
}
inline void CMsgAuthTicket::set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.eresult)
}

// optional fixed64 steamid = 3;
inline bool CMsgAuthTicket::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAuthTicket::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.steamid)
  return _internal_steamid();
}
inline void CMsgAuthTicket::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgAuthTicket::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.steamid)
}

// optional fixed64 gameid = 4;
inline bool CMsgAuthTicket::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_gameid() const {
  return _internal_has_gameid();
}
inline void CMsgAuthTicket::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::gameid() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.gameid)
  return _internal_gameid();
}
inline void CMsgAuthTicket::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  gameid_ = value;
}
inline void CMsgAuthTicket::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.gameid)
}

// optional uint32 h_steam_pipe = 5;
inline bool CMsgAuthTicket::_internal_has_h_steam_pipe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_h_steam_pipe() const {
  return _internal_has_h_steam_pipe();
}
inline void CMsgAuthTicket::clear_h_steam_pipe() {
  h_steam_pipe_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_h_steam_pipe() const {
  return h_steam_pipe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::h_steam_pipe() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.h_steam_pipe)
  return _internal_h_steam_pipe();
}
inline void CMsgAuthTicket::_internal_set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_steam_pipe_ = value;
}
inline void CMsgAuthTicket::set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h_steam_pipe(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.h_steam_pipe)
}

// optional uint32 ticket_crc = 6;
inline bool CMsgAuthTicket::_internal_has_ticket_crc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket_crc() const {
  return _internal_has_ticket_crc();
}
inline void CMsgAuthTicket::clear_ticket_crc() {
  ticket_crc_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_ticket_crc() const {
  return ticket_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::ticket_crc() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket_crc)
  return _internal_ticket_crc();
}
inline void CMsgAuthTicket::_internal_set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ticket_crc_ = value;
}
inline void CMsgAuthTicket::set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ticket_crc(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket_crc)
}

// optional bytes ticket = 7;
inline bool CMsgAuthTicket::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgAuthTicket::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAuthTicket::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket)
  return _internal_ticket();
}
inline void CMsgAuthTicket::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket)
}
inline std::string* CMsgAuthTicket::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgAuthTicket.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& CMsgAuthTicket::_internal_ticket() const {
  return ticket_.Get();
}
inline void CMsgAuthTicket::_internal_set_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CMsgAuthTicket::set_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgAuthTicket.ticket)
}
inline void CMsgAuthTicket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgAuthTicket.ticket)
}
inline void CMsgAuthTicket::set_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgAuthTicket.ticket)
}
inline std::string* CMsgAuthTicket::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CMsgAuthTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:CMsgAuthTicket.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgAuthTicket::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgAuthTicket.ticket)
}

// -------------------------------------------------------------------

// CCDDBAppDetailCommon

// optional uint32 appid = 1;
inline bool CCDDBAppDetailCommon::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_appid() const {
  return _internal_has_appid();
}
inline void CCDDBAppDetailCommon::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCDDBAppDetailCommon::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCDDBAppDetailCommon::appid() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.appid)
  return _internal_appid();
}
inline void CCDDBAppDetailCommon::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  appid_ = value;
}
inline void CCDDBAppDetailCommon::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.appid)
}

// optional string name = 2;
inline bool CCDDBAppDetailCommon::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_name() const {
  return _internal_has_name();
}
inline void CCDDBAppDetailCommon::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCDDBAppDetailCommon::name() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.name)
  return _internal_name();
}
inline void CCDDBAppDetailCommon::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.name)
}
inline std::string* CCDDBAppDetailCommon::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.name)
  return _internal_mutable_name();
}
inline const std::string& CCDDBAppDetailCommon::_internal_name() const {
  return name_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CCDDBAppDetailCommon::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.name)
}
inline void CCDDBAppDetailCommon::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.name)
}
inline void CCDDBAppDetailCommon::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.name)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_name() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.name)
}

// optional string icon = 3;
inline bool CCDDBAppDetailCommon::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_icon() const {
  return _internal_has_icon();
}
inline void CCDDBAppDetailCommon::clear_icon() {
  icon_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCDDBAppDetailCommon::icon() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.icon)
  return _internal_icon();
}
inline void CCDDBAppDetailCommon::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.icon)
}
inline std::string* CCDDBAppDetailCommon::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.icon)
  return _internal_mutable_icon();
}
inline const std::string& CCDDBAppDetailCommon::_internal_icon() const {
  return icon_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CCDDBAppDetailCommon::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.icon)
}
inline void CCDDBAppDetailCommon::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.icon)
}
inline void CCDDBAppDetailCommon::set_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.icon)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  return icon_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_icon() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.icon)
}

// optional string logo = 4;
inline bool CCDDBAppDetailCommon::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_logo() const {
  return _internal_has_logo();
}
inline void CCDDBAppDetailCommon::clear_logo() {
  logo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCDDBAppDetailCommon::logo() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.logo)
  return _internal_logo();
}
inline void CCDDBAppDetailCommon::set_logo(const std::string& value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.logo)
}
inline std::string* CCDDBAppDetailCommon::mutable_logo() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.logo)
  return _internal_mutable_logo();
}
inline const std::string& CCDDBAppDetailCommon::_internal_logo() const {
  return logo_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_logo(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CCDDBAppDetailCommon::set_logo(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.logo)
}
inline void CCDDBAppDetailCommon::set_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.logo)
}
inline void CCDDBAppDetailCommon::set_logo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.logo)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_logo() {
  _has_bits_[0] |= 0x00000004u;
  return logo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_logo() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.logo)
  if (!_internal_has_logo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return logo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.logo)
}

// optional string logo_small = 5;
inline bool CCDDBAppDetailCommon::_internal_has_logo_small() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_logo_small() const {
  return _internal_has_logo_small();
}
inline void CCDDBAppDetailCommon::clear_logo_small() {
  logo_small_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CCDDBAppDetailCommon::logo_small() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.logo_small)
  return _internal_logo_small();
}
inline void CCDDBAppDetailCommon::set_logo_small(const std::string& value) {
  _internal_set_logo_small(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.logo_small)
}
inline std::string* CCDDBAppDetailCommon::mutable_logo_small() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.logo_small)
  return _internal_mutable_logo_small();
}
inline const std::string& CCDDBAppDetailCommon::_internal_logo_small() const {
  return logo_small_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_logo_small(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CCDDBAppDetailCommon::set_logo_small(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.logo_small)
}
inline void CCDDBAppDetailCommon::set_logo_small(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.logo_small)
}
inline void CCDDBAppDetailCommon::set_logo_small(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.logo_small)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_logo_small() {
  _has_bits_[0] |= 0x00000008u;
  return logo_small_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_logo_small() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.logo_small)
  if (!_internal_has_logo_small()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return logo_small_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_logo_small(std::string* logo_small) {
  if (logo_small != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  logo_small_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo_small,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.logo_small)
}

// optional bool tool = 6;
inline bool CCDDBAppDetailCommon::_internal_has_tool() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_tool() const {
  return _internal_has_tool();
}
inline void CCDDBAppDetailCommon::clear_tool() {
  tool_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCDDBAppDetailCommon::_internal_tool() const {
  return tool_;
}
inline bool CCDDBAppDetailCommon::tool() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.tool)
  return _internal_tool();
}
inline void CCDDBAppDetailCommon::_internal_set_tool(bool value) {
  _has_bits_[0] |= 0x00000080u;
  tool_ = value;
}
inline void CCDDBAppDetailCommon::set_tool(bool value) {
  _internal_set_tool(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.tool)
}

// optional bool demo = 7;
inline bool CCDDBAppDetailCommon::_internal_has_demo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_demo() const {
  return _internal_has_demo();
}
inline void CCDDBAppDetailCommon::clear_demo() {
  demo_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CCDDBAppDetailCommon::_internal_demo() const {
  return demo_;
}
inline bool CCDDBAppDetailCommon::demo() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.demo)
  return _internal_demo();
}
inline void CCDDBAppDetailCommon::_internal_set_demo(bool value) {
  _has_bits_[0] |= 0x00000100u;
  demo_ = value;
}
inline void CCDDBAppDetailCommon::set_demo(bool value) {
  _internal_set_demo(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.demo)
}

// optional bool media = 8;
inline bool CCDDBAppDetailCommon::_internal_has_media() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_media() const {
  return _internal_has_media();
}
inline void CCDDBAppDetailCommon::clear_media() {
  media_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CCDDBAppDetailCommon::_internal_media() const {
  return media_;
}
inline bool CCDDBAppDetailCommon::media() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.media)
  return _internal_media();
}
inline void CCDDBAppDetailCommon::_internal_set_media(bool value) {
  _has_bits_[0] |= 0x00000200u;
  media_ = value;
}
inline void CCDDBAppDetailCommon::set_media(bool value) {
  _internal_set_media(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.media)
}

// optional bool community_visible_stats = 9;
inline bool CCDDBAppDetailCommon::_internal_has_community_visible_stats() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_community_visible_stats() const {
  return _internal_has_community_visible_stats();
}
inline void CCDDBAppDetailCommon::clear_community_visible_stats() {
  community_visible_stats_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CCDDBAppDetailCommon::_internal_community_visible_stats() const {
  return community_visible_stats_;
}
inline bool CCDDBAppDetailCommon::community_visible_stats() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.community_visible_stats)
  return _internal_community_visible_stats();
}
inline void CCDDBAppDetailCommon::_internal_set_community_visible_stats(bool value) {
  _has_bits_[0] |= 0x00000400u;
  community_visible_stats_ = value;
}
inline void CCDDBAppDetailCommon::set_community_visible_stats(bool value) {
  _internal_set_community_visible_stats(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.community_visible_stats)
}

// optional string friendly_name = 10;
inline bool CCDDBAppDetailCommon::_internal_has_friendly_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_friendly_name() const {
  return _internal_has_friendly_name();
}
inline void CCDDBAppDetailCommon::clear_friendly_name() {
  friendly_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CCDDBAppDetailCommon::friendly_name() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.friendly_name)
  return _internal_friendly_name();
}
inline void CCDDBAppDetailCommon::set_friendly_name(const std::string& value) {
  _internal_set_friendly_name(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.friendly_name)
}
inline std::string* CCDDBAppDetailCommon::mutable_friendly_name() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.friendly_name)
  return _internal_mutable_friendly_name();
}
inline const std::string& CCDDBAppDetailCommon::_internal_friendly_name() const {
  return friendly_name_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_friendly_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CCDDBAppDetailCommon::set_friendly_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.friendly_name)
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.friendly_name)
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.friendly_name)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_friendly_name() {
  _has_bits_[0] |= 0x00000010u;
  return friendly_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_friendly_name() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.friendly_name)
  if (!_internal_has_friendly_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return friendly_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  friendly_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendly_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.friendly_name)
}

// optional string propagation = 11;
inline bool CCDDBAppDetailCommon::_internal_has_propagation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_propagation() const {
  return _internal_has_propagation();
}
inline void CCDDBAppDetailCommon::clear_propagation() {
  propagation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CCDDBAppDetailCommon::propagation() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.propagation)
  return _internal_propagation();
}
inline void CCDDBAppDetailCommon::set_propagation(const std::string& value) {
  _internal_set_propagation(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.propagation)
}
inline std::string* CCDDBAppDetailCommon::mutable_propagation() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.propagation)
  return _internal_mutable_propagation();
}
inline const std::string& CCDDBAppDetailCommon::_internal_propagation() const {
  return propagation_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_propagation(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CCDDBAppDetailCommon::set_propagation(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.propagation)
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.propagation)
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.propagation)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_propagation() {
  _has_bits_[0] |= 0x00000020u;
  return propagation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_propagation() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.propagation)
  if (!_internal_has_propagation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return propagation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_propagation(std::string* propagation) {
  if (propagation != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  propagation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propagation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.propagation)
}

// optional bool has_adult_content = 12;
inline bool CCDDBAppDetailCommon::_internal_has_has_adult_content() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_has_adult_content() const {
  return _internal_has_has_adult_content();
}
inline void CCDDBAppDetailCommon::clear_has_adult_content() {
  has_adult_content_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CCDDBAppDetailCommon::_internal_has_adult_content() const {
  return has_adult_content_;
}
inline bool CCDDBAppDetailCommon::has_adult_content() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.has_adult_content)
  return _internal_has_adult_content();
}
inline void CCDDBAppDetailCommon::_internal_set_has_adult_content(bool value) {
  _has_bits_[0] |= 0x00000800u;
  has_adult_content_ = value;
}
inline void CCDDBAppDetailCommon::set_has_adult_content(bool value) {
  _internal_set_has_adult_content(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.has_adult_content)
}

// -------------------------------------------------------------------

// CMsgAppRights

// optional bool edit_info = 1;
inline bool CMsgAppRights::_internal_has_edit_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_info() const {
  return _internal_has_edit_info();
}
inline void CMsgAppRights::clear_edit_info() {
  edit_info_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgAppRights::_internal_edit_info() const {
  return edit_info_;
}
inline bool CMsgAppRights::edit_info() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_info)
  return _internal_edit_info();
}
inline void CMsgAppRights::_internal_set_edit_info(bool value) {
  _has_bits_[0] |= 0x00000001u;
  edit_info_ = value;
}
inline void CMsgAppRights::set_edit_info(bool value) {
  _internal_set_edit_info(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_info)
}

// optional bool publish = 2;
inline bool CMsgAppRights::_internal_has_publish() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAppRights::has_publish() const {
  return _internal_has_publish();
}
inline void CMsgAppRights::clear_publish() {
  publish_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgAppRights::_internal_publish() const {
  return publish_;
}
inline bool CMsgAppRights::publish() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.publish)
  return _internal_publish();
}
inline void CMsgAppRights::_internal_set_publish(bool value) {
  _has_bits_[0] |= 0x00000002u;
  publish_ = value;
}
inline void CMsgAppRights::set_publish(bool value) {
  _internal_set_publish(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.publish)
}

// optional bool view_error_data = 3;
inline bool CMsgAppRights::_internal_has_view_error_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_error_data() const {
  return _internal_has_view_error_data();
}
inline void CMsgAppRights::clear_view_error_data() {
  view_error_data_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgAppRights::_internal_view_error_data() const {
  return view_error_data_;
}
inline bool CMsgAppRights::view_error_data() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_error_data)
  return _internal_view_error_data();
}
inline void CMsgAppRights::_internal_set_view_error_data(bool value) {
  _has_bits_[0] |= 0x00000004u;
  view_error_data_ = value;
}
inline void CMsgAppRights::set_view_error_data(bool value) {
  _internal_set_view_error_data(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_error_data)
}

// optional bool download = 4;
inline bool CMsgAppRights::_internal_has_download() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAppRights::has_download() const {
  return _internal_has_download();
}
inline void CMsgAppRights::clear_download() {
  download_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgAppRights::_internal_download() const {
  return download_;
}
inline bool CMsgAppRights::download() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.download)
  return _internal_download();
}
inline void CMsgAppRights::_internal_set_download(bool value) {
  _has_bits_[0] |= 0x00000008u;
  download_ = value;
}
inline void CMsgAppRights::set_download(bool value) {
  _internal_set_download(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.download)
}

// optional bool upload_cdkeys = 5;
inline bool CMsgAppRights::_internal_has_upload_cdkeys() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAppRights::has_upload_cdkeys() const {
  return _internal_has_upload_cdkeys();
}
inline void CMsgAppRights::clear_upload_cdkeys() {
  upload_cdkeys_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgAppRights::_internal_upload_cdkeys() const {
  return upload_cdkeys_;
}
inline bool CMsgAppRights::upload_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.upload_cdkeys)
  return _internal_upload_cdkeys();
}
inline void CMsgAppRights::_internal_set_upload_cdkeys(bool value) {
  _has_bits_[0] |= 0x00000010u;
  upload_cdkeys_ = value;
}
inline void CMsgAppRights::set_upload_cdkeys(bool value) {
  _internal_set_upload_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.upload_cdkeys)
}

// optional bool generate_cdkeys = 6;
inline bool CMsgAppRights::_internal_has_generate_cdkeys() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgAppRights::has_generate_cdkeys() const {
  return _internal_has_generate_cdkeys();
}
inline void CMsgAppRights::clear_generate_cdkeys() {
  generate_cdkeys_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgAppRights::_internal_generate_cdkeys() const {
  return generate_cdkeys_;
}
inline bool CMsgAppRights::generate_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.generate_cdkeys)
  return _internal_generate_cdkeys();
}
inline void CMsgAppRights::_internal_set_generate_cdkeys(bool value) {
  _has_bits_[0] |= 0x00000020u;
  generate_cdkeys_ = value;
}
inline void CMsgAppRights::set_generate_cdkeys(bool value) {
  _internal_set_generate_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.generate_cdkeys)
}

// optional bool view_financials = 7;
inline bool CMsgAppRights::_internal_has_view_financials() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_financials() const {
  return _internal_has_view_financials();
}
inline void CMsgAppRights::clear_view_financials() {
  view_financials_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgAppRights::_internal_view_financials() const {
  return view_financials_;
}
inline bool CMsgAppRights::view_financials() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_financials)
  return _internal_view_financials();
}
inline void CMsgAppRights::_internal_set_view_financials(bool value) {
  _has_bits_[0] |= 0x00000040u;
  view_financials_ = value;
}
inline void CMsgAppRights::set_view_financials(bool value) {
  _internal_set_view_financials(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_financials)
}

// optional bool manage_ceg = 8;
inline bool CMsgAppRights::_internal_has_manage_ceg() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_ceg() const {
  return _internal_has_manage_ceg();
}
inline void CMsgAppRights::clear_manage_ceg() {
  manage_ceg_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgAppRights::_internal_manage_ceg() const {
  return manage_ceg_;
}
inline bool CMsgAppRights::manage_ceg() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_ceg)
  return _internal_manage_ceg();
}
inline void CMsgAppRights::_internal_set_manage_ceg(bool value) {
  _has_bits_[0] |= 0x00000080u;
  manage_ceg_ = value;
}
inline void CMsgAppRights::set_manage_ceg(bool value) {
  _internal_set_manage_ceg(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_ceg)
}

// optional bool manage_signing = 9;
inline bool CMsgAppRights::_internal_has_manage_signing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_signing() const {
  return _internal_has_manage_signing();
}
inline void CMsgAppRights::clear_manage_signing() {
  manage_signing_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgAppRights::_internal_manage_signing() const {
  return manage_signing_;
}
inline bool CMsgAppRights::manage_signing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_signing)
  return _internal_manage_signing();
}
inline void CMsgAppRights::_internal_set_manage_signing(bool value) {
  _has_bits_[0] |= 0x00000100u;
  manage_signing_ = value;
}
inline void CMsgAppRights::set_manage_signing(bool value) {
  _internal_set_manage_signing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_signing)
}

// optional bool manage_cdkeys = 10;
inline bool CMsgAppRights::_internal_has_manage_cdkeys() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_cdkeys() const {
  return _internal_has_manage_cdkeys();
}
inline void CMsgAppRights::clear_manage_cdkeys() {
  manage_cdkeys_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgAppRights::_internal_manage_cdkeys() const {
  return manage_cdkeys_;
}
inline bool CMsgAppRights::manage_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_cdkeys)
  return _internal_manage_cdkeys();
}
inline void CMsgAppRights::_internal_set_manage_cdkeys(bool value) {
  _has_bits_[0] |= 0x00000200u;
  manage_cdkeys_ = value;
}
inline void CMsgAppRights::set_manage_cdkeys(bool value) {
  _internal_set_manage_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_cdkeys)
}

// optional bool edit_marketing = 11;
inline bool CMsgAppRights::_internal_has_edit_marketing() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_marketing() const {
  return _internal_has_edit_marketing();
}
inline void CMsgAppRights::clear_edit_marketing() {
  edit_marketing_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgAppRights::_internal_edit_marketing() const {
  return edit_marketing_;
}
inline bool CMsgAppRights::edit_marketing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_marketing)
  return _internal_edit_marketing();
}
inline void CMsgAppRights::_internal_set_edit_marketing(bool value) {
  _has_bits_[0] |= 0x00000400u;
  edit_marketing_ = value;
}
inline void CMsgAppRights::set_edit_marketing(bool value) {
  _internal_set_edit_marketing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_marketing)
}

// optional bool economy_support = 12;
inline bool CMsgAppRights::_internal_has_economy_support() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgAppRights::has_economy_support() const {
  return _internal_has_economy_support();
}
inline void CMsgAppRights::clear_economy_support() {
  economy_support_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgAppRights::_internal_economy_support() const {
  return economy_support_;
}
inline bool CMsgAppRights::economy_support() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.economy_support)
  return _internal_economy_support();
}
inline void CMsgAppRights::_internal_set_economy_support(bool value) {
  _has_bits_[0] |= 0x00000800u;
  economy_support_ = value;
}
inline void CMsgAppRights::set_economy_support(bool value) {
  _internal_set_economy_support(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.economy_support)
}

// optional bool economy_support_supervisor = 13;
inline bool CMsgAppRights::_internal_has_economy_support_supervisor() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_economy_support_supervisor() const {
  return _internal_has_economy_support_supervisor();
}
inline void CMsgAppRights::clear_economy_support_supervisor() {
  economy_support_supervisor_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgAppRights::_internal_economy_support_supervisor() const {
  return economy_support_supervisor_;
}
inline bool CMsgAppRights::economy_support_supervisor() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.economy_support_supervisor)
  return _internal_economy_support_supervisor();
}
inline void CMsgAppRights::_internal_set_economy_support_supervisor(bool value) {
  _has_bits_[0] |= 0x00001000u;
  economy_support_supervisor_ = value;
}
inline void CMsgAppRights::set_economy_support_supervisor(bool value) {
  _internal_set_economy_support_supervisor(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.economy_support_supervisor)
}

// optional bool manage_pricing = 14;
inline bool CMsgAppRights::_internal_has_manage_pricing() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_pricing() const {
  return _internal_has_manage_pricing();
}
inline void CMsgAppRights::clear_manage_pricing() {
  manage_pricing_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgAppRights::_internal_manage_pricing() const {
  return manage_pricing_;
}
inline bool CMsgAppRights::manage_pricing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_pricing)
  return _internal_manage_pricing();
}
inline void CMsgAppRights::_internal_set_manage_pricing(bool value) {
  _has_bits_[0] |= 0x00002000u;
  manage_pricing_ = value;
}
inline void CMsgAppRights::set_manage_pricing(bool value) {
  _internal_set_manage_pricing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_pricing)
}

// optional bool broadcast_live = 15;
inline bool CMsgAppRights::_internal_has_broadcast_live() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_broadcast_live() const {
  return _internal_has_broadcast_live();
}
inline void CMsgAppRights::clear_broadcast_live() {
  broadcast_live_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgAppRights::_internal_broadcast_live() const {
  return broadcast_live_;
}
inline bool CMsgAppRights::broadcast_live() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.broadcast_live)
  return _internal_broadcast_live();
}
inline void CMsgAppRights::_internal_set_broadcast_live(bool value) {
  _has_bits_[0] |= 0x00004000u;
  broadcast_live_ = value;
}
inline void CMsgAppRights::set_broadcast_live(bool value) {
  _internal_set_broadcast_live(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.broadcast_live)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto
