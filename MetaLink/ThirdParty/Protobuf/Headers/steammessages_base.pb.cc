// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#include "steammessages_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class CMsgProtoBufHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgProtoBufHeader> _instance;
} _CMsgProtoBufHeader_default_instance_;
class CMsgMultiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgMulti> _instance;
} _CMsgMulti_default_instance_;
class CMsgProtobufWrappedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgProtobufWrapped> _instance;
} _CMsgProtobufWrapped_default_instance_;
class CMsgAuthTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgAuthTicket> _instance;
} _CMsgAuthTicket_default_instance_;
class CCDDBAppDetailCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCDDBAppDetailCommon> _instance;
} _CCDDBAppDetailCommon_default_instance_;
class CMsgAppRightsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgAppRights> _instance;
} _CMsgAppRights_default_instance_;
static void InitDefaultsscc_info_CCDDBAppDetailCommon_steammessages_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CCDDBAppDetailCommon_default_instance_;
    new (ptr) ::CCDDBAppDetailCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCDDBAppDetailCommon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCDDBAppDetailCommon_steammessages_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCDDBAppDetailCommon_steammessages_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_CMsgAppRights_steammessages_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgAppRights_default_instance_;
    new (ptr) ::CMsgAppRights();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAppRights::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgAppRights_steammessages_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgAppRights_steammessages_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_CMsgAuthTicket_steammessages_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgAuthTicket_default_instance_;
    new (ptr) ::CMsgAuthTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgAuthTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgAuthTicket_steammessages_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgAuthTicket_steammessages_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_CMsgMulti_steammessages_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgMulti_default_instance_;
    new (ptr) ::CMsgMulti();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgMulti::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgMulti_steammessages_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgMulti_steammessages_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_CMsgProtoBufHeader_steammessages_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgProtoBufHeader_default_instance_;
    new (ptr) ::CMsgProtoBufHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgProtoBufHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgProtoBufHeader_steammessages_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgProtoBufHeader_steammessages_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_CMsgProtobufWrapped_steammessages_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgProtobufWrapped_default_instance_;
    new (ptr) ::CMsgProtobufWrapped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgProtobufWrapped::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgProtobufWrapped_steammessages_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgProtobufWrapped_steammessages_5fbase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fbase_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fbase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, client_sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, routing_appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, jobid_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, jobid_target_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, target_job_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, seq_num_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, error_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, auth_account_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, token_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, admin_spoofing_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, transport_error_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, messageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, publisher_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, sysid_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, trace_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, webapi_key_id_),
  2,
  3,
  4,
  14,
  15,
  0,
  12,
  16,
  1,
  5,
  6,
  10,
  11,
  17,
  18,
  7,
  8,
  9,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgMulti, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMulti, size_unzipped_),
  PROTOBUF_FIELD_OFFSET(::CMsgMulti, message_body_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgProtobufWrapped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtobufWrapped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProtobufWrapped, message_body_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, estate_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, gameid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, h_steam_pipe_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, ticket_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, ticket_),
  2,
  6,
  1,
  4,
  3,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, appid_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, name_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, icon_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, logo_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, logo_small_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, tool_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, demo_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, media_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, community_visible_stats_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, friendly_name_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, propagation_),
  PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, has_adult_content_),
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  4,
  5,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, edit_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, publish_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, view_error_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, download_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, upload_cdkeys_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, generate_cdkeys_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, view_financials_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, manage_ceg_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, manage_signing_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, manage_cdkeys_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, edit_marketing_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, economy_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, economy_support_supervisor_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, manage_pricing_),
  PROTOBUF_FIELD_OFFSET(::CMsgAppRights, broadcast_live_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::CMsgProtoBufHeader)},
  { 43, 50, sizeof(::CMsgMulti)},
  { 52, 58, sizeof(::CMsgProtobufWrapped)},
  { 59, 71, sizeof(::CMsgAuthTicket)},
  { 78, 95, sizeof(::CCDDBAppDetailCommon)},
  { 107, 127, sizeof(::CMsgAppRights)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProtoBufHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMulti_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProtobufWrapped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAuthTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCDDBAppDetailCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAppRights_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030steammessages_base.proto\032 google/proto"
  "buf/descriptor.proto\"\370\003\n\022CMsgProtoBufHea"
  "der\022\017\n\007steamid\030\001 \001(\006\022\030\n\020client_sessionid"
  "\030\002 \001(\005\022\025\n\rrouting_appid\030\003 \001(\r\022*\n\014jobid_s"
  "ource\030\n \001(\006:\02418446744073709551615\022*\n\014job"
  "id_target\030\013 \001(\006:\02418446744073709551615\022\027\n"
  "\017target_job_name\030\014 \001(\t\022\017\n\007seq_num\030\030 \001(\005\022"
  "\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001"
  "(\t\022\n\n\002ip\030\017 \001(\r\022\032\n\022auth_account_flags\030\020 \001"
  "(\r\022\024\n\014token_source\030\026 \001(\r\022\033\n\023admin_spoofi"
  "ng_user\030\027 \001(\010\022\032\n\017transport_error\030\021 \001(\005:\001"
  "1\022\'\n\tmessageid\030\022 \001(\004:\024184467440737095516"
  "15\022\032\n\022publisher_group_id\030\023 \001(\r\022\r\n\005sysid\030"
  "\024 \001(\r\022\021\n\ttrace_tag\030\025 \001(\004\022\025\n\rwebapi_key_i"
  "d\030\031 \001(\r\"8\n\tCMsgMulti\022\025\n\rsize_unzipped\030\001 "
  "\001(\r\022\024\n\014message_body\030\002 \001(\014\"+\n\023CMsgProtobu"
  "fWrapped\022\024\n\014message_body\030\001 \001(\014\"\217\001\n\016CMsgA"
  "uthTicket\022\016\n\006estate\030\001 \001(\r\022\022\n\007eresult\030\002 \001"
  "(\r:\0012\022\017\n\007steamid\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\006\022\024"
  "\n\014h_steam_pipe\030\005 \001(\r\022\022\n\nticket_crc\030\006 \001(\r"
  "\022\016\n\006ticket\030\007 \001(\014\"\366\001\n\024CCDDBAppDetailCommo"
  "n\022\r\n\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003"
  " \001(\t\022\014\n\004logo\030\004 \001(\t\022\022\n\nlogo_small\030\005 \001(\t\022\014"
  "\n\004tool\030\006 \001(\010\022\014\n\004demo\030\007 \001(\010\022\r\n\005media\030\010 \001("
  "\010\022\037\n\027community_visible_stats\030\t \001(\010\022\025\n\rfr"
  "iendly_name\030\n \001(\t\022\023\n\013propagation\030\013 \001(\t\022\031"
  "\n\021has_adult_content\030\014 \001(\010\"\357\002\n\rCMsgAppRig"
  "hts\022\021\n\tedit_info\030\001 \001(\010\022\017\n\007publish\030\002 \001(\010\022"
  "\027\n\017view_error_data\030\003 \001(\010\022\020\n\010download\030\004 \001"
  "(\010\022\025\n\rupload_cdkeys\030\005 \001(\010\022\027\n\017generate_cd"
  "keys\030\006 \001(\010\022\027\n\017view_financials\030\007 \001(\010\022\022\n\nm"
  "anage_ceg\030\010 \001(\010\022\026\n\016manage_signing\030\t \001(\010\022"
  "\025\n\rmanage_cdkeys\030\n \001(\010\022\026\n\016edit_marketing"
  "\030\013 \001(\010\022\027\n\017economy_support\030\014 \001(\010\022\"\n\032econo"
  "my_support_supervisor\030\r \001(\010\022\026\n\016manage_pr"
  "icing\030\016 \001(\010\022\026\n\016broadcast_live\030\017 \001(\010:A\n\022m"
  "sgpool_soft_limit\022\037.google.protobuf.Mess"
  "ageOptions\030\320\206\003 \001(\005:\00232:B\n\022msgpool_hard_l"
  "imit\022\037.google.protobuf.MessageOptions\030\321\206"
  "\003 \001(\005:\003384B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fbase_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_steammessages_5fbase_2eproto_sccs[6] = {
  &scc_info_CCDDBAppDetailCommon_steammessages_5fbase_2eproto.base,
  &scc_info_CMsgAppRights_steammessages_5fbase_2eproto.base,
  &scc_info_CMsgAuthTicket_steammessages_5fbase_2eproto.base,
  &scc_info_CMsgMulti_steammessages_5fbase_2eproto.base,
  &scc_info_CMsgProtoBufHeader_steammessages_5fbase_2eproto.base,
  &scc_info_CMsgProtobufWrapped_steammessages_5fbase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fbase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fbase_2eproto = {
  false, false, descriptor_table_protodef_steammessages_5fbase_2eproto, "steammessages_base.proto", 1577,
  &descriptor_table_steammessages_5fbase_2eproto_once, descriptor_table_steammessages_5fbase_2eproto_sccs, descriptor_table_steammessages_5fbase_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_steammessages_5fbase_2eproto::offsets,
  file_level_metadata_steammessages_5fbase_2eproto, 6, file_level_enum_descriptors_steammessages_5fbase_2eproto, file_level_service_descriptors_steammessages_5fbase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fbase_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_steammessages_5fbase_2eproto)), true);

// ===================================================================

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}
class CMsgProtoBufHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProtoBufHeader>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_routing_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jobid_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_jobid_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_target_job_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_auth_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_token_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_admin_spoofing_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_transport_error(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_publisher_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sysid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trace_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_webapi_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgProtoBufHeader::CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_job_name()) {
    target_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_job_name(),
      GetArena());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_message()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&messageid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(messageid_));
  // @@protoc_insertion_point(copy_constructor:CMsgProtoBufHeader)
}

void CMsgProtoBufHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgProtoBufHeader_steammessages_5fbase_2eproto.base);
  target_job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webapi_key_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(webapi_key_id_));
  jobid_source_ = PROTOBUF_ULONGLONG(18446744073709551615);
  jobid_target_ = PROTOBUF_ULONGLONG(18446744073709551615);
  eresult_ = 2;
  transport_error_ = 1;
  messageid_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoBufHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProtoBufHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_job_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoBufHeader::ArenaDtor(void* object) {
  CMsgProtoBufHeader* _this = reinterpret_cast< CMsgProtoBufHeader* >(object);
  (void)_this;
}
void CMsgProtoBufHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProtoBufHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgProtoBufHeader_steammessages_5fbase_2eproto.base);
  return *internal_default_instance();
}


void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoBufHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_job_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      error_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publisher_group_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(publisher_group_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&sysid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webapi_key_id_) -
        reinterpret_cast<char*>(&sysid_)) + sizeof(webapi_key_id_));
    jobid_source_ = PROTOBUF_ULONGLONG(18446744073709551615);
    jobid_target_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  if (cached_has_bits & 0x00070000u) {
    eresult_ = 2;
    transport_error_ = 1;
    messageid_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProtoBufHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 client_sessionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_sessionid(&has_bits);
          client_sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 routing_appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_routing_appid(&has_bits);
          routing_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_jobid_source(&has_bits);
          jobid_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_jobid_target(&has_bits);
          jobid_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string target_job_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_target_job_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProtoBufHeader.target_job_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 13 [default = 2];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProtoBufHeader.error_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ip = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 auth_account_flags = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_auth_account_flags(&has_bits);
          auth_account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transport_error = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_transport_error(&has_bits);
          transport_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 messageid = 18 [default = 18446744073709551615];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_messageid(&has_bits);
          messageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 publisher_group_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_publisher_group_id(&has_bits);
          publisher_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sysid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_sysid(&has_bits);
          sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 trace_tag = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_trace_tag(&has_bits);
          trace_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 token_source = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_token_source(&has_bits);
          token_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool admin_spoofing_user = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_admin_spoofing_user(&has_bits);
          admin_spoofing_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seq_num = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_seq_num(&has_bits);
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 webapi_key_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_webapi_key_id(&has_bits);
          webapi_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProtoBufHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoBufHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional int32 client_sessionid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_sessionid(), target);
  }

  // optional uint32 routing_appid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_routing_appid(), target);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_jobid_source(), target);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_jobid_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_job_name().data(), static_cast<int>(this->_internal_target_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.target_job_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.error_message");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_error_message(), target);
  }

  // optional uint32 ip = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ip(), target);
  }

  // optional uint32 auth_account_flags = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_auth_account_flags(), target);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_transport_error(), target);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_messageid(), target);
  }

  // optional uint32 publisher_group_id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_publisher_group_id(), target);
  }

  // optional uint32 sysid = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_sysid(), target);
  }

  // optional uint64 trace_tag = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_trace_tag(), target);
  }

  // optional uint32 token_source = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_token_source(), target);
  }

  // optional bool admin_spoofing_user = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_admin_spoofing_user(), target);
  }

  // optional int32 seq_num = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_seq_num(), target);
  }

  // optional uint32 webapi_key_id = 25;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_webapi_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoBufHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_job_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_job_name());
    }

    // optional string error_message = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 client_sessionid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_routing_appid());
    }

    // optional uint32 ip = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ip());
    }

    // optional uint32 auth_account_flags = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_auth_account_flags());
    }

    // optional uint32 publisher_group_id = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_publisher_group_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 sysid = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sysid());
    }

    // optional uint64 trace_tag = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_trace_tag());
    }

    // optional uint32 token_source = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_token_source());
    }

    // optional bool admin_spoofing_user = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int32 seq_num = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seq_num());
    }

    // optional uint32 webapi_key_id = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_webapi_key_id());
    }

    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 eresult = 13 [default = 2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

    // optional int32 transport_error = 17 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_messageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProtoBufHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProtoBufHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProtoBufHeader)
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target_job_name(from._internal_target_job_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_sessionid_ = from.client_sessionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      routing_appid_ = from.routing_appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      auth_account_flags_ = from.auth_account_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      publisher_group_id_ = from.publisher_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sysid_ = from.sysid_;
    }
    if (cached_has_bits & 0x00000200u) {
      trace_tag_ = from.trace_tag_;
    }
    if (cached_has_bits & 0x00000400u) {
      token_source_ = from.token_source_;
    }
    if (cached_has_bits & 0x00000800u) {
      admin_spoofing_user_ = from.admin_spoofing_user_;
    }
    if (cached_has_bits & 0x00001000u) {
      seq_num_ = from.seq_num_;
    }
    if (cached_has_bits & 0x00002000u) {
      webapi_key_id_ = from.webapi_key_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      jobid_source_ = from.jobid_source_;
    }
    if (cached_has_bits & 0x00008000u) {
      jobid_target_ = from.jobid_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00020000u) {
      transport_error_ = from.transport_error_;
    }
    if (cached_has_bits & 0x00040000u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProtoBufHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_job_name_.Swap(&other->target_job_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, webapi_key_id_)
      + sizeof(CMsgProtoBufHeader::webapi_key_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
  swap(jobid_source_, other->jobid_source_);
  swap(jobid_target_, other->jobid_target_);
  swap(eresult_, other->eresult_);
  swap(transport_error_, other->transport_error_);
  swap(messageid_, other->messageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProtoBufHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgMulti::InitAsDefaultInstance() {
}
class CMsgMulti::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMulti>()._has_bits_);
  static void set_has_size_unzipped(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMulti::CMsgMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMulti)
}
CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_body()) {
    message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_body(),
      GetArena());
  }
  size_unzipped_ = from.size_unzipped_;
  // @@protoc_insertion_point(copy_constructor:CMsgMulti)
}

void CMsgMulti::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgMulti_steammessages_5fbase_2eproto.base);
  message_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_unzipped_ = 0u;
}

CMsgMulti::~CMsgMulti() {
  // @@protoc_insertion_point(destructor:CMsgMulti)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMulti::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgMulti::ArenaDtor(void* object) {
  CMsgMulti* _this = reinterpret_cast< CMsgMulti* >(object);
  (void)_this;
}
void CMsgMulti::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMulti::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMulti& CMsgMulti::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgMulti_steammessages_5fbase_2eproto.base);
  return *internal_default_instance();
}


void CMsgMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_body_.ClearNonDefaultToEmpty();
  }
  size_unzipped_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMulti::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 size_unzipped = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size_unzipped(&has_bits);
          size_unzipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes message_body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMulti::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_unzipped = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size_unzipped(), target);
  }

  // optional bytes message_body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMulti)
  return target;
}

size_t CMsgMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMulti)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes message_body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message_body());
    }

    // optional uint32 size_unzipped = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size_unzipped());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMulti::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMulti* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMulti>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMulti)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMulti)
    MergeFrom(*source);
  }
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_body(from._internal_message_body());
    }
    if (cached_has_bits & 0x00000002u) {
      size_unzipped_ = from.size_unzipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMulti::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {
  return true;
}

void CMsgMulti::InternalSwap(CMsgMulti* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_body_.Swap(&other->message_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_unzipped_, other->size_unzipped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMulti::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgProtobufWrapped::InitAsDefaultInstance() {
}
class CMsgProtobufWrapped::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProtobufWrapped>()._has_bits_);
  static void set_has_message_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgProtobufWrapped::CMsgProtobufWrapped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtobufWrapped)
}
CMsgProtobufWrapped::CMsgProtobufWrapped(const CMsgProtobufWrapped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_body()) {
    message_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_body(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgProtobufWrapped)
}

void CMsgProtobufWrapped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgProtobufWrapped_steammessages_5fbase_2eproto.base);
  message_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgProtobufWrapped::~CMsgProtobufWrapped() {
  // @@protoc_insertion_point(destructor:CMsgProtobufWrapped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProtobufWrapped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtobufWrapped::ArenaDtor(void* object) {
  CMsgProtobufWrapped* _this = reinterpret_cast< CMsgProtobufWrapped* >(object);
  (void)_this;
}
void CMsgProtobufWrapped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProtobufWrapped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgProtobufWrapped& CMsgProtobufWrapped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgProtobufWrapped_steammessages_5fbase_2eproto.base);
  return *internal_default_instance();
}


void CMsgProtobufWrapped::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtobufWrapped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_body_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProtobufWrapped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes message_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProtobufWrapped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtobufWrapped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes message_body = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtobufWrapped)
  return target;
}

size_t CMsgProtobufWrapped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtobufWrapped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes message_body = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_body());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtobufWrapped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProtobufWrapped)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtobufWrapped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProtobufWrapped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProtobufWrapped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProtobufWrapped)
    MergeFrom(*source);
  }
}

void CMsgProtobufWrapped::MergeFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtobufWrapped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_body()) {
    _internal_set_message_body(from._internal_message_body());
  }
}

void CMsgProtobufWrapped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtobufWrapped::CopyFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtobufWrapped::IsInitialized() const {
  return true;
}

void CMsgProtobufWrapped::InternalSwap(CMsgProtobufWrapped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_body_.Swap(&other->message_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProtobufWrapped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgAuthTicket::InitAsDefaultInstance() {
}
class CMsgAuthTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAuthTicket>()._has_bits_);
  static void set_has_estate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_h_steam_pipe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ticket_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAuthTicket::CMsgAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAuthTicket)
}
CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket()) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticket(),
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAuthTicket)
}

void CMsgAuthTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgAuthTicket_steammessages_5fbase_2eproto.base);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_crc_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(ticket_crc_));
  eresult_ = 2u;
}

CMsgAuthTicket::~CMsgAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgAuthTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAuthTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAuthTicket::ArenaDtor(void* object) {
  CMsgAuthTicket* _this = reinterpret_cast< CMsgAuthTicket* >(object);
  (void)_this;
}
void CMsgAuthTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgAuthTicket_steammessages_5fbase_2eproto.base);
  return *internal_default_instance();
}


void CMsgAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAuthTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ticket_crc_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(ticket_crc_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAuthTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 estate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_estate(&has_bits);
          estate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eresult = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gameid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 h_steam_pipe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_h_steam_pipe(&has_bits);
          h_steam_pipe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ticket_crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ticket_crc(&has_bits);
          ticket_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ticket = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAuthTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAuthTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 estate = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_estate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  // optional fixed64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_gameid(), target);
  }

  // optional uint32 h_steam_pipe = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_h_steam_pipe(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ticket_crc(), target);
  }

  // optional bytes ticket = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAuthTicket)
  return target;
}

size_t CMsgAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAuthTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes ticket = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ticket());
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_estate());
    }

    // optional uint32 h_steam_pipe = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_h_steam_pipe());
    }

    // optional fixed64 gameid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 ticket_crc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ticket_crc());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAuthTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAuthTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAuthTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAuthTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      estate_ = from.estate_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_steam_pipe_ = from.h_steam_pipe_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ticket_crc_ = from.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAuthTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {
  return true;
}

void CMsgAuthTicket::InternalSwap(CMsgAuthTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, ticket_crc_)
      + sizeof(CMsgAuthTicket::ticket_crc_)
      - PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAuthTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCDDBAppDetailCommon::InitAsDefaultInstance() {
}
class CCDDBAppDetailCommon::_Internal {
 public:
  using HasBits = decltype(std::declval<CCDDBAppDetailCommon>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_logo_small(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tool(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_demo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_media(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_community_visible_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_friendly_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_propagation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_adult_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CCDDBAppDetailCommon::CCDDBAppDetailCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCDDBAppDetailCommon)
}
CCDDBAppDetailCommon::CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icon(),
      GetArena());
  }
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_logo()) {
    logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logo(),
      GetArena());
  }
  logo_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_logo_small()) {
    logo_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logo_small(),
      GetArena());
  }
  friendly_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_friendly_name()) {
    friendly_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_friendly_name(),
      GetArena());
  }
  propagation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_propagation()) {
    propagation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_propagation(),
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_adult_content_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(has_adult_content_));
  // @@protoc_insertion_point(copy_constructor:CCDDBAppDetailCommon)
}

void CCDDBAppDetailCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CCDDBAppDetailCommon_steammessages_5fbase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propagation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_adult_content_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(has_adult_content_));
}

CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  // @@protoc_insertion_point(destructor:CCDDBAppDetailCommon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCDDBAppDetailCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_small_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propagation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCDDBAppDetailCommon::ArenaDtor(void* object) {
  CCDDBAppDetailCommon* _this = reinterpret_cast< CCDDBAppDetailCommon* >(object);
  (void)_this;
}
void CCDDBAppDetailCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCDDBAppDetailCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCDDBAppDetailCommon& CCDDBAppDetailCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCDDBAppDetailCommon_steammessages_5fbase_2eproto.base);
  return *internal_default_instance();
}


void CCDDBAppDetailCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:CCDDBAppDetailCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      logo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      logo_small_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      friendly_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      propagation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tool_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(tool_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&demo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_adult_content_) -
        reinterpret_cast<char*>(&demo_)) + sizeof(has_adult_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCDDBAppDetailCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCDDBAppDetailCommon.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCDDBAppDetailCommon.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCDDBAppDetailCommon.logo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string logo_small = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_logo_small();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCDDBAppDetailCommon.logo_small");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tool(&has_bits);
          tool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool demo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_demo(&has_bits);
          demo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool media = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_media(&has_bits);
          media_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool community_visible_stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_community_visible_stats(&has_bits);
          community_visible_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string friendly_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_friendly_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCDDBAppDetailCommon.friendly_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string propagation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_propagation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCDDBAppDetailCommon.propagation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_adult_content = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_has_adult_content(&has_bits);
          has_adult_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCDDBAppDetailCommon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCDDBAppDetailCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // optional string logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.logo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_logo(), target);
  }

  // optional string logo_small = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_logo_small().data(), static_cast<int>(this->_internal_logo_small().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.logo_small");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_logo_small(), target);
  }

  // optional bool tool = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_tool(), target);
  }

  // optional bool demo = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_demo(), target);
  }

  // optional bool media = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_media(), target);
  }

  // optional bool community_visible_stats = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_community_visible_stats(), target);
  }

  // optional string friendly_name = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_friendly_name().data(), static_cast<int>(this->_internal_friendly_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.friendly_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_friendly_name(), target);
  }

  // optional string propagation = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_propagation().data(), static_cast<int>(this->_internal_propagation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCDDBAppDetailCommon.propagation");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_propagation(), target);
  }

  // optional bool has_adult_content = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_has_adult_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCDDBAppDetailCommon)
  return target;
}

size_t CCDDBAppDetailCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCDDBAppDetailCommon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logo());
    }

    // optional string logo_small = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logo_small());
    }

    // optional string friendly_name = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_friendly_name());
    }

    // optional string propagation = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_propagation());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool tool = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool demo = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool media = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool community_visible_stats = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool has_adult_content = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCDDBAppDetailCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCDDBAppDetailCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const CCDDBAppDetailCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCDDBAppDetailCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCDDBAppDetailCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCDDBAppDetailCommon)
    MergeFrom(*source);
  }
}

void CCDDBAppDetailCommon::MergeFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCDDBAppDetailCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_logo(from._internal_logo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_logo_small(from._internal_logo_small());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_friendly_name(from._internal_friendly_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_propagation(from._internal_propagation());
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      tool_ = from.tool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      demo_ = from.demo_;
    }
    if (cached_has_bits & 0x00000200u) {
      media_ = from.media_;
    }
    if (cached_has_bits & 0x00000400u) {
      community_visible_stats_ = from.community_visible_stats_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_adult_content_ = from.has_adult_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCDDBAppDetailCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDDBAppDetailCommon::IsInitialized() const {
  return true;
}

void CCDDBAppDetailCommon::InternalSwap(CCDDBAppDetailCommon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logo_.Swap(&other->logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logo_small_.Swap(&other->logo_small_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friendly_name_.Swap(&other->friendly_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  propagation_.Swap(&other->propagation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, has_adult_content_)
      + sizeof(CCDDBAppDetailCommon::has_adult_content_)
      - PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCDDBAppDetailCommon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgAppRights::InitAsDefaultInstance() {
}
class CMsgAppRights::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAppRights>()._has_bits_);
  static void set_has_edit_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_publish(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_error_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_download(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_upload_cdkeys(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_generate_cdkeys(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_view_financials(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manage_ceg(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manage_signing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manage_cdkeys(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_edit_marketing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_economy_support(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_economy_support_supervisor(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_manage_pricing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_broadcast_live(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgAppRights::CMsgAppRights(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAppRights)
}
CMsgAppRights::CMsgAppRights(const CMsgAppRights& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&edit_info_, &from.edit_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_live_) -
    reinterpret_cast<char*>(&edit_info_)) + sizeof(broadcast_live_));
  // @@protoc_insertion_point(copy_constructor:CMsgAppRights)
}

void CMsgAppRights::SharedCtor() {
  ::memset(&edit_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_live_) -
      reinterpret_cast<char*>(&edit_info_)) + sizeof(broadcast_live_));
}

CMsgAppRights::~CMsgAppRights() {
  // @@protoc_insertion_point(destructor:CMsgAppRights)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAppRights::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAppRights::ArenaDtor(void* object) {
  CMsgAppRights* _this = reinterpret_cast< CMsgAppRights* >(object);
  (void)_this;
}
void CMsgAppRights::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAppRights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAppRights& CMsgAppRights::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgAppRights_steammessages_5fbase_2eproto.base);
  return *internal_default_instance();
}


void CMsgAppRights::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAppRights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&edit_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manage_ceg_) -
        reinterpret_cast<char*>(&edit_info_)) + sizeof(manage_ceg_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&manage_signing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_live_) -
        reinterpret_cast<char*>(&manage_signing_)) + sizeof(broadcast_live_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAppRights::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool edit_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_edit_info(&has_bits);
          edit_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool publish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_publish(&has_bits);
          publish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool view_error_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_view_error_data(&has_bits);
          view_error_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool download = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_download(&has_bits);
          download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool upload_cdkeys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_upload_cdkeys(&has_bits);
          upload_cdkeys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool generate_cdkeys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_generate_cdkeys(&has_bits);
          generate_cdkeys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool view_financials = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_view_financials(&has_bits);
          view_financials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manage_ceg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_manage_ceg(&has_bits);
          manage_ceg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manage_signing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_manage_signing(&has_bits);
          manage_signing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manage_cdkeys = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_manage_cdkeys(&has_bits);
          manage_cdkeys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool edit_marketing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_edit_marketing(&has_bits);
          edit_marketing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool economy_support = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_economy_support(&has_bits);
          economy_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool economy_support_supervisor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_economy_support_supervisor(&has_bits);
          economy_support_supervisor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manage_pricing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_manage_pricing(&has_bits);
          manage_pricing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast_live = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_broadcast_live(&has_bits);
          broadcast_live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAppRights::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAppRights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool edit_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_edit_info(), target);
  }

  // optional bool publish = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_publish(), target);
  }

  // optional bool view_error_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_view_error_data(), target);
  }

  // optional bool download = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_download(), target);
  }

  // optional bool upload_cdkeys = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_upload_cdkeys(), target);
  }

  // optional bool generate_cdkeys = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_generate_cdkeys(), target);
  }

  // optional bool view_financials = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_view_financials(), target);
  }

  // optional bool manage_ceg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_manage_ceg(), target);
  }

  // optional bool manage_signing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_manage_signing(), target);
  }

  // optional bool manage_cdkeys = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_manage_cdkeys(), target);
  }

  // optional bool edit_marketing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_edit_marketing(), target);
  }

  // optional bool economy_support = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_economy_support(), target);
  }

  // optional bool economy_support_supervisor = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_economy_support_supervisor(), target);
  }

  // optional bool manage_pricing = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_manage_pricing(), target);
  }

  // optional bool broadcast_live = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_broadcast_live(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAppRights)
  return target;
}

size_t CMsgAppRights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAppRights)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool edit_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool publish = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool view_error_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool download = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool upload_cdkeys = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool generate_cdkeys = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool view_financials = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool manage_ceg = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool manage_signing = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool manage_cdkeys = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool edit_marketing = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool economy_support = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool economy_support_supervisor = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool manage_pricing = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool broadcast_live = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAppRights::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAppRights)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAppRights* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAppRights>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAppRights)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAppRights)
    MergeFrom(*source);
  }
}

void CMsgAppRights::MergeFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAppRights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      edit_info_ = from.edit_info_;
    }
    if (cached_has_bits & 0x00000002u) {
      publish_ = from.publish_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_error_data_ = from.view_error_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      download_ = from.download_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_cdkeys_ = from.upload_cdkeys_;
    }
    if (cached_has_bits & 0x00000020u) {
      generate_cdkeys_ = from.generate_cdkeys_;
    }
    if (cached_has_bits & 0x00000040u) {
      view_financials_ = from.view_financials_;
    }
    if (cached_has_bits & 0x00000080u) {
      manage_ceg_ = from.manage_ceg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      manage_signing_ = from.manage_signing_;
    }
    if (cached_has_bits & 0x00000200u) {
      manage_cdkeys_ = from.manage_cdkeys_;
    }
    if (cached_has_bits & 0x00000400u) {
      edit_marketing_ = from.edit_marketing_;
    }
    if (cached_has_bits & 0x00000800u) {
      economy_support_ = from.economy_support_;
    }
    if (cached_has_bits & 0x00001000u) {
      economy_support_supervisor_ = from.economy_support_supervisor_;
    }
    if (cached_has_bits & 0x00002000u) {
      manage_pricing_ = from.manage_pricing_;
    }
    if (cached_has_bits & 0x00004000u) {
      broadcast_live_ = from.broadcast_live_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAppRights::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAppRights::IsInitialized() const {
  return true;
}

void CMsgAppRights::InternalSwap(CMsgAppRights* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAppRights, broadcast_live_)
      + sizeof(CMsgAppRights::broadcast_live_)
      - PROTOBUF_FIELD_OFFSET(CMsgAppRights, edit_info_)>(
          reinterpret_cast<char*>(&edit_info_),
          reinterpret_cast<char*>(&other->edit_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAppRights::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgProtoBufHeader* Arena::CreateMaybeMessage< ::CMsgProtoBufHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProtoBufHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMulti* Arena::CreateMaybeMessage< ::CMsgMulti >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMulti >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProtobufWrapped* Arena::CreateMaybeMessage< ::CMsgProtobufWrapped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProtobufWrapped >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAuthTicket* Arena::CreateMaybeMessage< ::CMsgAuthTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAuthTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CCDDBAppDetailCommon* Arena::CreateMaybeMessage< ::CCDDBAppDetailCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCDDBAppDetailCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAppRights* Arena::CreateMaybeMessage< ::CMsgAppRights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAppRights >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
