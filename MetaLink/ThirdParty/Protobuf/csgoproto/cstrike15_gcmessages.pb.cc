// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_gcmessages.proto

#include "cstrike15_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountActivity_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_engine_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEngineGotvSyncPacket_engine_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServerPing_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XpProgressData_cstrike15_5fgcmessages_2eproto;
class GameServerPingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServerPing> _instance;
} _GameServerPing_default_instance_;
class DataCenterPingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCenterPing> _instance;
} _DataCenterPing_default_instance_;
class DetailedSearchStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedSearchStatistic> _instance;
} _DetailedSearchStatistic_default_instance_;
class TournamentPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TournamentPlayer> _instance;
} _TournamentPlayer_default_instance_;
class TournamentTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TournamentTeam> _instance;
} _TournamentTeam_default_instance_;
class TournamentEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TournamentEvent> _instance;
} _TournamentEvent_default_instance_;
class GlobalStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalStatistics> _instance;
} _GlobalStatistics_default_instance_;
class OperationalStatisticDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationalStatisticDescription> _instance;
} _OperationalStatisticDescription_default_instance_;
class OperationalStatisticElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationalStatisticElement> _instance;
} _OperationalStatisticElement_default_instance_;
class OperationalStatisticsPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationalStatisticsPacket> _instance;
} _OperationalStatisticsPacket_default_instance_;
class PlayerRankingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerRankingInfo> _instance;
} _PlayerRankingInfo_default_instance_;
class PlayerCommendationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerCommendationInfo> _instance;
} _PlayerCommendationInfo_default_instance_;
class PlayerMedalsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerMedalsInfo> _instance;
} _PlayerMedalsInfo_default_instance_;
class AccountActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountActivity> _instance;
} _AccountActivity_default_instance_;
class TournamentMatchSetupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TournamentMatchSetup> _instance;
} _TournamentMatchSetup_default_instance_;
class ServerHltvInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerHltvInfo> _instance;
} _ServerHltvInfo_default_instance_;
class IpAddressMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpAddressMask> _instance;
} _IpAddressMask_default_instance_;
class CMsgCsgoSteamUserStatChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgCsgoSteamUserStatChange> _instance;
} _CMsgCsgoSteamUserStatChange_default_instance_;
class XpProgressDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XpProgressData> _instance;
} _XpProgressData_default_instance_;
class MatchEndItemUpdatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchEndItemUpdates> _instance;
} _MatchEndItemUpdates_default_instance_;
class ScoreLeaderboardData_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoreLeaderboardData_Entry> _instance;
} _ScoreLeaderboardData_Entry_default_instance_;
class ScoreLeaderboardData_AccountEntriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoreLeaderboardData_AccountEntries> _instance;
} _ScoreLeaderboardData_AccountEntries_default_instance_;
class ScoreLeaderboardDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoreLeaderboardData> _instance;
} _ScoreLeaderboardData_default_instance_;
class PlayerQuestData_QuestItemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerQuestData_QuestItemData> _instance;
} _PlayerQuestData_QuestItemData_default_instance_;
class PlayerQuestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerQuestData> _instance;
} _PlayerQuestData_default_instance_;
class CMsgGC_ServerQuestUpdateDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGC_ServerQuestUpdateData> _instance;
} _CMsgGC_ServerQuestUpdateData_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGCOperationalStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_;
class CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ServerReservationUpdate> _instance;
} _CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingStart> _instance;
} _CMsgGCCStrike15_v2_MatchmakingStart_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingStop> _instance;
} _CMsgGCCStrike15_v2_MatchmakingStop_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing> _instance;
} _CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_;
class CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentMatchDraft_Entry> _instance;
} _CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_;
class CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentMatchDraft> _instance;
} _CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_;
class CPreMatchInfoData_TeamStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPreMatchInfoData_TeamStats> _instance;
} _CPreMatchInfoData_TeamStats_default_instance_;
class CPreMatchInfoDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPreMatchInfoData> _instance;
} _CPreMatchInfoData_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse> _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo> _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingServerRoundStats> _instance;
} _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingClient2GCHello> _instance;
} _CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_;
class CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting> _instance;
} _CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_;
class CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_AccountPrivacySettings> _instance;
} _CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon> _instance;
} _CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_;
class CMsgGCCStrike15_v2_ClientGCRankUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientGCRankUpdate> _instance;
} _CMsgGCCStrike15_v2_ClientGCRankUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate> _instance;
} _CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_;
class CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty> _instance;
} _CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_;
class CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportPlayer> _instance;
} _CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_;
class CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientCommendPlayer> _instance;
} _CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_;
class CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportServer> _instance;
} _CMsgGCCStrike15_v2_ClientReportServer_default_instance_;
class CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportResponse> _instance;
} _CMsgGCCStrike15_v2_ClientReportResponse_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends> _instance;
} _CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_;
class WatchableMatchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchableMatchInfo> _instance;
} _WatchableMatchInfo_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestJoinFriendData> _instance;
} _CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestJoinServerData> _instance;
} _CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_;
class CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCstrike15_v2_ClientRequestNewMission> _instance;
} _CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_;
class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded> _instance;
} _CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_;
class CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_WatchInfoUsers> _instance;
} _CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestPlayersProfile> _instance;
} _CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_;
class CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayersProfile> _instance;
} _CMsgGCCStrike15_v2_PlayersProfile_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate> _instance;
} _CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment> _instance;
} _CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus> _instance;
} _CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_;
class CClientHeaderOverwatchEvidenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CClientHeaderOverwatchEvidence> _instance;
} _CClientHeaderOverwatchEvidence_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ClientTextMsg> _instance;
} _CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_;
class CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCTextMsg> _instance;
} _CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_;
class CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchEndRunRewardDrops> _instance;
} _CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_;
class CEconItemPreviewDataBlock_StickerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CEconItemPreviewDataBlock_Sticker> _instance;
} _CEconItemPreviewDataBlock_Sticker_default_instance_;
class CEconItemPreviewDataBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CEconItemPreviewDataBlock> _instance;
} _CEconItemPreviewDataBlock_default_instance_;
class CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification> _instance;
} _CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_;
class CMsgItemAcknowledgedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgItemAcknowledged> _instance;
} _CMsgItemAcknowledged_default_instance_;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest> _instance;
} _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse> _instance;
} _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames> _instance;
} _CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser> _instance;
} _CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames> _instance;
} _CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestTournamentGames> _instance;
} _CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo> _instance;
} _CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_;
class CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_MatchInfo> _instance;
} _CDataGCCStrike15_v2_MatchInfo_default_instance_;
class CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentGroupTeam> _instance;
} _CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_;
class CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentGroup_Picks> _instance;
} _CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_;
class CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentGroup> _instance;
} _CDataGCCStrike15_v2_TournamentGroup_default_instance_;
class CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentSection> _instance;
} _CDataGCCStrike15_v2_TournamentSection_default_instance_;
class CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CDataGCCStrike15_v2_TournamentInfo> _instance;
} _CDataGCCStrike15_v2_TournamentInfo_default_instance_;
class CMsgGCCStrike15_v2_MatchListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_MatchList> _instance;
} _CMsgGCCStrike15_v2_MatchList_default_instance_;
class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick> _instance;
} _CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_;
class CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Predictions> _instance;
} _CMsgGCCStrike15_v2_Predictions_default_instance_;
class CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Fantasy_FantasySlot> _instance;
} _CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_;
class CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Fantasy_FantasyTeam> _instance;
} _CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_;
class CMsgGCCStrike15_v2_FantasyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Fantasy> _instance;
} _CMsgGCCStrike15_v2_Fantasy_default_instance_;
class CAttribute_StringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAttribute_String> _instance;
} _CAttribute_String_default_instance_;
class CMsgCStrike15WelcomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgCStrike15Welcome> _instance;
} _CMsgCStrike15Welcome_default_instance_;
class CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo> _instance;
} _CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_;
class CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo> _instance;
} _CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GiftsLeaderboardRequest> _instance;
} _CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry> _instance;
} _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GiftsLeaderboardResponse> _instance;
} _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_;
class CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientSubmitSurveyVote> _instance;
} _CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_;
class CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Server2GCClientValidate> _instance;
} _CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ClientTournamentInfo> _instance;
} _CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_;
class CSOEconCouponDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOEconCoupon> _instance;
} _CSOEconCoupon_default_instance_;
class CSOQuestProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOQuestProgress> _instance;
} _CSOQuestProgress_default_instance_;
class CSOAccountSeasonalOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOAccountSeasonalOperation> _instance;
} _CSOAccountSeasonalOperation_default_instance_;
class CSOPersonaDataPublicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOPersonaDataPublic> _instance;
} _CSOPersonaDataPublic_default_instance_;
class CMsgGC_GlobalGame_SubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGC_GlobalGame_Subscribe> _instance;
} _CMsgGC_GlobalGame_Subscribe_default_instance_;
class CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGC_GlobalGame_Unsubscribe> _instance;
} _CMsgGC_GlobalGame_Unsubscribe_default_instance_;
class CMsgGC_GlobalGame_PlayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGC_GlobalGame_Play> _instance;
} _CMsgGC_GlobalGame_Play_default_instance_;
class CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_AcknowledgePenalty> _instance;
} _CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_;
class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin> _instance;
} _CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_;
class CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Client2GCStreamUnlock> _instance;
} _CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientToGCRequestElevate> _instance;
} _CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientToGCChat> _instance;
} _CMsgGCCStrike15_v2_ClientToGCChat_default_instance_;
class CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GCToClientChat> _instance;
} _CMsgGCCStrike15_v2_GCToClientChat_default_instance_;
class CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientAuthKeyCode> _instance;
} _CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_;
class CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_GotvSyncPacket> _instance;
} _CMsgGCCStrike15_GotvSyncPacket_default_instance_;
class PlayerDecalDigitalSignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerDecalDigitalSignature> _instance;
} _PlayerDecalDigitalSignature_default_instance_;
class CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPlayerDecalSign> _instance;
} _CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_;
class CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientLogonFatalError> _instance;
} _CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_;
class CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPollState> _instance;
} _CMsgGCCStrike15_v2_ClientPollState_default_instance_;
class CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_Register> _instance;
} _CMsgGCCStrike15_v2_Party_Register_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_Search> _instance;
} _CMsgGCCStrike15_v2_Party_Search_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_SearchResults_Entry> _instance;
} _CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_SearchResults> _instance;
} _CMsgGCCStrike15_v2_Party_SearchResults_default_instance_;
class CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Party_Invite> _instance;
} _CMsgGCCStrike15_v2_Party_Invite_default_instance_;
class CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player> _instance;
} _CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_;
class CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_Account_RequestCoPlays> _instance;
} _CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientToGCRequestTicket> _instance;
} _CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_;
class CMsgGCToClientSteamDatagramTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCToClientSteamDatagramTicket> _instance;
} _CMsgGCToClientSteamDatagramTicket_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestOffersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestOffers> _instance;
} _CMsgGCCStrike15_v2_ClientRequestOffers_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestSouvenirDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientRequestSouvenir> _instance;
} _CMsgGCCStrike15_v2_ClientRequestSouvenir_default_instance_;
class CMsgGCCStrike15_v2_ClientAccountBalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientAccountBalance> _instance;
} _CMsgGCCStrike15_v2_ClientAccountBalance_default_instance_;
class CMsgGCCStrike15_v2_ClientPartyJoinRelayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPartyJoinRelay> _instance;
} _CMsgGCCStrike15_v2_ClientPartyJoinRelay_default_instance_;
class CMsgGCCStrike15_v2_ClientPartyWarning_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPartyWarning_Entry> _instance;
} _CMsgGCCStrike15_v2_ClientPartyWarning_Entry_default_instance_;
class CMsgGCCStrike15_v2_ClientPartyWarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPartyWarning> _instance;
} _CMsgGCCStrike15_v2_ClientPartyWarning_default_instance_;
class CMsgGCCStrike15_v2_SetEventFavoriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_SetEventFavorite> _instance;
} _CMsgGCCStrike15_v2_SetEventFavorite_default_instance_;
class CMsgGCCStrike15_v2_GetEventFavorites_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GetEventFavorites_Request> _instance;
} _CMsgGCCStrike15_v2_GetEventFavorites_Request_default_instance_;
class CMsgGCCStrike15_v2_GetEventFavorites_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GetEventFavorites_Response> _instance;
} _CMsgGCCStrike15_v2_GetEventFavorites_Response_default_instance_;
class CMsgGCCStrike15_v2_ClientPerfReport_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPerfReport_Entry> _instance;
} _CMsgGCCStrike15_v2_ClientPerfReport_Entry_default_instance_;
class CMsgGCCStrike15_v2_ClientPerfReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientPerfReport> _instance;
} _CMsgGCCStrike15_v2_ClientPerfReport_default_instance_;
class CVDiagnosticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CVDiagnostic> _instance;
} _CVDiagnostic_default_instance_;
class CMsgGCCStrike15_v2_ClientReportValidationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_ClientReportValidation> _instance;
} _CMsgGCCStrike15_v2_ClientReportValidation_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientRefuseSecureModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode> _instance;
} _CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientRequestValidationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgGCCStrike15_v2_GC2ClientRequestValidation> _instance;
} _CMsgGCCStrike15_v2_GC2ClientRequestValidation_default_instance_;
static void InitDefaultsscc_info_AccountActivity_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountActivity_default_instance_;
    new (ptr) ::AccountActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountActivity_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountActivity_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CAttribute_String_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAttribute_String_default_instance_;
    new (ptr) ::CAttribute_String();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAttribute_String::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAttribute_String_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAttribute_String_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CClientHeaderOverwatchEvidence_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CClientHeaderOverwatchEvidence_default_instance_;
    new (ptr) ::CClientHeaderOverwatchEvidence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CClientHeaderOverwatchEvidence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CClientHeaderOverwatchEvidence_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CClientHeaderOverwatchEvidence_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_MatchInfo_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_MatchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_MatchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentGroup_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentGroup_Picks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentGroup_Picks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentGroupTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentGroupTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentInfo_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentMatchDraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentMatchDraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDataGCCStrike15_v2_TournamentSection_default_instance_;
    new (ptr) ::CDataGCCStrike15_v2_TournamentSection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDataGCCStrike15_v2_TournamentSection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CEconItemPreviewDataBlock_default_instance_;
    new (ptr) ::CEconItemPreviewDataBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconItemPreviewDataBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CEconItemPreviewDataBlock_Sticker_default_instance_;
    new (ptr) ::CEconItemPreviewDataBlock_Sticker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CEconItemPreviewDataBlock_Sticker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgCStrike15Welcome_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgCStrike15Welcome_default_instance_;
    new (ptr) ::CMsgCStrike15Welcome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgCStrike15Welcome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgCStrike15Welcome_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgCStrike15Welcome_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgCsgoSteamUserStatChange_default_instance_;
    new (ptr) ::CMsgCsgoSteamUserStatChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgCsgoSteamUserStatChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_GotvSyncPacket_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_GotvSyncPacket_default_instance_;
    new (ptr) ::CMsgGCCStrike15_GotvSyncPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_GotvSyncPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_GotvSyncPacket_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_GotvSyncPacket_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CEngineGotvSyncPacket_engine_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_AccountPrivacySettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_AccountPrivacySettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Account_RequestCoPlays();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_AcknowledgePenalty_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_AcknowledgePenalty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_AcknowledgePenalty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_AcknowledgePenalty_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCStreamUnlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCStreamUnlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCTextMsg_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Client2GCTextMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Client2GCTextMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Client2GCTextMsg_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientAccountBalance_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientAccountBalance_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientAccountBalance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientAccountBalance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientAccountBalance_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientAccountBalance_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientAuthKeyCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientAuthKeyCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientCommendPlayer_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientCommendPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientCommendPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientCommendPlayer_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientGCRankUpdate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientGCRankUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientGCRankUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientGCRankUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientGCRankUpdate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientGCRankUpdate_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientLogonFatalError_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientLogonFatalError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientLogonFatalError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientLogonFatalError_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPartyJoinRelay_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPartyJoinRelay_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPartyJoinRelay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPartyJoinRelay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPartyJoinRelay_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPartyJoinRelay_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPartyWarning_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPartyWarning_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPartyWarning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPartyWarning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPartyWarning_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPerfReport_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPerfReport_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPerfReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPerfReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientPerfReport_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPerfReport_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPerfReport_Entry_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPerfReport_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPerfReport_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPlayerDecalSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPlayerDecalSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPollState_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientPollState_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientPollState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientPollState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientPollState_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientPollState_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportPlayer_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientReportPlayer_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportPlayer_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportResponse_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientReportResponse_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportResponse_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportServer_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportServer_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientReportServer_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportServer_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportValidation_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientReportValidation_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientReportValidation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientReportValidation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientReportValidation_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientReportValidation_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestJoinServerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestJoinServerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestOffers_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestOffers_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestOffers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestOffers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientRequestOffers_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestOffers_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestSouvenir_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestSouvenir_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestSouvenir();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestSouvenir::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientRequestSouvenir_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestSouvenir_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientToGCChat_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientToGCChat_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientToGCChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientToGCChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientToGCChat_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientToGCChat_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientToGCRequestElevate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientToGCRequestElevate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientToGCRequestTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientToGCRequestTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Fantasy_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Fantasy_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Fantasy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Fantasy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Fantasy_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Fantasy_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Fantasy_FantasySlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Fantasy_FantasySlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientRequestValidation_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ClientRequestValidation_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ClientRequestValidation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ClientRequestValidation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ClientRequestValidation_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientRequestValidation_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ClientTextMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ClientTextMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GCToClientChat_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GCToClientChat_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GCToClientChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GCToClientChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GCToClientChat_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GCToClientChat_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GetEventFavorites_Request_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GetEventFavorites_Request_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GetEventFavorites_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GetEventFavorites_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Request_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GetEventFavorites_Request_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GetEventFavorites_Response_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GetEventFavorites_Response_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GetEventFavorites_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GetEventFavorites_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Response_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GetEventFavorites_Response_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchList_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchList_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchList_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchList_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_GameServerPing_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_AccountActivity_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingStart_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_MatchmakingStart_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingStart_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingStop_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_MatchmakingStop_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_MatchmakingStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_MatchmakingStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_MatchmakingStop_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_MatchmakingStop_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_Invite_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_Invite_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_Invite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_Invite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_Invite_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_Invite_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_Register_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_Register_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_Register();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_Register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_Register_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_Register_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_Search_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_Search_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_Search();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_Search::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_Search_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_Search_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_SearchResults_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_SearchResults_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_SearchResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_SearchResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Party_SearchResults_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_SearchResults_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Party_SearchResults_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Party_SearchResults_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayersProfile_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_PlayersProfile_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_PlayersProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_PlayersProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_PlayersProfile_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_PlayersProfile_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Predictions_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Predictions_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Predictions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Predictions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_Predictions_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Predictions_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_Server2GCClientValidate_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_Server2GCClientValidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_Server2GCClientValidate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_Server2GCClientValidate_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_SetEventFavorite_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_SetEventFavorite_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_SetEventFavorite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_SetEventFavorite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCStrike15_v2_SetEventFavorite_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_SetEventFavorite_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCStrike15_v2_WatchInfoUsers_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_;
    new (ptr) ::CMsgGCCStrike15_v2_WatchInfoUsers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCStrike15_v2_WatchInfoUsers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCStrike15_v2_WatchInfoUsers_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCStrike15_v2_WatchInfoUsers_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCCstrike15_v2_ClientRequestNewMission_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_;
    new (ptr) ::CMsgGCCstrike15_v2_ClientRequestNewMission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCstrike15_v2_ClientRequestNewMission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCCstrike15_v2_ClientRequestNewMission_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_;
    new (ptr) ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_XpProgressData_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgGCToClientSteamDatagramTicket_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGCToClientSteamDatagramTicket_default_instance_;
    new (ptr) ::CMsgGCToClientSteamDatagramTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGCToClientSteamDatagramTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGCToClientSteamDatagramTicket_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGCToClientSteamDatagramTicket_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGC_GlobalGame_Play_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_GlobalGame_Play_default_instance_;
    new (ptr) ::CMsgGC_GlobalGame_Play();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GlobalGame_Play::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGC_GlobalGame_Play_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGC_GlobalGame_Play_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGC_GlobalGame_Subscribe_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_GlobalGame_Subscribe_default_instance_;
    new (ptr) ::CMsgGC_GlobalGame_Subscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GlobalGame_Subscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGC_GlobalGame_Subscribe_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGC_GlobalGame_Subscribe_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGC_GlobalGame_Unsubscribe_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_GlobalGame_Unsubscribe_default_instance_;
    new (ptr) ::CMsgGC_GlobalGame_Unsubscribe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_GlobalGame_Unsubscribe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgGC_GlobalGame_Unsubscribe_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgGC_GlobalGame_Unsubscribe_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgGC_ServerQuestUpdateData_default_instance_;
    new (ptr) ::CMsgGC_ServerQuestUpdateData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgGC_ServerQuestUpdateData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgItemAcknowledged_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgItemAcknowledged_default_instance_;
    new (ptr) ::CMsgItemAcknowledged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgItemAcknowledged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgItemAcknowledged_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgItemAcknowledged_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPreMatchInfoData_default_instance_;
    new (ptr) ::CPreMatchInfoData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPreMatchInfoData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPreMatchInfoData_TeamStats_default_instance_;
    new (ptr) ::CPreMatchInfoData_TeamStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPreMatchInfoData_TeamStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CSOAccountSeasonalOperation_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOAccountSeasonalOperation_default_instance_;
    new (ptr) ::CSOAccountSeasonalOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOAccountSeasonalOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOAccountSeasonalOperation_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOAccountSeasonalOperation_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CSOEconCoupon_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOEconCoupon_default_instance_;
    new (ptr) ::CSOEconCoupon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOEconCoupon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOEconCoupon_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOEconCoupon_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CSOPersonaDataPublic_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOPersonaDataPublic_default_instance_;
    new (ptr) ::CSOPersonaDataPublic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOPersonaDataPublic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSOPersonaDataPublic_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSOPersonaDataPublic_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_CSOQuestProgress_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSOQuestProgress_default_instance_;
    new (ptr) ::CSOQuestProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSOQuestProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOQuestProgress_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOQuestProgress_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CVDiagnostic_default_instance_;
    new (ptr) ::CVDiagnostic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CVDiagnostic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataCenterPing_default_instance_;
    new (ptr) ::DataCenterPing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataCenterPing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetailedSearchStatistic_default_instance_;
    new (ptr) ::DetailedSearchStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetailedSearchStatistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_GameServerPing_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameServerPing_default_instance_;
    new (ptr) ::GameServerPing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameServerPing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServerPing_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameServerPing_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GlobalStatistics_default_instance_;
    new (ptr) ::GlobalStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GlobalStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IpAddressMask_default_instance_;
    new (ptr) ::IpAddressMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IpAddressMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchEndItemUpdates_default_instance_;
    new (ptr) ::MatchEndItemUpdates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchEndItemUpdates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OperationalStatisticDescription_default_instance_;
    new (ptr) ::OperationalStatisticDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OperationalStatisticDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OperationalStatisticElement_default_instance_;
    new (ptr) ::OperationalStatisticElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OperationalStatisticElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OperationalStatisticsPacket_default_instance_;
    new (ptr) ::OperationalStatisticsPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OperationalStatisticsPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerCommendationInfo_default_instance_;
    new (ptr) ::PlayerCommendationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerCommendationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerDecalDigitalSignature_default_instance_;
    new (ptr) ::PlayerDecalDigitalSignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerDecalDigitalSignature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerMedalsInfo_default_instance_;
    new (ptr) ::PlayerMedalsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerMedalsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerQuestData_default_instance_;
    new (ptr) ::PlayerQuestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerQuestData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_XpProgressData_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerQuestData_QuestItemData_default_instance_;
    new (ptr) ::PlayerQuestData_QuestItemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerQuestData_QuestItemData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerRankingInfo_default_instance_;
    new (ptr) ::PlayerRankingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerRankingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreLeaderboardData_default_instance_;
    new (ptr) ::ScoreLeaderboardData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreLeaderboardData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto.base,
      &scc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreLeaderboardData_AccountEntries_default_instance_;
    new (ptr) ::ScoreLeaderboardData_AccountEntries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreLeaderboardData_AccountEntries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScoreLeaderboardData_Entry_default_instance_;
    new (ptr) ::ScoreLeaderboardData_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScoreLeaderboardData_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerHltvInfo_default_instance_;
    new (ptr) ::ServerHltvInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerHltvInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentEvent_default_instance_;
    new (ptr) ::TournamentEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentMatchSetup_default_instance_;
    new (ptr) ::TournamentMatchSetup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentMatchSetup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentPlayer_default_instance_;
    new (ptr) ::TournamentPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TournamentTeam_default_instance_;
    new (ptr) ::TournamentTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TournamentTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto}, {
      &scc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto.base,}};

static void InitDefaultsscc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WatchableMatchInfo_default_instance_;
    new (ptr) ::WatchableMatchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WatchableMatchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto}, {}};

static void InitDefaultsscc_info_XpProgressData_cstrike15_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XpProgressData_default_instance_;
    new (ptr) ::XpProgressData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XpProgressData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XpProgressData_cstrike15_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_XpProgressData_cstrike15_5fgcmessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cstrike15_5fgcmessages_2eproto[147];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cstrike15_5fgcmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cstrike15_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameServerPing, ping_),
  PROTOBUF_FIELD_OFFSET(::GameServerPing, ip_),
  PROTOBUF_FIELD_OFFSET(::GameServerPing, instances_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, data_center_id_),
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, ping_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, game_type_),
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, search_time_avg_),
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, players_searching_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, account_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, player_nick_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, player_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, player_dob_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, player_flag_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, player_location_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, player_desc_),
  5,
  0,
  1,
  6,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, team_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, team_tag_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, team_flag_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, team_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, players_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_tag_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_time_start_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_time_end_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_public_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_stage_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, event_stage_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, active_section_id_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  8,
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, players_online_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, servers_online_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, players_searching_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, servers_available_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, ongoing_matches_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, search_time_avg_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, search_statistics_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, main_post_url_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, required_appid_version_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, pricesheet_version_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, twitch_streams_version_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, active_tournament_eventid_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, active_survey_id_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, rtime32_cur_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, rtime32_event_start_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, name_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, idkey_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, idkey_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, packetid_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, mstimestamp_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, values_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, rank_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, wins_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, rank_change_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, rank_type_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, tv_control_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, cmd_friendly_),
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, cmd_teaching_),
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, cmd_leader_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, display_items_defidx_),
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, featured_display_item_defidx_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountActivity, activity_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, mode_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, map_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, matchid_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, event_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, team_id_ct_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, team_id_t_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, event_stage_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_udp_port_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_watch_key_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_slots_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_clients_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_proxies_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_time_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, game_type_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, game_mapgroup_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, game_map_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_master_steamid_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_local_slots_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_local_clients_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_local_proxies_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_relay_slots_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_relay_clients_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_relay_proxies_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_relay_address_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_relay_port_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, tv_relay_steamid_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, flags_),
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, a_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, b_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, c_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, d_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, bits_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, token_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, ecsgosteamuserstat_),
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, delta_),
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, absolute_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::XpProgressData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XpProgressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XpProgressData, xp_points_),
  PROTOBUF_FIELD_OFFSET(::XpProgressData, xp_category_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, item_id_),
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, item_attr_defidx_),
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, item_attr_delta_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, tag_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, accountid_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, quest_id_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, score_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, accountentries_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, matchentries_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, quest_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, quest_normal_points_earned_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, quest_bonus_points_earned_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, quester_account_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, quest_item_data_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, xp_progress_data_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, time_played_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, mm_game_mode_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, item_updates_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, operation_points_eligible_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, userstatchanges_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, player_quest_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, binary_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, mm_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, missionlbsdata_),
  ~0u,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, packetid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, namekeys_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, packets_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, exchange_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_steam_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, ticket_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, tournament_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, prime_only_),
  ~0u,
  2,
  0,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, abandon_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, gameserverpings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, offset_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, final_batch_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, data_center_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, max_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, test_token_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, region_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, region_r_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, matchmaking_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, waiting_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, error_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, ongoingmatch_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, global_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, failping_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, penalty_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, failready_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, vacbanned_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, server_ipaddress_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, notes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, penalty_account_id_sessions_green_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, insufficientlevel_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, vsncheck_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, launcher_mismatch_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, insecure_account_id_sessions_),
  3,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, mapid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, team_id_ct_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, event_stage_id_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_0_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, maps_count_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, maps_current_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_start_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_veto1_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, team_id_pickn_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, drafts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, match_info_idxtxt_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, match_info_txt_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, match_info_teams_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, predictions_pct_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, draft_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, stats_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, wins_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rankings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_pub_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, party_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, whitelist_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_master_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_event_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_casters_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_relay_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, pre_match_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rtime32_event_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_control_),
  ~0u,
  3,
  2,
  4,
  11,
  ~0u,
  5,
  6,
  ~0u,
  ~0u,
  7,
  0,
  ~0u,
  ~0u,
  8,
  1,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservationid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, gc_reservation_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, tv_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_player_accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, idle_player_accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_def_idx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_reward_idx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_drop_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, tournament_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, legacy_steamdatagram_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, steamdatagram_routing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, test_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, flags_),
  4,
  2,
  0,
  5,
  6,
  3,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  1,
  11,
  14,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, serverid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, direct_udp_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, direct_udp_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservationid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, server_address_),
  3,
  4,
  5,
  6,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, account_mvp_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservationid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, round_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, scores_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, round_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, match_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, team_scores_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, confirm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_stage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, match_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_headshots_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_3ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_4ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_5ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, mvps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_tv_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_lnk_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_kills_agg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, drop_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, b_switched_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_2ks_),
  4,
  1,
  0,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  ~0u,
  2,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  10,
  11,
  12,
  ~0u,
  3,
  13,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ongoingmatch_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, global_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, penalty_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, penalty_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, vac_banned_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ranking_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, commendation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, medals_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_stages_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, survey_vote_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, activity_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_cur_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_xp_bonus_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, rankings_),
  8,
  0,
  1,
  9,
  10,
  11,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,
  12,
  7,
  13,
  14,
  15,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, settings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, abandoned_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_reason_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientGCRankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientGCRankUpdate, rankings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, main_post_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, communication_cooldown_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_aimbot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_wallhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_speedhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_teamharm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_textabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, rpt_voiceabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, report_from_demo_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, commendation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, tokens_),
  1,
  3,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_poorperf_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_abusivemodels_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_badmotd_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_listingabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, rpt_inventoryabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, match_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, confirmation_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, response_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, response_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, tokens_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, serverid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, client_launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, data_center_pings_),
  1,
  ~0u,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, server_ip_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, tv_port_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, tv_spectators_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, tv_time_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, tv_watch_password_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, cl_decryptdata_key_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, cl_decryptdata_key_pub_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, game_type_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, game_mapgroup_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, game_map_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, reservation_id_),
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  12,
  1,
  2,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_ipp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, res_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, errormsg_),
  2,
  3,
  4,
  5,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, serverid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, res_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, errormsg_),
  2,
  3,
  4,
  5,
  6,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, mission_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, campaign_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, xp_progress_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, upgraded_defidx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, operation_points_awarded_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, watchable_match_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, extended_timeout_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_id__deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, account_ids__deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_level_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, account_profiles_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, caseid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, suspectid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, fractionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_aimbot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_wallhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_speedhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_teamharm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, reason_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseurl_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, verdict_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, throttleseconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, suspectid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, fractionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, numrounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, fractionrounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, streakconvictions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, reason_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, caseid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, statusid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, accountid_),
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, caseid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, payload_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, args_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, serverinfo_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, match_end_quest_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, slot_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, sticker_id_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, wear_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, scale_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, rotation_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, tint_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, accountid_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, itemid_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, defindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, paintindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, rarity_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, quality_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, paintwear_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, paintseed_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, killeaterscoretype_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, killeatervalue_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, customname_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, stickers_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, inventory_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, origin_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, questid_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, dropreason_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, musicindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, entindex_),
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  ~0u,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, iteminfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, iteminfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_a_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_d_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_m_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, iteminfo_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, eventid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, outcomeid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, matchid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, matchtime_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, watchablematchinfo_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, roundstats_legacy_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, roundstatsall_),
  2,
  3,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, team_id_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, score_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, correctpick_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, pickids_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, name_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, desc_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, picks__deprecated_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, teams_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, stage_ids_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, picklockuntiltime_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, pickableteams_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, points_per_pick_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, picks_),
  2,
  0,
  1,
  3,
  ~0u,
  ~0u,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, sectionid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, name_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, desc_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, groups_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, sections_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, tournament_event_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, tournament_teams_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, msgrequestid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, servertime_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, streams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, tournamentinfo_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, sectionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, groupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, teamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, itemid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, group_match_team_picks_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, itemid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, sectionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, teams_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, store_item_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, timeplayedconsecutively_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, time_first_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, last_time_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, last_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, gscookieid_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, uniqueid_),
  0,
  1,
  3,
  4,
  2,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_int_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, choked_blocks_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, viewangles_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, type_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, gifts_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, servertime_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, time_period_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_gifts_given_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_givers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, entries_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, survey_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, vote_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, stageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, teamids_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, entryid_),
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, defidx_),
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, expiration_date_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, questid_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, points_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, bonus_points_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, season_value_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, tier_unlocked_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, premium_tiers_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, mission_id_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, missions_completed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, player_level_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, commendation_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, elevated_state_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, ticket_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, timeleft_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, gametimems_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, msperpoint_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, acknowledged_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, upgradeid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, hours_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, prestigetime_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, os_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, stage_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, signature_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, accountid_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, rtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, endpos_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, startpos_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, right_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, tx_defidx_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, entindex_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, hitbox_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, creationtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, equipslot_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, trace_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, normal_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, tint_id_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, itemid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, errorcode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, country_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, pollid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, names_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, values_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, ver_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, apr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, ark_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, nby_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, grp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, game_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, ver_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, apr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, ark_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, grps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, game_type_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, grp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, apr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, ark_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, loc_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, lobbyid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, rtcoplay_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, online_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, servertime_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, gameserver_sdr_routing_),
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, serialized_ticket_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestOffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, itemid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, eventid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, lobbyid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, warntype_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning, entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, is_favorite_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Request, all_events_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, all_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, json_favorites_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, json_featured_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, perfcounter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, length_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, reference_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, actual_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, sourceid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, status_),
  2,
  3,
  0,
  1,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport, entries_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, id_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, extended_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, value_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, string_value_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, file_report_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, command_line_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, total_files_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, internal_error_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, trust_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, count_pending_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, count_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, process_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, osversion_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, clientreportversion_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, status_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, diagnostic1_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, diagnostic2_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, diagnostic3_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, last_launch_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, report_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, client_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, diagnostic4_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, diagnostic5_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, diagnostics_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  2,
  18,
  15,
  16,
  17,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, file_report_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, offer_insecure_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, offer_secure_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, show_unsigned_ui_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, kick_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, show_trusted_ui_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, show_warning_not_trusted_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, full_report_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, module_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::GameServerPing)},
  { 11, 18, sizeof(::DataCenterPing)},
  { 20, 28, sizeof(::DetailedSearchStatistic)},
  { 31, 43, sizeof(::TournamentPlayer)},
  { 50, 60, sizeof(::TournamentTeam)},
  { 65, 79, sizeof(::TournamentEvent)},
  { 88, 108, sizeof(::GlobalStatistics)},
  { 123, 130, sizeof(::OperationalStatisticDescription)},
  { 132, 139, sizeof(::OperationalStatisticElement)},
  { 141, 149, sizeof(::OperationalStatisticsPacket)},
  { 152, 163, sizeof(::PlayerRankingInfo)},
  { 169, 177, sizeof(::PlayerCommendationInfo)},
  { 180, 187, sizeof(::PlayerMedalsInfo)},
  { 189, 198, sizeof(::AccountActivity)},
  { 202, 211, sizeof(::TournamentMatchSetup)},
  { 215, 240, sizeof(::ServerHltvInfo)},
  { 260, 271, sizeof(::IpAddressMask)},
  { 277, 285, sizeof(::CMsgCsgoSteamUserStatChange)},
  { 288, 295, sizeof(::XpProgressData)},
  { 297, 305, sizeof(::MatchEndItemUpdates)},
  { 308, 315, sizeof(::ScoreLeaderboardData_Entry)},
  { 317, 324, sizeof(::ScoreLeaderboardData_AccountEntries)},
  { 326, 335, sizeof(::ScoreLeaderboardData)},
  { 339, 347, sizeof(::PlayerQuestData_QuestItemData)},
  { 350, 363, sizeof(::PlayerQuestData)},
  { 371, 380, sizeof(::CMsgGC_ServerQuestUpdateData)},
  { 384, 392, sizeof(::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)},
  { 395, 403, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)},
  { 406, 413, sizeof(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate)},
  { 415, 426, sizeof(::CMsgGCCStrike15_v2_MatchmakingStart)},
  { 432, 438, sizeof(::CMsgGCCStrike15_v2_MatchmakingStop)},
  { 439, 450, sizeof(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)},
  { 456, 465, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)},
  { 469, 490, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)},
  { 506, 513, sizeof(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry)},
  { 515, 530, sizeof(::CDataGCCStrike15_v2_TournamentMatchDraft)},
  { 540, 548, sizeof(::CPreMatchInfoData_TeamStats)},
  { 551, 560, sizeof(::CPreMatchInfoData)},
  { 564, 587, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)},
  { 605, 627, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)},
  { 644, 656, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)},
  { 663, 669, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo)},
  { 670, 703, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats)},
  { 731, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello)},
  { 736, 760, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)},
  { 779, 786, sizeof(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting)},
  { 788, -1, sizeof(::CMsgGCCStrike15_v2_AccountPrivacySettings)},
  { 794, 803, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)},
  { 807, -1, sizeof(::CMsgGCCStrike15_v2_ClientGCRankUpdate)},
  { 813, 819, sizeof(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)},
  { 820, 829, sizeof(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)},
  { 833, 847, sizeof(::CMsgGCCStrike15_v2_ClientReportPlayer)},
  { 856, 865, sizeof(::CMsgGCCStrike15_v2_ClientCommendPlayer)},
  { 869, 880, sizeof(::CMsgGCCStrike15_v2_ClientReportServer)},
  { 886, 897, sizeof(::CMsgGCCStrike15_v2_ClientReportResponse)},
  { 903, 914, sizeof(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)},
  { 920, 938, sizeof(::WatchableMatchInfo)},
  { 951, 962, sizeof(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData)},
  { 968, 980, sizeof(::CMsgGCCStrike15_v2_ClientRequestJoinServerData)},
  { 987, 994, sizeof(::CMsgGCCstrike15_v2_ClientRequestNewMission)},
  { 996, 1007, sizeof(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)},
  { 1013, 1022, sizeof(::CMsgGCCStrike15_v2_WatchInfoUsers)},
  { 1026, 1035, sizeof(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile)},
  { 1039, 1046, sizeof(::CMsgGCCStrike15_v2_PlayersProfile)},
  { 1048, 1061, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)},
  { 1069, 1085, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)},
  { 1096, 1103, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)},
  { 1105, 1112, sizeof(::CClientHeaderOverwatchEvidence)},
  { 1114, 1122, sizeof(::CMsgGCCStrike15_v2_GC2ClientTextMsg)},
  { 1125, 1132, sizeof(::CMsgGCCStrike15_v2_Client2GCTextMsg)},
  { 1134, 1141, sizeof(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops)},
  { 1143, 1154, sizeof(::CEconItemPreviewDataBlock_Sticker)},
  { 1160, 1183, sizeof(::CEconItemPreviewDataBlock)},
  { 1201, 1207, sizeof(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)},
  { 1208, 1214, sizeof(::CMsgItemAcknowledged)},
  { 1215, 1224, sizeof(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)},
  { 1228, 1234, sizeof(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)},
  { 1235, -1, sizeof(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)},
  { 1240, 1246, sizeof(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)},
  { 1247, 1253, sizeof(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)},
  { 1254, 1260, sizeof(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames)},
  { 1261, 1269, sizeof(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)},
  { 1272, 1282, sizeof(::CDataGCCStrike15_v2_MatchInfo)},
  { 1287, 1295, sizeof(::CDataGCCStrike15_v2_TournamentGroupTeam)},
  { 1298, -1, sizeof(::CDataGCCStrike15_v2_TournamentGroup_Picks)},
  { 1304, 1319, sizeof(::CDataGCCStrike15_v2_TournamentGroup)},
  { 1329, 1338, sizeof(::CDataGCCStrike15_v2_TournamentSection)},
  { 1342, 1350, sizeof(::CDataGCCStrike15_v2_TournamentInfo)},
  { 1353, 1364, sizeof(::CMsgGCCStrike15_v2_MatchList)},
  { 1370, 1380, sizeof(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick)},
  { 1385, 1392, sizeof(::CMsgGCCStrike15_v2_Predictions)},
  { 1394, 1402, sizeof(::CMsgGCCStrike15_v2_Fantasy_FantasySlot)},
  { 1405, 1412, sizeof(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam)},
  { 1414, 1421, sizeof(::CMsgGCCStrike15_v2_Fantasy)},
  { 1423, 1429, sizeof(::CAttribute_String)},
  { 1430, 1442, sizeof(::CMsgCStrike15Welcome)},
  { 1449, 1459, sizeof(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)},
  { 1464, 1472, sizeof(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)},
  { 1475, -1, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest)},
  { 1480, 1487, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry)},
  { 1489, 1499, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse)},
  { 1504, 1511, sizeof(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote)},
  { 1513, 1519, sizeof(::CMsgGCCStrike15_v2_Server2GCClientValidate)},
  { 1520, 1529, sizeof(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo)},
  { 1533, 1541, sizeof(::CSOEconCoupon)},
  { 1544, 1552, sizeof(::CSOQuestProgress)},
  { 1555, 1565, sizeof(::CSOAccountSeasonalOperation)},
  { 1570, 1578, sizeof(::CSOPersonaDataPublic)},
  { 1581, 1587, sizeof(::CMsgGC_GlobalGame_Subscribe)},
  { 1588, 1594, sizeof(::CMsgGC_GlobalGame_Unsubscribe)},
  { 1595, 1603, sizeof(::CMsgGC_GlobalGame_Play)},
  { 1606, 1612, sizeof(::CMsgGCCStrike15_v2_AcknowledgePenalty)},
  { 1613, 1622, sizeof(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)},
  { 1626, 1633, sizeof(::CMsgGCCStrike15_v2_Client2GCStreamUnlock)},
  { 1635, 1641, sizeof(::CMsgGCCStrike15_v2_ClientToGCRequestElevate)},
  { 1642, 1649, sizeof(::CMsgGCCStrike15_v2_ClientToGCChat)},
  { 1651, 1658, sizeof(::CMsgGCCStrike15_v2_GCToClientChat)},
  { 1660, 1667, sizeof(::CMsgGCCStrike15_v2_ClientAuthKeyCode)},
  { 1669, 1675, sizeof(::CMsgGCCStrike15_GotvSyncPacket)},
  { 1676, 1695, sizeof(::PlayerDecalDigitalSignature)},
  { 1709, 1716, sizeof(::CMsgGCCStrike15_v2_ClientPlayerDecalSign)},
  { 1718, 1726, sizeof(::CMsgGCCStrike15_v2_ClientLogonFatalError)},
  { 1729, 1737, sizeof(::CMsgGCCStrike15_v2_ClientPollState)},
  { 1740, 1754, sizeof(::CMsgGCCStrike15_v2_Party_Register)},
  { 1763, 1774, sizeof(::CMsgGCCStrike15_v2_Party_Search)},
  { 1780, 1791, sizeof(::CMsgGCCStrike15_v2_Party_SearchResults_Entry)},
  { 1797, -1, sizeof(::CMsgGCCStrike15_v2_Party_SearchResults)},
  { 1803, 1810, sizeof(::CMsgGCCStrike15_v2_Party_Invite)},
  { 1812, 1820, sizeof(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player)},
  { 1823, 1830, sizeof(::CMsgGCCStrike15_v2_Account_RequestCoPlays)},
  { 1832, 1841, sizeof(::CMsgGCCStrike15_v2_ClientToGCRequestTicket)},
  { 1845, 1851, sizeof(::CMsgGCToClientSteamDatagramTicket)},
  { 1852, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestOffers)},
  { 1857, 1865, sizeof(::CMsgGCCStrike15_v2_ClientRequestSouvenir)},
  { 1868, 1875, sizeof(::CMsgGCCStrike15_v2_ClientAccountBalance)},
  { 1877, 1884, sizeof(::CMsgGCCStrike15_v2_ClientPartyJoinRelay)},
  { 1886, 1893, sizeof(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry)},
  { 1895, -1, sizeof(::CMsgGCCStrike15_v2_ClientPartyWarning)},
  { 1901, 1908, sizeof(::CMsgGCCStrike15_v2_SetEventFavorite)},
  { 1910, 1916, sizeof(::CMsgGCCStrike15_v2_GetEventFavorites_Request)},
  { 1917, 1925, sizeof(::CMsgGCCStrike15_v2_GetEventFavorites_Response)},
  { 1928, 1939, sizeof(::CMsgGCCStrike15_v2_ClientPerfReport_Entry)},
  { 1945, -1, sizeof(::CMsgGCCStrike15_v2_ClientPerfReport)},
  { 1951, 1960, sizeof(::CVDiagnostic)},
  { 1964, 1989, sizeof(::CMsgGCCStrike15_v2_ClientReportValidation)},
  { 2009, 2021, sizeof(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)},
  { 2028, 2035, sizeof(::CMsgGCCStrike15_v2_GC2ClientRequestValidation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameServerPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataCenterPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetailedSearchStatistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TournamentPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TournamentTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TournamentEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GlobalStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OperationalStatisticDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OperationalStatisticElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OperationalStatisticsPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerRankingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerCommendationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerMedalsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccountActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TournamentMatchSetup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerHltvInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IpAddressMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCsgoSteamUserStatChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_XpProgressData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatchEndItemUpdates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ScoreLeaderboardData_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ScoreLeaderboardData_AccountEntries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ScoreLeaderboardData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerQuestData_QuestItemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerQuestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_ServerQuestUpdateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPreMatchInfoData_TeamStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPreMatchInfoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientGCRankUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientReportServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WatchableMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_PlayersProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientHeaderOverwatchEvidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItemPreviewDataBlock_Sticker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItemPreviewDataBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemAcknowledged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_MatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentSection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDataGCCStrike15_v2_TournamentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_MatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Predictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Fantasy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCStrike15Welcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconCoupon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOQuestProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOAccountSeasonalOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOPersonaDataPublic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GlobalGame_Subscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GlobalGame_Unsubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GlobalGame_Play_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientToGCChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GCToClientChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_GotvSyncPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerDecalDigitalSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPollState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Party_Register_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Party_Search_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Party_SearchResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Party_Invite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientSteamDatagramTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestOffers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientRequestSouvenir_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientAccountBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPartyJoinRelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPartyWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_SetEventFavorite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GetEventFavorites_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GetEventFavorites_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPerfReport_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientPerfReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVDiagnostic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_ClientReportValidation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCStrike15_v2_GC2ClientRequestValidation_default_instance_),
};

const char descriptor_table_protodef_cstrike15_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032cstrike15_gcmessages.proto\032\023steammessa"
  "ges.proto\032\027engine_gcmessages.proto\"=\n\016Ga"
  "meServerPing\022\014\n\004ping\030\002 \001(\005\022\n\n\002ip\030\003 \001(\r\022\021"
  "\n\tinstances\030\005 \001(\r\"6\n\016DataCenterPing\022\026\n\016d"
  "ata_center_id\030\001 \001(\007\022\014\n\004ping\030\002 \001(\021\"`\n\027Det"
  "ailedSearchStatistic\022\021\n\tgame_type\030\001 \001(\r\022"
  "\027\n\017search_time_avg\030\002 \001(\r\022\031\n\021players_sear"
  "ching\030\004 \001(\r\"\247\001\n\020TournamentPlayer\022\022\n\nacco"
  "unt_id\030\001 \001(\r\022\023\n\013player_nick\030\002 \001(\t\022\023\n\013pla"
  "yer_name\030\003 \001(\t\022\022\n\nplayer_dob\030\004 \001(\r\022\023\n\013pl"
  "ayer_flag\030\005 \001(\t\022\027\n\017player_location\030\006 \001(\t"
  "\022\023\n\013player_desc\030\007 \001(\t\"}\n\016TournamentTeam\022"
  "\017\n\007team_id\030\001 \001(\005\022\020\n\010team_tag\030\002 \001(\t\022\021\n\tte"
  "am_flag\030\003 \001(\t\022\021\n\tteam_name\030\004 \001(\t\022\"\n\007play"
  "ers\030\005 \003(\0132\021.TournamentPlayer\"\337\001\n\017Tournam"
  "entEvent\022\020\n\010event_id\030\001 \001(\005\022\021\n\tevent_tag\030"
  "\002 \001(\t\022\022\n\nevent_name\030\003 \001(\t\022\030\n\020event_time_"
  "start\030\004 \001(\r\022\026\n\016event_time_end\030\005 \001(\r\022\024\n\014e"
  "vent_public\030\006 \001(\005\022\026\n\016event_stage_id\030\007 \001("
  "\005\022\030\n\020event_stage_name\030\010 \001(\t\022\031\n\021active_se"
  "ction_id\030\t \001(\r\"\301\003\n\020GlobalStatistics\022\026\n\016p"
  "layers_online\030\001 \001(\r\022\026\n\016servers_online\030\002 "
  "\001(\r\022\031\n\021players_searching\030\003 \001(\r\022\031\n\021server"
  "s_available\030\004 \001(\r\022\027\n\017ongoing_matches\030\005 \001"
  "(\r\022\027\n\017search_time_avg\030\006 \001(\r\0223\n\021search_st"
  "atistics\030\007 \003(\0132\030.DetailedSearchStatistic"
  "\022\025\n\rmain_post_url\030\010 \001(\t\022\036\n\026required_appi"
  "d_version\030\t \001(\r\022\032\n\022pricesheet_version\030\n "
  "\001(\r\022\036\n\026twitch_streams_version\030\013 \001(\r\022!\n\031a"
  "ctive_tournament_eventid\030\014 \001(\r\022\030\n\020active"
  "_survey_id\030\r \001(\r\022\023\n\013rtime32_cur\030\016 \001(\r\022\033\n"
  "\023rtime32_event_start\030\017 \001(\r\">\n\037Operationa"
  "lStatisticDescription\022\014\n\004name\030\001 \001(\t\022\r\n\005i"
  "dkey\030\002 \001(\r\"<\n\033OperationalStatisticElemen"
  "t\022\r\n\005idkey\030\001 \001(\r\022\016\n\006values\030\002 \003(\005\"r\n\033Oper"
  "ationalStatisticsPacket\022\020\n\010packetid\030\001 \001("
  "\005\022\023\n\013mstimestamp\030\002 \001(\005\022,\n\006values\030\003 \003(\0132\034"
  ".OperationalStatisticElement\"\205\001\n\021PlayerR"
  "ankingInfo\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007rank_i"
  "d\030\002 \001(\r\022\014\n\004wins\030\003 \001(\r\022\023\n\013rank_change\030\004 \001"
  "(\002\022\024\n\014rank_type_id\030\006 \001(\r\022\022\n\ntv_control\030\007"
  " \001(\r\"X\n\026PlayerCommendationInfo\022\024\n\014cmd_fr"
  "iendly\030\001 \001(\r\022\024\n\014cmd_teaching\030\002 \001(\r\022\022\n\ncm"
  "d_leader\030\004 \001(\r\"V\n\020PlayerMedalsInfo\022\034\n\024di"
  "splay_items_defidx\030\007 \003(\r\022$\n\034featured_dis"
  "play_item_defidx\030\010 \001(\r\"O\n\017AccountActivit"
  "y\022\020\n\010activity\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\022\013\n\003map"
  "\030\003 \001(\r\022\017\n\007matchid\030\004 \001(\004\"g\n\024TournamentMat"
  "chSetup\022\020\n\010event_id\030\001 \001(\005\022\022\n\nteam_id_ct\030"
  "\002 \001(\005\022\021\n\tteam_id_t\030\003 \001(\005\022\026\n\016event_stage_"
  "id\030\004 \001(\005\"\317\003\n\016ServerHltvInfo\022\023\n\013tv_udp_po"
  "rt\030\001 \001(\r\022\024\n\014tv_watch_key\030\002 \001(\004\022\020\n\010tv_slo"
  "ts\030\003 \001(\r\022\022\n\ntv_clients\030\004 \001(\r\022\022\n\ntv_proxi"
  "es\030\005 \001(\r\022\017\n\007tv_time\030\006 \001(\r\022\021\n\tgame_type\030\010"
  " \001(\r\022\025\n\rgame_mapgroup\030\t \001(\t\022\020\n\010game_map\030"
  "\n \001(\t\022\031\n\021tv_master_steamid\030\013 \001(\004\022\026\n\016tv_l"
  "ocal_slots\030\014 \001(\r\022\030\n\020tv_local_clients\030\r \001"
  "(\r\022\030\n\020tv_local_proxies\030\016 \001(\r\022\026\n\016tv_relay"
  "_slots\030\017 \001(\r\022\030\n\020tv_relay_clients\030\020 \001(\r\022\030"
  "\n\020tv_relay_proxies\030\021 \001(\r\022\030\n\020tv_relay_add"
  "ress\030\022 \001(\r\022\025\n\rtv_relay_port\030\023 \001(\r\022\030\n\020tv_"
  "relay_steamid\030\024 \001(\004\022\r\n\005flags\030\025 \001(\r\"X\n\rIp"
  "AddressMask\022\t\n\001a\030\001 \001(\r\022\t\n\001b\030\002 \001(\r\022\t\n\001c\030\003"
  " \001(\r\022\t\n\001d\030\004 \001(\r\022\014\n\004bits\030\005 \001(\r\022\r\n\005token\030\006"
  " \001(\r\"Z\n\033CMsgCsgoSteamUserStatChange\022\032\n\022e"
  "csgosteamuserstat\030\001 \001(\005\022\r\n\005delta\030\002 \001(\005\022\020"
  "\n\010absolute\030\003 \001(\010\"8\n\016XpProgressData\022\021\n\txp"
  "_points\030\001 \001(\r\022\023\n\013xp_category\030\002 \001(\005\"_\n\023Ma"
  "tchEndItemUpdates\022\017\n\007item_id\030\001 \001(\004\022\030\n\020it"
  "em_attr_defidx\030\002 \001(\r\022\035\n\025item_attr_delta_"
  "value\030\003 \001(\r\"\236\002\n\024ScoreLeaderboardData\022\020\n\010"
  "quest_id\030\001 \001(\004\022\r\n\005score\030\002 \001(\r\022<\n\016account"
  "entries\030\003 \003(\0132$.ScoreLeaderboardData.Acc"
  "ountEntries\0221\n\014matchentries\030\005 \003(\0132\033.Scor"
  "eLeaderboardData.Entry\032!\n\005Entry\022\013\n\003tag\030\001"
  " \001(\r\022\013\n\003val\030\002 \001(\r\032Q\n\016AccountEntries\022\021\n\ta"
  "ccountid\030\001 \001(\r\022,\n\007entries\030\002 \003(\0132\033.ScoreL"
  "eaderboardData.Entry\"\254\003\n\017PlayerQuestData"
  "\022\032\n\022quester_account_id\030\001 \001(\r\0227\n\017quest_it"
  "em_data\030\002 \003(\0132\036.PlayerQuestData.QuestIte"
  "mData\022)\n\020xp_progress_data\030\003 \003(\0132\017.XpProg"
  "ressData\022\023\n\013time_played\030\004 \001(\r\022\024\n\014mm_game"
  "_mode\030\005 \001(\r\022*\n\014item_updates\030\006 \003(\0132\024.Matc"
  "hEndItemUpdates\022!\n\031operation_points_elig"
  "ible\030\007 \001(\010\0225\n\017userstatchanges\030\010 \003(\0132\034.CM"
  "sgCsgoSteamUserStatChange\032h\n\rQuestItemDa"
  "ta\022\020\n\010quest_id\030\001 \001(\004\022\"\n\032quest_normal_poi"
  "nts_earned\030\002 \001(\005\022!\n\031quest_bonus_points_e"
  "arned\030\003 \001(\005\"\245\001\n\034CMsgGC_ServerQuestUpdate"
  "Data\022+\n\021player_quest_data\030\001 \003(\0132\020.Player"
  "QuestData\022\023\n\013binary_data\030\002 \001(\014\022\024\n\014mm_gam"
  "e_mode\030\003 \001(\r\022-\n\016missionlbsdata\030\004 \001(\0132\025.S"
  "coreLeaderboardData\"\247\001\n0CMsgGCCStrike15_"
  "v2_MatchmakingGCOperationalStats\022\020\n\010pack"
  "etid\030\001 \001(\005\0222\n\010namekeys\030\002 \003(\0132 .Operation"
  "alStatisticDescription\022-\n\007packets\030\003 \003(\0132"
  "\034.OperationalStatisticsPacket\"`\n.CMsgGCC"
  "Strike15_v2_MatchmakingGC2ServerConfirm\022"
  "\r\n\005token\030\001 \001(\r\022\r\n\005stamp\030\002 \001(\r\022\020\n\010exchang"
  "e\030\003 \001(\004\"o\n-CMsgGCCStrike15_v2_GC2ServerR"
  "eservationUpdate\022\036\n\026viewers_external_tot"
  "al\030\001 \001(\r\022\036\n\026viewers_external_steam\030\002 \001(\r"
  "\"\277\001\n#CMsgGCCStrike15_v2_MatchmakingStart"
  "\022\023\n\013account_ids\030\001 \003(\r\022\021\n\tgame_type\030\002 \001(\r"
  "\022\023\n\013ticket_data\030\003 \001(\t\022\026\n\016client_version\030"
  "\004 \001(\r\022/\n\020tournament_match\030\005 \001(\0132\025.Tourna"
  "mentMatchSetup\022\022\n\nprime_only\030\006 \001(\010\"5\n\"CM"
  "sgGCCStrike15_v2_MatchmakingStop\022\017\n\007aban"
  "don\030\001 \001(\005\"\330\001\n/CMsgGCCStrike15_v2_Matchma"
  "kingClient2ServerPing\022(\n\017gameserverpings"
  "\030\001 \003(\0132\017.GameServerPing\022\024\n\014offset_index\030"
  "\002 \001(\005\022\023\n\013final_batch\030\003 \001(\005\022*\n\021data_cente"
  "r_pings\030\004 \003(\0132\017.DataCenterPing\022\020\n\010max_pi"
  "ng\030\005 \001(\r\022\022\n\ntest_token\030\006 \001(\007\"\343\005\n-CMsgGCC"
  "Strike15_v2_MatchmakingGC2ClientUpdate\022\023"
  "\n\013matchmaking\030\001 \001(\005\022#\n\033waiting_account_i"
  "d_sessions\030\002 \003(\r\022\r\n\005error\030\003 \001(\t\022(\n ongoi"
  "ngmatch_account_id_sessions\030\006 \003(\r\022\'\n\014glo"
  "bal_stats\030\007 \001(\0132\021.GlobalStatistics\022$\n\034fa"
  "ilping_account_id_sessions\030\010 \003(\r\022#\n\033pena"
  "lty_account_id_sessions\030\t \003(\r\022%\n\035failrea"
  "dy_account_id_sessions\030\n \003(\r\022%\n\035vacbanne"
  "d_account_id_sessions\030\013 \003(\r\022-\n\025server_ip"
  "address_mask\030\014 \001(\0132\016.IpAddressMask\022B\n\005no"
  "tes\030\r \003(\01323.CMsgGCCStrike15_v2_Matchmaki"
  "ngGC2ClientUpdate.Note\022)\n!penalty_accoun"
  "t_id_sessions_green\030\016 \003(\r\022\"\n\032insufficien"
  "tlevel_sessions\030\017 \003(\r\022$\n\034vsncheck_accoun"
  "t_id_sessions\030\020 \003(\r\022\"\n\032launcher_mismatch"
  "_sessions\030\021 \003(\r\022$\n\034insecure_account_id_s"
  "essions\030\022 \003(\r\032K\n\004Note\022\014\n\004type\030\001 \001(\005\022\021\n\tr"
  "egion_id\030\002 \001(\005\022\020\n\010region_r\030\003 \001(\002\022\020\n\010dist"
  "ance\030\004 \001(\002\"\326\002\n(CDataGCCStrike15_v2_Tourn"
  "amentMatchDraft\022\020\n\010event_id\030\001 \001(\005\022\026\n\016eve"
  "nt_stage_id\030\002 \001(\005\022\021\n\tteam_id_0\030\003 \001(\005\022\021\n\t"
  "team_id_1\030\004 \001(\005\022\022\n\nmaps_count\030\005 \001(\005\022\024\n\014m"
  "aps_current\030\006 \001(\005\022\025\n\rteam_id_start\030\007 \001(\005"
  "\022\025\n\rteam_id_veto1\030\010 \001(\005\022\025\n\rteam_id_pickn"
  "\030\t \001(\005\022\?\n\006drafts\030\n \003(\0132/.CDataGCCStrike1"
  "5_v2_TournamentMatchDraft.Entry\032*\n\005Entry"
  "\022\r\n\005mapid\030\001 \001(\005\022\022\n\nteam_id_ct\030\002 \001(\005\"\373\001\n\021"
  "CPreMatchInfoData\022\027\n\017predictions_pct\030\001 \001"
  "(\005\0228\n\005draft\030\004 \001(\0132).CDataGCCStrike15_v2_"
  "TournamentMatchDraft\022+\n\005stats\030\005 \003(\0132\034.CP"
  "reMatchInfoData.TeamStats\022\014\n\004wins\030\006 \003(\005\032"
  "X\n\tTeamStats\022\031\n\021match_info_idxtxt\030\001 \001(\005\022"
  "\026\n\016match_info_txt\030\002 \001(\t\022\030\n\020match_info_te"
  "ams\030\003 \003(\t\"\262\004\n.CMsgGCCStrike15_v2_Matchma"
  "kingGC2ServerReserve\022\023\n\013account_ids\030\001 \003("
  "\r\022\021\n\tgame_type\030\002 \001(\r\022\020\n\010match_id\030\003 \001(\004\022\026"
  "\n\016server_version\030\004 \001(\r\022\r\n\005flags\030\022 \001(\r\022$\n"
  "\010rankings\030\005 \003(\0132\022.PlayerRankingInfo\022\026\n\016e"
  "ncryption_key\030\006 \001(\004\022\032\n\022encryption_key_pu"
  "b\030\007 \001(\004\022\021\n\tparty_ids\030\010 \003(\r\022!\n\twhitelist\030"
  "\t \003(\0132\016.IpAddressMask\022\031\n\021tv_master_steam"
  "id\030\n \001(\004\022*\n\020tournament_event\030\013 \001(\0132\020.Tou"
  "rnamentEvent\022)\n\020tournament_teams\030\014 \003(\0132\017"
  ".TournamentTeam\022&\n\036tournament_casters_ac"
  "count_ids\030\r \003(\r\022\030\n\020tv_relay_steamid\030\016 \001("
  "\004\022*\n\016pre_match_data\030\017 \001(\0132\022.CPreMatchInf"
  "oData\022\033\n\023rtime32_event_start\030\020 \001(\r\022\022\n\ntv"
  "_control\030\021 \001(\r\"\266\004\n7CMsgGCCStrike15_v2_Ma"
  "tchmakingServerReservationResponse\022\025\n\rre"
  "servationid\030\001 \001(\004\022D\n\013reservation\030\002 \001(\0132/"
  ".CMsgGCCStrike15_v2_MatchmakingGC2Server"
  "Reserve\022\013\n\003map\030\003 \001(\t\022\033\n\023gc_reservation_s"
  "ent\030\004 \001(\004\022\026\n\016server_version\030\005 \001(\r\022 \n\007tv_"
  "info\030\006 \001(\0132\017.ServerHltvInfo\022\036\n\026reward_pl"
  "ayer_accounts\030\007 \003(\r\022\034\n\024idle_player_accou"
  "nts\030\010 \003(\r\022 \n\030reward_item_attr_def_idx\030\t "
  "\001(\r\022\036\n\026reward_item_attr_value\030\n \001(\r\022#\n\033r"
  "eward_item_attr_reward_idx\030\013 \001(\r\022\030\n\020rewa"
  "rd_drop_list\030\014 \001(\r\022\026\n\016tournament_tag\030\r \001"
  "(\t\022!\n\031legacy_steamdatagram_port\030\016 \001(\r\022\035\n"
  "\025steamdatagram_routing\030\021 \001(\r\022\022\n\ntest_tok"
  "en\030\017 \001(\007\022\r\n\005flags\030\020 \001(\r\"\364\001\n.CMsgGCCStrik"
  "e15_v2_MatchmakingGC2ClientReserve\022\020\n\010se"
  "rverid\030\001 \001(\004\022\025\n\rdirect_udp_ip\030\002 \001(\r\022\027\n\017d"
  "irect_udp_port\030\003 \001(\r\022\025\n\rreservationid\030\004 "
  "\001(\004\022D\n\013reservation\030\005 \001(\0132/.CMsgGCCStrike"
  "15_v2_MatchmakingGC2ServerReserve\022\013\n\003map"
  "\030\006 \001(\t\022\026\n\016server_address\030\007 \001(\t\"\254\006\n.CMsgG"
  "CCStrike15_v2_MatchmakingServerRoundStat"
  "s\022\025\n\rreservationid\030\001 \001(\004\022D\n\013reservation\030"
  "\002 \001(\0132/.CMsgGCCStrike15_v2_MatchmakingGC"
  "2ServerReserve\022\013\n\003map\030\003 \001(\t\022\r\n\005round\030\004 \001"
  "(\005\022\r\n\005kills\030\005 \003(\005\022\017\n\007assists\030\006 \003(\005\022\016\n\006de"
  "aths\030\007 \003(\005\022\016\n\006scores\030\010 \003(\005\022\r\n\005pings\030\t \003("
  "\005\022\024\n\014round_result\030\n \001(\005\022\024\n\014match_result\030"
  "\013 \001(\005\022\023\n\013team_scores\030\014 \003(\005\022@\n\007confirm\030\r "
  "\001(\0132/.CMsgGCCStrike15_v2_MatchmakingGC2S"
  "erverConfirm\022\031\n\021reservation_stage\030\016 \001(\005\022"
  "\026\n\016match_duration\030\017 \001(\005\022\023\n\013enemy_kills\030\020"
  " \003(\005\022\027\n\017enemy_headshots\030\021 \003(\005\022\021\n\tenemy_3"
  "ks\030\022 \003(\005\022\021\n\tenemy_4ks\030\023 \003(\005\022\021\n\tenemy_5ks"
  "\030\024 \003(\005\022\014\n\004mvps\030\025 \003(\005\022\030\n\020spectators_count"
  "\030\026 \001(\r\022\033\n\023spectators_count_tv\030\027 \001(\r\022\034\n\024s"
  "pectators_count_lnk\030\030 \001(\r\022\027\n\017enemy_kills"
  "_agg\030\031 \003(\005\022K\n\tdrop_info\030\032 \001(\01328.CMsgGCCS"
  "trike15_v2_MatchmakingServerRoundStats.D"
  "ropInfo\022\030\n\020b_switched_teams\030\033 \001(\010\022\021\n\tene"
  "my_2ks\030\034 \003(\005\032\037\n\010DropInfo\022\023\n\013account_mvp\030"
  "\001 \001(\r\".\n,CMsgGCCStrike15_v2_MatchmakingC"
  "lient2GCHello\"\323\005\n,CMsgGCCStrike15_v2_Mat"
  "chmakingGC2ClientHello\022\022\n\naccount_id\030\001 \001"
  "(\r\022E\n\014ongoingmatch\030\002 \001(\0132/.CMsgGCCStrike"
  "15_v2_MatchmakingGC2ClientReserve\022\'\n\014glo"
  "bal_stats\030\003 \001(\0132\021.GlobalStatistics\022\027\n\017pe"
  "nalty_seconds\030\004 \001(\r\022\026\n\016penalty_reason\030\005 "
  "\001(\r\022\022\n\nvac_banned\030\006 \001(\005\022#\n\007ranking\030\007 \001(\013"
  "2\022.PlayerRankingInfo\022-\n\014commendation\030\010 \001"
  "(\0132\027.PlayerCommendationInfo\022!\n\006medals\030\t "
  "\001(\0132\021.PlayerMedalsInfo\022*\n\020my_current_eve"
  "nt\030\n \001(\0132\020.TournamentEvent\022/\n\026my_current"
  "_event_teams\030\013 \003(\0132\017.TournamentTeam\022(\n\017m"
  "y_current_team\030\014 \001(\0132\017.TournamentTeam\0221\n"
  "\027my_current_event_stages\030\r \003(\0132\020.Tournam"
  "entEvent\022\023\n\013survey_vote\030\016 \001(\r\022\"\n\010activit"
  "y\030\017 \001(\0132\020.AccountActivity\022\024\n\014player_leve"
  "l\030\021 \001(\005\022\025\n\rplayer_cur_xp\030\022 \001(\005\022\035\n\025player"
  "_xp_bonus_flags\030\023 \001(\005\022$\n\010rankings\030\024 \003(\0132"
  "\022.PlayerRankingInfo\"\251\001\n)CMsgGCCStrike15_"
  "v2_AccountPrivacySettings\022D\n\010settings\030\001 "
  "\003(\01322.CMsgGCCStrike15_v2_AccountPrivacyS"
  "ettings.Setting\0326\n\007Setting\022\024\n\014setting_ty"
  "pe\030\001 \001(\r\022\025\n\rsetting_value\030\002 \001(\r\"\277\001\n.CMsg"
  "GCCStrike15_v2_MatchmakingGC2ClientAband"
  "on\022\022\n\naccount_id\030\001 \001(\r\022H\n\017abandoned_matc"
  "h\030\002 \001(\0132/.CMsgGCCStrike15_v2_Matchmaking"
  "GC2ClientReserve\022\027\n\017penalty_seconds\030\003 \001("
  "\r\022\026\n\016penalty_reason\030\004 \001(\r\"M\n%CMsgGCCStri"
  "ke15_v2_ClientGCRankUpdate\022$\n\010rankings\030\001"
  " \003(\0132\022.PlayerRankingInfo\"L\n3CMsgGCCStrik"
  "e15_v2_MatchmakingOperator2GCBlogUpdate\022"
  "\025\n\rmain_post_url\030\001 \001(\t\"\212\001\n3CMsgGCCStrike"
  "15_v2_ServerNotificationForUserPenalty\022\022"
  "\n\naccount_id\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\022\017\n\007se"
  "conds\030\003 \001(\r\022\036\n\026communication_cooldown\030\004 "
  "\001(\010\"\355\001\n%CMsgGCCStrike15_v2_ClientReportP"
  "layer\022\022\n\naccount_id\030\001 \001(\r\022\022\n\nrpt_aimbot\030"
  "\002 \001(\r\022\024\n\014rpt_wallhack\030\003 \001(\r\022\025\n\rrpt_speed"
  "hack\030\004 \001(\r\022\024\n\014rpt_teamharm\030\005 \001(\r\022\025\n\rrpt_"
  "textabuse\030\006 \001(\r\022\026\n\016rpt_voiceabuse\030\007 \001(\r\022"
  "\020\n\010match_id\030\010 \001(\004\022\030\n\020report_from_demo\030\t "
  "\001(\010\"\215\001\n&CMsgGCCStrike15_v2_ClientCommend"
  "Player\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010match_id\030\010"
  " \001(\004\022-\n\014commendation\030\t \001(\0132\027.PlayerComme"
  "ndationInfo\022\016\n\006tokens\030\n \001(\r\"\265\001\n%CMsgGCCS"
  "trike15_v2_ClientReportServer\022\024\n\014rpt_poo"
  "rperf\030\001 \001(\r\022\031\n\021rpt_abusivemodels\030\002 \001(\r\022\023"
  "\n\013rpt_badmotd\030\003 \001(\r\022\030\n\020rpt_listingabuse\030"
  "\004 \001(\r\022\032\n\022rpt_inventoryabuse\030\005 \001(\r\022\020\n\010mat"
  "ch_id\030\010 \001(\004\"\251\001\n\'CMsgGCCStrike15_v2_Clien"
  "tReportResponse\022\027\n\017confirmation_id\030\001 \001(\004"
  "\022\022\n\naccount_id\030\002 \001(\r\022\021\n\tserver_ip\030\003 \001(\r\022"
  "\025\n\rresponse_type\030\004 \001(\r\022\027\n\017response_resul"
  "t\030\005 \001(\r\022\016\n\006tokens\030\006 \001(\r\"\303\001\n0CMsgGCCStrik"
  "e15_v2_ClientRequestWatchInfoFriends\022\022\n\n"
  "request_id\030\001 \001(\r\022\023\n\013account_ids\030\002 \003(\r\022\020\n"
  "\010serverid\030\003 \001(\004\022\017\n\007matchid\030\004 \001(\004\022\027\n\017clie"
  "nt_launcher\030\005 \001(\r\022*\n\021data_center_pings\030\006"
  " \003(\0132\017.DataCenterPing\"\260\002\n\022WatchableMatch"
  "Info\022\021\n\tserver_ip\030\001 \001(\r\022\017\n\007tv_port\030\002 \001(\r"
  "\022\025\n\rtv_spectators\030\003 \001(\r\022\017\n\007tv_time\030\004 \001(\r"
  "\022\031\n\021tv_watch_password\030\005 \001(\014\022\032\n\022cl_decryp"
  "tdata_key\030\006 \001(\004\022\036\n\026cl_decryptdata_key_pu"
  "b\030\007 \001(\004\022\021\n\tgame_type\030\010 \001(\r\022\025\n\rgame_mapgr"
  "oup\030\t \001(\t\022\020\n\010game_map\030\n \001(\t\022\021\n\tserver_id"
  "\030\013 \001(\004\022\020\n\010match_id\030\014 \001(\004\022\026\n\016reservation_"
  "id\030\r \001(\004\"\313\001\n.CMsgGCCStrike15_v2_ClientRe"
  "questJoinFriendData\022\017\n\007version\030\001 \001(\r\022\022\n\n"
  "account_id\030\002 \001(\r\022\022\n\njoin_token\030\003 \001(\r\022\020\n\010"
  "join_ipp\030\004 \001(\r\022<\n\003res\030\005 \001(\0132/.CMsgGCCStr"
  "ike15_v2_MatchmakingGC2ClientReserve\022\020\n\010"
  "errormsg\030\006 \001(\t\"\337\001\n.CMsgGCCStrike15_v2_Cl"
  "ientRequestJoinServerData\022\017\n\007version\030\001 \001"
  "(\r\022\022\n\naccount_id\030\002 \001(\r\022\020\n\010serverid\030\003 \001(\004"
  "\022\021\n\tserver_ip\030\004 \001(\r\022\023\n\013server_port\030\005 \001(\r"
  "\022<\n\003res\030\006 \001(\0132/.CMsgGCCStrike15_v2_Match"
  "makingGC2ClientReserve\022\020\n\010errormsg\030\007 \001(\t"
  "\"U\n*CMsgGCCstrike15_v2_ClientRequestNewM"
  "ission\022\022\n\nmission_id\030\002 \001(\r\022\023\n\013campaign_i"
  "d\030\003 \001(\r\"\323\001\n,CMsgGCCstrike15_v2_GC2Server"
  "NotifyXPRewarded\022)\n\020xp_progress_data\030\001 \003"
  "(\0132\017.XpProgressData\022\022\n\naccount_id\030\002 \001(\r\022"
  "\022\n\ncurrent_xp\030\003 \001(\r\022\025\n\rcurrent_level\030\004 \001"
  "(\r\022\027\n\017upgraded_defidx\030\005 \001(\r\022 \n\030operation"
  "_points_awarded\030\006 \001(\r\"\232\001\n!CMsgGCCStrike1"
  "5_v2_WatchInfoUsers\022\022\n\nrequest_id\030\001 \001(\r\022"
  "\023\n\013account_ids\030\002 \003(\r\0222\n\025watchable_match_"
  "infos\030\003 \003(\0132\023.WatchableMatchInfo\022\030\n\020exte"
  "nded_timeout\030\005 \001(\r\"\234\001\n.CMsgGCCStrike15_v"
  "2_ClientRequestPlayersProfile\022\036\n\026request"
  "_id__deprecated\030\001 \001(\r\022\037\n\027account_ids__de"
  "precated\030\002 \003(\r\022\022\n\naccount_id\030\003 \001(\r\022\025\n\rre"
  "quest_level\030\004 \001(\r\"\200\001\n!CMsgGCCStrike15_v2"
  "_PlayersProfile\022\022\n\nrequest_id\030\001 \001(\r\022G\n\020a"
  "ccount_profiles\030\002 \003(\0132-.CMsgGCCStrike15_"
  "v2_MatchmakingGC2ClientHello\"\314\001\n,CMsgGCC"
  "Strike15_v2_PlayerOverwatchCaseUpdate\022\016\n"
  "\006caseid\030\001 \001(\004\022\021\n\tsuspectid\030\003 \001(\r\022\022\n\nfrac"
  "tionid\030\004 \001(\r\022\022\n\nrpt_aimbot\030\005 \001(\r\022\024\n\014rpt_"
  "wallhack\030\006 \001(\r\022\025\n\rrpt_speedhack\030\007 \001(\r\022\024\n"
  "\014rpt_teamharm\030\010 \001(\r\022\016\n\006reason\030\t \001(\r\"\215\002\n0"
  "CMsgGCCStrike15_v2_PlayerOverwatchCaseAs"
  "signment\022\016\n\006caseid\030\001 \001(\004\022\017\n\007caseurl\030\002 \001("
  "\t\022\017\n\007verdict\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\r\022\027\n"
  "\017throttleseconds\030\005 \001(\r\022\021\n\tsuspectid\030\006 \001("
  "\r\022\022\n\nfractionid\030\007 \001(\r\022\021\n\tnumrounds\030\010 \001(\r"
  "\022\026\n\016fractionrounds\030\t \001(\r\022\031\n\021streakconvic"
  "tions\030\n \001(\005\022\016\n\006reason\030\013 \001(\r\"P\n,CMsgGCCSt"
  "rike15_v2_PlayerOverwatchCaseStatus\022\016\n\006c"
  "aseid\030\001 \001(\004\022\020\n\010statusid\030\002 \001(\r\"C\n\036CClient"
  "HeaderOverwatchEvidence\022\021\n\taccountid\030\001 \001"
  "(\r\022\016\n\006caseid\030\002 \001(\004\"P\n#CMsgGCCStrike15_v2"
  "_GC2ClientTextMsg\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 "
  "\001(\r\022\017\n\007payload\030\003 \001(\014\"\?\n#CMsgGCCStrike15_"
  "v2_Client2GCTextMsg\022\n\n\002id\030\001 \001(\r\022\014\n\004args\030"
  "\002 \003(\014\"\266\001\n)CMsgGCCStrike15_v2_MatchEndRun"
  "RewardDrops\022L\n\nserverinfo\030\003 \001(\01328.CMsgGC"
  "CStrike15_v2_MatchmakingServerReservatio"
  "nResponse\022;\n\024match_end_quest_data\030\004 \001(\0132"
  "\035.CMsgGC_ServerQuestUpdateData\"\204\004\n\031CEcon"
  "ItemPreviewDataBlock\022\021\n\taccountid\030\001 \001(\r\022"
  "\016\n\006itemid\030\002 \001(\004\022\020\n\010defindex\030\003 \001(\r\022\022\n\npai"
  "ntindex\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\017\n\007quality"
  "\030\006 \001(\r\022\021\n\tpaintwear\030\007 \001(\r\022\021\n\tpaintseed\030\010"
  " \001(\r\022\032\n\022killeaterscoretype\030\t \001(\r\022\026\n\016kill"
  "eatervalue\030\n \001(\r\022\022\n\ncustomname\030\013 \001(\t\0224\n\010"
  "stickers\030\014 \003(\0132\".CEconItemPreviewDataBlo"
  "ck.Sticker\022\021\n\tinventory\030\r \001(\r\022\016\n\006origin\030"
  "\016 \001(\r\022\017\n\007questid\030\017 \001(\r\022\022\n\ndropreason\030\020 \001"
  "(\r\022\022\n\nmusicindex\030\021 \001(\r\022\020\n\010entindex\030\022 \001(\005"
  "\032k\n\007Sticker\022\014\n\004slot\030\001 \001(\r\022\022\n\nsticker_id\030"
  "\002 \001(\r\022\014\n\004wear\030\003 \001(\002\022\r\n\005scale\030\004 \001(\002\022\020\n\010ro"
  "tation\030\005 \001(\002\022\017\n\007tint_id\030\006 \001(\r\"b\n2CMsgGCC"
  "Strike15_v2_MatchEndRewardDropsNotificat"
  "ion\022,\n\010iteminfo\030\006 \001(\0132\032.CEconItemPreview"
  "DataBlock\"D\n\024CMsgItemAcknowledged\022,\n\010ite"
  "minfo\030\001 \001(\0132\032.CEconItemPreviewDataBlock\""
  "}\n7CMsgGCCStrike15_v2_Client2GCEconPrevi"
  "ewDataBlockRequest\022\017\n\007param_s\030\001 \001(\004\022\017\n\007p"
  "aram_a\030\002 \001(\004\022\017\n\007param_d\030\003 \001(\004\022\017\n\007param_m"
  "\030\004 \001(\004\"h\n8CMsgGCCStrike15_v2_Client2GCEc"
  "onPreviewDataBlockResponse\022,\n\010iteminfo\030\001"
  " \001(\0132\032.CEconItemPreviewDataBlock\"5\n3CMsg"
  "GCCStrike15_v2_MatchListRequestCurrentLi"
  "veGames\"G\n2CMsgGCCStrike15_v2_MatchListR"
  "equestLiveGameForUser\022\021\n\taccountid\030\001 \001(\r"
  "\"G\n2CMsgGCCStrike15_v2_MatchListRequestR"
  "ecentUserGames\022\021\n\taccountid\030\001 \001(\r\"E\n2CMs"
  "gGCCStrike15_v2_MatchListRequestTourname"
  "ntGames\022\017\n\007eventid\030\001 \001(\005\"d\n/CMsgGCCStrik"
  "e15_v2_MatchListRequestFullGameInfo\022\017\n\007m"
  "atchid\030\001 \001(\004\022\021\n\toutcomeid\030\002 \001(\004\022\r\n\005token"
  "\030\003 \001(\r\"\210\002\n\035CDataGCCStrike15_v2_MatchInfo"
  "\022\017\n\007matchid\030\001 \001(\004\022\021\n\tmatchtime\030\002 \001(\r\022/\n\022"
  "watchablematchinfo\030\003 \001(\0132\023.WatchableMatc"
  "hInfo\022J\n\021roundstats_legacy\030\004 \001(\0132/.CMsgG"
  "CCStrike15_v2_MatchmakingServerRoundStat"
  "s\022F\n\rroundstatsall\030\005 \003(\0132/.CMsgGCCStrike"
  "15_v2_MatchmakingServerRoundStats\"^\n\'CDa"
  "taGCCStrike15_v2_TournamentGroupTeam\022\017\n\007"
  "team_id\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\023\n\013correctp"
  "ick\030\003 \001(\010\"\331\002\n#CDataGCCStrike15_v2_Tourna"
  "mentGroup\022\017\n\007groupid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t"
  "\022\014\n\004desc\030\003 \001(\t\022\031\n\021picks__deprecated\030\004 \001("
  "\r\0227\n\005teams\030\005 \003(\0132(.CDataGCCStrike15_v2_T"
  "ournamentGroupTeam\022\021\n\tstage_ids\030\006 \003(\005\022\031\n"
  "\021picklockuntiltime\030\007 \001(\r\022\025\n\rpickableteam"
  "s\030\010 \001(\r\022\027\n\017points_per_pick\030\t \001(\r\0229\n\005pick"
  "s\030\n \003(\0132*.CDataGCCStrike15_v2_Tournament"
  "Group.Picks\032\030\n\005Picks\022\017\n\007pickids\030\001 \003(\005\"\214\001"
  "\n%CDataGCCStrike15_v2_TournamentSection\022"
  "\021\n\tsectionid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004desc"
  "\030\003 \001(\t\0224\n\006groups\030\004 \003(\0132$.CDataGCCStrike1"
  "5_v2_TournamentGroup\"\265\001\n\"CDataGCCStrike1"
  "5_v2_TournamentInfo\0228\n\010sections\030\001 \003(\0132&."
  "CDataGCCStrike15_v2_TournamentSection\022*\n"
  "\020tournament_event\030\002 \001(\0132\020.TournamentEven"
  "t\022)\n\020tournament_teams\030\003 \003(\0132\017.Tournament"
  "Team\"\353\001\n\034CMsgGCCStrike15_v2_MatchList\022\024\n"
  "\014msgrequestid\030\001 \001(\r\022\021\n\taccountid\030\002 \001(\r\022\022"
  "\n\nservertime\030\003 \001(\r\022/\n\007matches\030\004 \003(\0132\036.CD"
  "ataGCCStrike15_v2_MatchInfo\022 \n\007streams\030\005"
  " \003(\0132\017.TournamentTeam\022;\n\016tournamentinfo\030"
  "\006 \001(\0132#.CDataGCCStrike15_v2_TournamentIn"
  "fo\"\357\001\n\036CMsgGCCStrike15_v2_Predictions\022\020\n"
  "\010event_id\030\001 \001(\r\022R\n\026group_match_team_pick"
  "s\030\002 \003(\01322.CMsgGCCStrike15_v2_Predictions"
  ".GroupMatchTeamPick\032g\n\022GroupMatchTeamPic"
  "k\022\021\n\tsectionid\030\001 \001(\005\022\017\n\007groupid\030\002 \001(\005\022\r\n"
  "\005index\030\003 \001(\005\022\016\n\006teamid\030\004 \001(\005\022\016\n\006itemid\030\005"
  " \001(\004\"\373\001\n\032CMsgGCCStrike15_v2_Fantasy\022\020\n\010e"
  "vent_id\030\001 \001(\r\0226\n\005teams\030\002 \003(\0132\'.CMsgGCCSt"
  "rike15_v2_Fantasy.FantasyTeam\0329\n\013Fantasy"
  "Slot\022\014\n\004type\030\001 \001(\005\022\014\n\004pick\030\002 \001(\005\022\016\n\006item"
  "id\030\003 \001(\004\032X\n\013FantasyTeam\022\021\n\tsectionid\030\001 \001"
  "(\005\0226\n\005slots\030\002 \003(\0132\'.CMsgGCCStrike15_v2_F"
  "antasy.FantasySlot\"\"\n\021CAttribute_String\022"
  "\r\n\005value\030\001 \001(\t\"\304\001\n\024CMsgCStrike15Welcome\022"
  "\027\n\017store_item_hash\030\005 \001(\r\022\037\n\027timeplayedco"
  "nsecutively\030\006 \001(\r\022\031\n\021time_first_played\030\n"
  " \001(\r\022\030\n\020last_time_played\030\014 \001(\r\022\027\n\017last_i"
  "p_address\030\r \001(\r\022\022\n\ngscookieid\030\022 \001(\004\022\020\n\010u"
  "niqueid\030\023 \001(\004\"\233\001\n1CMsgGCCStrike15_v2_Cli"
  "entVarValueNotificationInfo\022\022\n\nvalue_nam"
  "e\030\001 \001(\t\022\021\n\tvalue_int\030\002 \001(\005\022\023\n\013server_add"
  "r\030\003 \001(\r\022\023\n\013server_port\030\004 \001(\r\022\025\n\rchoked_b"
  "locks\030\005 \003(\t\"h\n1CMsgGCCStrike15_v2_Server"
  "VarValueNotificationInfo\022\021\n\taccountid\030\001 "
  "\001(\r\022\022\n\nviewangles\030\002 \003(\r\022\014\n\004type\030\003 \001(\r\",\n"
  "*CMsgGCCStrike15_v2_GiftsLeaderboardRequ"
  "est\"\235\002\n+CMsgGCCStrike15_v2_GiftsLeaderbo"
  "ardResponse\022\022\n\nservertime\030\001 \001(\r\022\033\n\023time_"
  "period_seconds\030\002 \001(\r\022\031\n\021total_gifts_give"
  "n\030\003 \001(\r\022\024\n\014total_givers\030\004 \001(\r\022R\n\007entries"
  "\030\005 \003(\0132A.CMsgGCCStrike15_v2_GiftsLeaderb"
  "oardResponse.GiftLeaderboardEntry\0328\n\024Gif"
  "tLeaderboardEntry\022\021\n\taccountid\030\001 \001(\r\022\r\n\005"
  "gifts\030\002 \001(\r\"L\n)CMsgGCCStrike15_v2_Client"
  "SubmitSurveyVote\022\021\n\tsurvey_id\030\001 \001(\r\022\014\n\004v"
  "ote\030\002 \001(\r\"\?\n*CMsgGCCStrike15_v2_Server2G"
  "CClientValidate\022\021\n\taccountid\030\001 \001(\r\"r\n*CM"
  "sgGCCStrike15_v2_GC2ClientTournamentInfo"
  "\022\017\n\007eventid\030\001 \001(\r\022\017\n\007stageid\030\002 \001(\r\022\021\n\tga"
  "me_type\030\003 \001(\r\022\017\n\007teamids\030\004 \003(\r\"O\n\rCSOEco"
  "nCoupon\022\025\n\007entryid\030\001 \001(\rB\004\200\246\035\001\022\016\n\006defidx"
  "\030\002 \001(\r\022\027\n\017expiration_date\030\003 \001(\007\"Y\n\020CSOQu"
  "estProgress\022\025\n\007questid\030\001 \001(\rB\004\200\246\035\001\022\030\n\020po"
  "ints_remaining\030\002 \001(\r\022\024\n\014bonus_points\030\003 \001"
  "(\r\"\227\001\n\033CSOAccountSeasonalOperation\022\032\n\014se"
  "ason_value\030\001 \001(\rB\004\200\246\035\001\022\025\n\rtier_unlocked\030"
  "\002 \001(\r\022\025\n\rpremium_tiers\030\003 \001(\r\022\022\n\nmission_"
  "id\030\004 \001(\r\022\032\n\022missions_completed\030\005 \001(\r\"s\n\024"
  "CSOPersonaDataPublic\022\024\n\014player_level\030\001 \001"
  "(\005\022-\n\014commendation\030\002 \001(\0132\027.PlayerCommend"
  "ationInfo\022\026\n\016elevated_state\030\003 \001(\010\"-\n\033CMs"
  "gGC_GlobalGame_Subscribe\022\016\n\006ticket\030\001 \001(\004"
  "\"1\n\035CMsgGC_GlobalGame_Unsubscribe\022\020\n\010tim"
  "eleft\030\001 \001(\005\"P\n\026CMsgGC_GlobalGame_Play\022\016\n"
  "\006ticket\030\001 \001(\004\022\022\n\ngametimems\030\002 \001(\r\022\022\n\nmsp"
  "erpoint\030\003 \001(\r\"=\n%CMsgGCCStrike15_v2_Ackn"
  "owledgePenalty\022\024\n\014acknowledged\030\001 \001(\005\"{\n/"
  "CMsgGCCStrike15_v2_Client2GCRequestPrest"
  "igeCoin\022\020\n\010defindex\030\001 \001(\r\022\021\n\tupgradeid\030\002"
  " \001(\004\022\r\n\005hours\030\003 \001(\r\022\024\n\014prestigetime\030\004 \001("
  "\r\"F\n(CMsgGCCStrike15_v2_Client2GCStreamU"
  "nlock\022\016\n\006ticket\030\001 \001(\004\022\n\n\002os\030\002 \001(\005\"<\n+CMs"
  "gGCCStrike15_v2_ClientToGCRequestElevate"
  "\022\r\n\005stage\030\001 \001(\r\"C\n!CMsgGCCStrike15_v2_Cl"
  "ientToGCChat\022\020\n\010match_id\030\001 \001(\004\022\014\n\004text\030\002"
  " \001(\t\"E\n!CMsgGCCStrike15_v2_GCToClientCha"
  "t\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"E\n$C"
  "MsgGCCStrike15_v2_ClientAuthKeyCode\022\017\n\007e"
  "ventid\030\001 \001(\r\022\014\n\004code\030\002 \001(\t\"F\n\036CMsgGCCStr"
  "ike15_GotvSyncPacket\022$\n\004data\030\001 \001(\0132\026.CEn"
  "gineGotvSyncPacket\"\224\002\n\033PlayerDecalDigita"
  "lSignature\022\021\n\tsignature\030\001 \001(\014\022\021\n\taccount"
  "id\030\002 \001(\r\022\r\n\005rtime\030\003 \001(\r\022\016\n\006endpos\030\004 \003(\002\022"
  "\020\n\010startpos\030\005 \003(\002\022\r\n\005right\030\006 \003(\002\022\021\n\ttx_d"
  "efidx\030\007 \001(\r\022\020\n\010entindex\030\010 \001(\005\022\016\n\006hitbox\030"
  "\t \001(\r\022\024\n\014creationtime\030\n \001(\002\022\021\n\tequipslot"
  "\030\013 \001(\r\022\020\n\010trace_id\030\014 \001(\r\022\016\n\006normal\030\r \003(\002"
  "\022\017\n\007tint_id\030\016 \001(\r\"f\n(CMsgGCCStrike15_v2_"
  "ClientPlayerDecalSign\022*\n\004data\030\001 \001(\0132\034.Pl"
  "ayerDecalDigitalSignature\022\016\n\006itemid\030\002 \001("
  "\004\"_\n(CMsgGCCStrike15_v2_ClientLogonFatal"
  "Error\022\021\n\terrorcode\030\001 \001(\r\022\017\n\007message\030\002 \001("
  "\t\022\017\n\007country\030\003 \001(\t\"S\n\"CMsgGCCStrike15_v2"
  "_ClientPollState\022\016\n\006pollid\030\001 \001(\r\022\r\n\005name"
  "s\030\002 \003(\t\022\016\n\006values\030\003 \003(\005\"\244\001\n!CMsgGCCStrik"
  "e15_v2_Party_Register\022\n\n\002id\030\001 \001(\r\022\013\n\003ver"
  "\030\002 \001(\r\022\013\n\003apr\030\003 \001(\r\022\013\n\003ark\030\004 \001(\r\022\013\n\003nby\030"
  "\005 \001(\r\022\013\n\003grp\030\006 \001(\r\022\r\n\005slots\030\007 \001(\r\022\020\n\010lau"
  "ncher\030\010 \001(\r\022\021\n\tgame_type\030\t \001(\r\"{\n\037CMsgGC"
  "CStrike15_v2_Party_Search\022\013\n\003ver\030\001 \001(\r\022\013"
  "\n\003apr\030\002 \001(\r\022\013\n\003ark\030\003 \001(\r\022\014\n\004grps\030\004 \003(\r\022\020"
  "\n\010launcher\030\005 \001(\r\022\021\n\tgame_type\030\006 \001(\r\"\304\001\n&"
  "CMsgGCCStrike15_v2_Party_SearchResults\022>"
  "\n\007entries\030\001 \003(\0132-.CMsgGCCStrike15_v2_Par"
  "ty_SearchResults.Entry\032Z\n\005Entry\022\n\n\002id\030\001 "
  "\001(\r\022\013\n\003grp\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\013\n\003a"
  "pr\030\004 \001(\r\022\013\n\003ark\030\005 \001(\r\022\013\n\003loc\030\006 \001(\r\"E\n\037CM"
  "sgGCCStrike15_v2_Party_Invite\022\021\n\taccount"
  "id\030\001 \001(\r\022\017\n\007lobbyid\030\002 \001(\r\"\302\001\n)CMsgGCCStr"
  "ike15_v2_Account_RequestCoPlays\022B\n\007playe"
  "rs\030\001 \003(\01321.CMsgGCCStrike15_v2_Account_Re"
  "questCoPlays.Player\022\022\n\nservertime\030\002 \001(\r\032"
  "=\n\006Player\022\021\n\taccountid\030\001 \001(\r\022\020\n\010rtcoplay"
  "\030\002 \001(\r\022\016\n\006online\030\003 \001(\010\"\244\001\n*CMsgGCCStrike"
  "15_v2_ClientToGCRequestTicket\022\033\n\023authori"
  "zed_steam_id\030\001 \001(\006\022\034\n\024authorized_public_"
  "ip\030\002 \001(\007\022\033\n\023gameserver_steam_id\030\003 \001(\006\022\036\n"
  "\026gameserver_sdr_routing\030\005 \001(\t\">\n!CMsgGCT"
  "oClientSteamDatagramTicket\022\031\n\021serialized"
  "_ticket\030\020 \001(\014\"(\n&CMsgGCCStrike15_v2_Clie"
  "ntRequestOffers\"\\\n(CMsgGCCStrike15_v2_Cl"
  "ientRequestSouvenir\022\016\n\006itemid\030\001 \001(\004\022\017\n\007m"
  "atchid\030\002 \001(\004\022\017\n\007eventid\030\003 \001(\005\"F\n\'CMsgGCC"
  "Strike15_v2_ClientAccountBalance\022\016\n\006amou"
  "nt\030\001 \001(\004\022\013\n\003url\030\002 \001(\t\"M\n\'CMsgGCCStrike15"
  "_v2_ClientPartyJoinRelay\022\021\n\taccountid\030\001 "
  "\001(\r\022\017\n\007lobbyid\030\002 \001(\004\"\224\001\n%CMsgGCCStrike15"
  "_v2_ClientPartyWarning\022=\n\007entries\030\001 \003(\0132"
  ",.CMsgGCCStrike15_v2_ClientPartyWarning."
  "Entry\032,\n\005Entry\022\021\n\taccountid\030\001 \001(\r\022\020\n\010war"
  "ntype\030\002 \001(\r\"K\n#CMsgGCCStrike15_v2_SetEve"
  "ntFavorite\022\017\n\007eventid\030\001 \001(\004\022\023\n\013is_favori"
  "te\030\002 \001(\010\"B\n,CMsgGCCStrike15_v2_GetEventF"
  "avorites_Request\022\022\n\nall_events\030\001 \001(\010\"r\n-"
  "CMsgGCCStrike15_v2_GetEventFavorites_Res"
  "ponse\022\022\n\nall_events\030\001 \001(\010\022\026\n\016json_favori"
  "tes\030\002 \001(\t\022\025\n\rjson_featured\030\003 \001(\t\"\325\001\n#CMs"
  "gGCCStrike15_v2_ClientPerfReport\022;\n\007entr"
  "ies\030\001 \003(\0132*.CMsgGCCStrike15_v2_ClientPer"
  "fReport.Entry\032q\n\005Entry\022\023\n\013perfcounter\030\001 "
  "\001(\r\022\016\n\006length\030\002 \001(\r\022\021\n\treference\030\003 \001(\014\022\016"
  "\n\006actual\030\004 \001(\014\022\020\n\010sourceid\030\005 \001(\r\022\016\n\006stat"
  "us\030\006 \001(\r\"Q\n\014CVDiagnostic\022\n\n\002id\030\001 \001(\r\022\020\n\010"
  "extended\030\002 \001(\r\022\r\n\005value\030\003 \001(\004\022\024\n\014string_"
  "value\030\004 \001(\t\"\360\003\n)CMsgGCCStrike15_v2_Clien"
  "tReportValidation\022\023\n\013file_report\030\001 \001(\t\022\024"
  "\n\014command_line\030\002 \001(\t\022\023\n\013total_files\030\003 \001("
  "\r\022\026\n\016internal_error\030\004 \001(\r\022\022\n\ntrust_time\030"
  "\005 \001(\r\022\025\n\rcount_pending\030\006 \001(\r\022\027\n\017count_co"
  "mpleted\030\007 \001(\r\022\022\n\nprocess_id\030\010 \001(\r\022\021\n\tosv"
  "ersion\030\t \001(\005\022\033\n\023clientreportversion\030\n \001("
  "\r\022\021\n\tstatus_id\030\013 \001(\r\022\023\n\013diagnostic1\030\014 \001("
  "\r\022\023\n\013diagnostic2\030\r \001(\004\022\023\n\013diagnostic3\030\016 "
  "\001(\004\022\030\n\020last_launch_data\030\017 \001(\t\022\024\n\014report_"
  "count\030\020 \001(\r\022\023\n\013client_time\030\021 \001(\004\022\023\n\013diag"
  "nostic4\030\022 \001(\004\022\023\n\013diagnostic5\030\023 \001(\004\022\"\n\013di"
  "agnostics\030\024 \003(\0132\r.CVDiagnostic\"\343\001\n,CMsgG"
  "CCStrike15_v2_GC2ClientRefuseSecureMode\022"
  "\023\n\013file_report\030\001 \001(\t\022\033\n\023offer_insecure_m"
  "ode\030\002 \001(\010\022\031\n\021offer_secure_mode\030\003 \001(\010\022\030\n\020"
  "show_unsigned_ui\030\004 \001(\010\022\021\n\tkick_user\030\005 \001("
  "\010\022\027\n\017show_trusted_ui\030\006 \001(\010\022 \n\030show_warni"
  "ng_not_trusted\030\007 \001(\010\"T\n-CMsgGCCStrike15_"
  "v2_GC2ClientRequestValidation\022\023\n\013full_re"
  "port\030\001 \001(\010\022\016\n\006module\030\002 \001(\t*\246$\n\nECsgoGCMs"
  "g\022\036\n\031k_EMsgGCCStrike15_v2_Base\020\214G\022*\n%k_E"
  "MsgGCCStrike15_v2_MatchmakingStart\020\215G\022)\n"
  "$k_EMsgGCCStrike15_v2_MatchmakingStop\020\216G"
  "\0226\n1k_EMsgGCCStrike15_v2_MatchmakingClie"
  "nt2ServerPing\020\217G\0224\n/k_EMsgGCCStrike15_v2"
  "_MatchmakingGC2ClientUpdate\020\220G\022>\n9k_EMsg"
  "GCCStrike15_v2_MatchmakingServerReservat"
  "ionResponse\020\222G\0225\n0k_EMsgGCCStrike15_v2_M"
  "atchmakingGC2ClientReserve\020\223G\0223\n.k_EMsgG"
  "CCStrike15_v2_MatchmakingClient2GCHello\020"
  "\225G\0223\n.k_EMsgGCCStrike15_v2_MatchmakingGC"
  "2ClientHello\020\226G\0225\n0k_EMsgGCCStrike15_v2_"
  "MatchmakingGC2ClientAbandon\020\230G\0227\n2k_EMsg"
  "GCCStrike15_v2_MatchmakingGCOperationalS"
  "tats\020\233G\022:\n5k_EMsgGCCStrike15_v2_Matchmak"
  "ingOperator2GCBlogUpdate\020\235G\022:\n5k_EMsgGCC"
  "Strike15_v2_ServerNotificationForUserPen"
  "alty\020\236G\022,\n\'k_EMsgGCCStrike15_v2_ClientRe"
  "portPlayer\020\237G\022,\n\'k_EMsgGCCStrike15_v2_Cl"
  "ientReportServer\020\240G\022-\n(k_EMsgGCCStrike15"
  "_v2_ClientCommendPlayer\020\241G\022.\n)k_EMsgGCCS"
  "trike15_v2_ClientReportResponse\020\242G\0222\n-k_"
  "EMsgGCCStrike15_v2_ClientCommendPlayerQu"
  "ery\020\243G\022:\n5k_EMsgGCCStrike15_v2_ClientCom"
  "mendPlayerQueryResponse\020\244G\022(\n#k_EMsgGCCS"
  "trike15_v2_WatchInfoUsers\020\246G\0225\n0k_EMsgGC"
  "CStrike15_v2_ClientRequestPlayersProfile"
  "\020\247G\022(\n#k_EMsgGCCStrike15_v2_PlayersProfi"
  "le\020\250G\0223\n.k_EMsgGCCStrike15_v2_PlayerOver"
  "watchCaseUpdate\020\253G\0227\n2k_EMsgGCCStrike15_"
  "v2_PlayerOverwatchCaseAssignment\020\254G\0223\n.k"
  "_EMsgGCCStrike15_v2_PlayerOverwatchCaseS"
  "tatus\020\255G\022*\n%k_EMsgGCCStrike15_v2_GC2Clie"
  "ntTextMsg\020\256G\022*\n%k_EMsgGCCStrike15_v2_Cli"
  "ent2GCTextMsg\020\257G\0220\n+k_EMsgGCCStrike15_v2"
  "_MatchEndRunRewardDrops\020\260G\0229\n4k_EMsgGCCS"
  "trike15_v2_MatchEndRewardDropsNotificati"
  "on\020\261G\0228\n3k_EMsgGCCStrike15_v2_ClientRequ"
  "estWatchInfoFriends2\020\262G\022#\n\036k_EMsgGCCStri"
  "ke15_v2_MatchList\020\263G\022:\n5k_EMsgGCCStrike1"
  "5_v2_MatchListRequestCurrentLiveGames\020\264G"
  "\0229\n4k_EMsgGCCStrike15_v2_MatchListReques"
  "tRecentUserGames\020\265G\0224\n/k_EMsgGCCStrike15"
  "_v2_GC2ServerReservationUpdate\020\266G\0228\n3k_E"
  "MsgGCCStrike15_v2_ClientVarValueNotifica"
  "tionInfo\020\270G\0229\n4k_EMsgGCCStrike15_v2_Matc"
  "hListRequestTournamentGames\020\272G\0226\n1k_EMsg"
  "GCCStrike15_v2_MatchListRequestFullGameI"
  "nfo\020\273G\0221\n,k_EMsgGCCStrike15_v2_GiftsLead"
  "erboardRequest\020\274G\0222\n-k_EMsgGCCStrike15_v"
  "2_GiftsLeaderboardResponse\020\275G\0228\n3k_EMsgG"
  "CCStrike15_v2_ServerVarValueNotification"
  "Info\020\276G\0220\n+k_EMsgGCCStrike15_v2_ClientSu"
  "bmitSurveyVote\020\300G\0221\n,k_EMsgGCCStrike15_v"
  "2_Server2GCClientValidate\020\301G\0229\n4k_EMsgGC"
  "CStrike15_v2_MatchListRequestLiveGameFor"
  "User\020\302G\022>\n9k_EMsgGCCStrike15_v2_Client2G"
  "CEconPreviewDataBlockRequest\020\304G\022\?\n:k_EMs"
  "gGCCStrike15_v2_Client2GCEconPreviewData"
  "BlockResponse\020\305G\0220\n+k_EMsgGCCStrike15_v2"
  "_AccountPrivacySettings\020\306G\022+\n&k_EMsgGCCS"
  "trike15_v2_SetMyActivityInfo\020\307G\022\?\n:k_EMs"
  "gGCCStrike15_v2_MatchListRequestTourname"
  "ntPredictions\020\310G\022>\n9k_EMsgGCCStrike15_v2"
  "_MatchListUploadTournamentPredictions\020\311G"
  "\022&\n!k_EMsgGCCStrike15_v2_DraftSummary\020\312G"
  "\0225\n0k_EMsgGCCStrike15_v2_ClientRequestJo"
  "inFriendData\020\313G\0225\n0k_EMsgGCCStrike15_v2_"
  "ClientRequestJoinServerData\020\314G\0221\n,k_EMsg"
  "GCCStrike15_v2_ClientRequestNewMission\020\315"
  "G\0221\n,k_EMsgGCCStrike15_v2_GC2ClientTourn"
  "amentInfo\020\317G\022\"\n\035k_EMsgGC_GlobalGame_Subs"
  "cribe\020\320G\022$\n\037k_EMsgGC_GlobalGame_Unsubscr"
  "ibe\020\321G\022\035\n\030k_EMsgGC_GlobalGame_Play\020\322G\022,\n"
  "\'k_EMsgGCCStrike15_v2_AcknowledgePenalty"
  "\020\323G\0226\n1k_EMsgGCCStrike15_v2_Client2GCReq"
  "uestPrestigeCoin\020\324G\022.\n)k_EMsgGCCStrike15"
  "_v2_GC2ClientGlobalStats\020\325G\022/\n*k_EMsgGCC"
  "Strike15_v2_Client2GCStreamUnlock\020\326G\0222\n-"
  "k_EMsgGCCStrike15_v2_FantasyRequestClien"
  "tData\020\327G\0221\n,k_EMsgGCCStrike15_v2_Fantasy"
  "UpdateClientData\020\330G\0227\n2k_EMsgGCCStrike15"
  "_v2_GCToClientSteamdatagramTicket\020\331G\0221\n,"
  "k_EMsgGCCStrike15_v2_ClientToGCRequestTi"
  "cket\020\332G\0222\n-k_EMsgGCCStrike15_v2_ClientTo"
  "GCRequestElevate\020\333G\022$\n\037k_EMsgGCCStrike15"
  "_v2_GlobalChat\020\334G\022.\n)k_EMsgGCCStrike15_v"
  "2_GlobalChat_Subscribe\020\335G\0220\n+k_EMsgGCCSt"
  "rike15_v2_GlobalChat_Unsubscribe\020\336G\022+\n&k"
  "_EMsgGCCStrike15_v2_ClientAuthKeyCode\020\337G"
  "\022(\n#k_EMsgGCCStrike15_v2_GotvSyncPacket\020"
  "\340G\022/\n*k_EMsgGCCStrike15_v2_ClientPlayerD"
  "ecalSign\020\341G\022/\n*k_EMsgGCCStrike15_v2_Clie"
  "ntLogonFatalError\020\343G\022)\n$k_EMsgGCCStrike1"
  "5_v2_ClientPollState\020\344G\022(\n#k_EMsgGCCStri"
  "ke15_v2_Party_Register\020\345G\022*\n%k_EMsgGCCSt"
  "rike15_v2_Party_Unregister\020\346G\022&\n!k_EMsgG"
  "CCStrike15_v2_Party_Search\020\347G\022&\n!k_EMsgG"
  "CCStrike15_v2_Party_Invite\020\350G\0220\n+k_EMsgG"
  "CCStrike15_v2_Account_RequestCoPlays\020\351G\022"
  ",\n\'k_EMsgGCCStrike15_v2_ClientGCRankUpda"
  "te\020\352G\022-\n(k_EMsgGCCStrike15_v2_ClientRequ"
  "estOffers\020\353G\022.\n)k_EMsgGCCStrike15_v2_Cli"
  "entAccountBalance\020\354G\022.\n)k_EMsgGCCStrike1"
  "5_v2_ClientPartyJoinRelay\020\355G\022,\n\'k_EMsgGC"
  "CStrike15_v2_ClientPartyWarning\020\356G\022*\n%k_"
  "EMsgGCCStrike15_v2_SetEventFavorite\020\360G\0223"
  "\n.k_EMsgGCCStrike15_v2_GetEventFavorites"
  "_Request\020\361G\022*\n%k_EMsgGCCStrike15_v2_Clie"
  "ntPerfReport\020\362G\0224\n/k_EMsgGCCStrike15_v2_"
  "GetEventFavorites_Response\020\363G\022/\n*k_EMsgG"
  "CCStrike15_v2_ClientRequestSouvenir\020\364G\0220"
  "\n+k_EMsgGCCStrike15_v2_ClientReportValid"
  "ation\020\365G\0223\n.k_EMsgGCCStrike15_v2_GC2Clie"
  "ntRefuseSecureMode\020\366G\0224\n/k_EMsgGCCStrike"
  "15_v2_GC2ClientRequestValidation\020\367G*\230\001\n\022"
  "ECsgoSteamUserStat\022&\n\"k_ECsgoSteamUserSt"
  "at_XpEarnedGames\020\001\022-\n)k_ECsgoSteamUserSt"
  "at_MatchWinsCompetitive\020\002\022+\n\'k_ECsgoStea"
  "mUserStat_SurvivedDangerZone\020\003*\241\001\n\027EClie"
  "ntReportingVersion\022(\n$k_EClientReporting"
  "Version_OldVersion\020\000\022)\n%k_EClientReporti"
  "ngVersion_BetaVersion\020\001\0221\n-k_EClientRepo"
  "rtingVersion_SupportsTrustedMode\020\002B\005H\001\200\001"
  "\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cstrike15_5fgcmessages_2eproto_deps[2] = {
  &::descriptor_table_engine_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cstrike15_5fgcmessages_2eproto_sccs[147] = {
  &scc_info_AccountActivity_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CAttribute_String_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CClientHeaderOverwatchEvidence_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgCStrike15Welcome_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_GotvSyncPacket_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientAccountBalance_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientGCRankUpdate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPartyJoinRelay_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPerfReport_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientPollState_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientReportPlayer_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientReportResponse_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientReportServer_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientReportValidation_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientRequestOffers_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientRequestSouvenir_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientToGCChat_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Fantasy_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GC2ClientRequestValidation_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GCToClientChat_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Request_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Response_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchList_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingStart_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_MatchmakingStop_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Party_Invite_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Party_Register_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Party_Search_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Party_SearchResults_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_PlayersProfile_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Predictions_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_SetEventFavorite_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCStrike15_v2_WatchInfoUsers_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGCToClientSteamDatagramTicket_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGC_GlobalGame_Play_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGC_GlobalGame_Subscribe_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGC_GlobalGame_Unsubscribe_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CMsgItemAcknowledged_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CSOAccountSeasonalOperation_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CSOEconCoupon_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CSOPersonaDataPublic_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CSOQuestProgress_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_GameServerPing_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto.base,
  &scc_info_XpProgressData_cstrike15_5fgcmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cstrike15_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cstrike15_5fgcmessages_2eproto = {
  false, false, descriptor_table_protodef_cstrike15_5fgcmessages_2eproto, "cstrike15_gcmessages.proto", 26641,
  &descriptor_table_cstrike15_5fgcmessages_2eproto_once, descriptor_table_cstrike15_5fgcmessages_2eproto_sccs, descriptor_table_cstrike15_5fgcmessages_2eproto_deps, 147, 2,
  schemas, file_default_instances, TableStruct_cstrike15_5fgcmessages_2eproto::offsets,
  file_level_metadata_cstrike15_5fgcmessages_2eproto, 147, file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto, file_level_service_descriptors_cstrike15_5fgcmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cstrike15_5fgcmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECsgoGCMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[0];
}
bool ECsgoGCMsg_IsValid(int value) {
  switch (value) {
    case 9100:
    case 9101:
    case 9102:
    case 9103:
    case 9104:
    case 9106:
    case 9107:
    case 9109:
    case 9110:
    case 9112:
    case 9115:
    case 9117:
    case 9118:
    case 9119:
    case 9120:
    case 9121:
    case 9122:
    case 9123:
    case 9124:
    case 9126:
    case 9127:
    case 9128:
    case 9131:
    case 9132:
    case 9133:
    case 9134:
    case 9135:
    case 9136:
    case 9137:
    case 9138:
    case 9139:
    case 9140:
    case 9141:
    case 9142:
    case 9144:
    case 9146:
    case 9147:
    case 9148:
    case 9149:
    case 9150:
    case 9152:
    case 9153:
    case 9154:
    case 9156:
    case 9157:
    case 9158:
    case 9159:
    case 9160:
    case 9161:
    case 9162:
    case 9163:
    case 9164:
    case 9165:
    case 9167:
    case 9168:
    case 9169:
    case 9170:
    case 9171:
    case 9172:
    case 9173:
    case 9174:
    case 9175:
    case 9176:
    case 9177:
    case 9178:
    case 9179:
    case 9180:
    case 9181:
    case 9182:
    case 9183:
    case 9184:
    case 9185:
    case 9187:
    case 9188:
    case 9189:
    case 9190:
    case 9191:
    case 9192:
    case 9193:
    case 9194:
    case 9195:
    case 9196:
    case 9197:
    case 9198:
    case 9200:
    case 9201:
    case 9202:
    case 9203:
    case 9204:
    case 9205:
    case 9206:
    case 9207:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECsgoSteamUserStat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[1];
}
bool ECsgoSteamUserStat_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientReportingVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[2];
}
bool EClientReportingVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameServerPing::InitAsDefaultInstance() {
}
class GameServerPing::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerPing>()._has_bits_);
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instances(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GameServerPing::GameServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameServerPing)
}
GameServerPing::GameServerPing(const GameServerPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ping_, &from.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&instances_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(instances_));
  // @@protoc_insertion_point(copy_constructor:GameServerPing)
}

void GameServerPing::SharedCtor() {
  ::memset(&ping_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instances_) -
      reinterpret_cast<char*>(&ping_)) + sizeof(instances_));
}

GameServerPing::~GameServerPing() {
  // @@protoc_insertion_point(destructor:GameServerPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameServerPing::ArenaDtor(void* object) {
  GameServerPing* _this = reinterpret_cast< GameServerPing* >(object);
  (void)_this;
}
void GameServerPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServerPing& GameServerPing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServerPing_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void GameServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instances_) -
        reinterpret_cast<char*>(&ping_)) + sizeof(instances_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 instances = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_instances(&has_bits);
          instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional uint32 ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ip(), target);
  }

  // optional uint32 instances = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerPing)
  return target;
}

size_t GameServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ping());
    }

    // optional uint32 ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ip());
    }

    // optional uint32 instances = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_instances());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerPing)
    MergeFrom(*source);
  }
}

void GameServerPing::MergeFrom(const GameServerPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      instances_ = from.instances_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPing::CopyFrom(const GameServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPing::IsInitialized() const {
  return true;
}

void GameServerPing::InternalSwap(GameServerPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerPing, instances_)
      + sizeof(GameServerPing::instances_)
      - PROTOBUF_FIELD_OFFSET(GameServerPing, ping_)>(
          reinterpret_cast<char*>(&ping_),
          reinterpret_cast<char*>(&other->ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCenterPing::InitAsDefaultInstance() {
}
class DataCenterPing::_Internal {
 public:
  using HasBits = decltype(std::declval<DataCenterPing>()._has_bits_);
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataCenterPing::DataCenterPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataCenterPing)
}
DataCenterPing::DataCenterPing(const DataCenterPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(ping_));
  // @@protoc_insertion_point(copy_constructor:DataCenterPing)
}

void DataCenterPing::SharedCtor() {
  ::memset(&data_center_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&data_center_id_)) + sizeof(ping_));
}

DataCenterPing::~DataCenterPing() {
  // @@protoc_insertion_point(destructor:DataCenterPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataCenterPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataCenterPing::ArenaDtor(void* object) {
  DataCenterPing* _this = reinterpret_cast< DataCenterPing* >(object);
  (void)_this;
}
void DataCenterPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataCenterPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCenterPing& DataCenterPing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCenterPing_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void DataCenterPing::Clear() {
// @@protoc_insertion_point(message_clear_start:DataCenterPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(ping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCenterPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 data_center_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_data_center_id(&has_bits);
          data_center_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional sint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCenterPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCenterPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_data_center_id(), target);
  }

  // optional sint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCenterPing)
  return target;
}

size_t DataCenterPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataCenterPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional sint32 ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_ping());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCenterPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataCenterPing)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCenterPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCenterPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataCenterPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataCenterPing)
    MergeFrom(*source);
  }
}

void DataCenterPing::MergeFrom(const DataCenterPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataCenterPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataCenterPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataCenterPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCenterPing::CopyFrom(const DataCenterPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataCenterPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCenterPing::IsInitialized() const {
  return true;
}

void DataCenterPing::InternalSwap(DataCenterPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataCenterPing, ping_)
      + sizeof(DataCenterPing::ping_)
      - PROTOBUF_FIELD_OFFSET(DataCenterPing, data_center_id_)>(
          reinterpret_cast<char*>(&data_center_id_),
          reinterpret_cast<char*>(&other->data_center_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCenterPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedSearchStatistic::InitAsDefaultInstance() {
}
class DetailedSearchStatistic::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedSearchStatistic>()._has_bits_);
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_search_time_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_players_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DetailedSearchStatistic::DetailedSearchStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DetailedSearchStatistic)
}
DetailedSearchStatistic::DetailedSearchStatistic(const DetailedSearchStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_searching_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(players_searching_));
  // @@protoc_insertion_point(copy_constructor:DetailedSearchStatistic)
}

void DetailedSearchStatistic::SharedCtor() {
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_searching_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(players_searching_));
}

DetailedSearchStatistic::~DetailedSearchStatistic() {
  // @@protoc_insertion_point(destructor:DetailedSearchStatistic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedSearchStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailedSearchStatistic::ArenaDtor(void* object) {
  DetailedSearchStatistic* _this = reinterpret_cast< DetailedSearchStatistic* >(object);
  (void)_this;
}
void DetailedSearchStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedSearchStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedSearchStatistic& DetailedSearchStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedSearchStatistic_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void DetailedSearchStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:DetailedSearchStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_searching_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(players_searching_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedSearchStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 search_time_avg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_search_time_avg(&has_bits);
          search_time_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_searching = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_players_searching(&has_bits);
          players_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedSearchStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetailedSearchStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  // optional uint32 search_time_avg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_search_time_avg(), target);
  }

  // optional uint32 players_searching = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_players_searching(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetailedSearchStatistic)
  return target;
}

size_t DetailedSearchStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetailedSearchStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 game_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

    // optional uint32 search_time_avg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_search_time_avg());
    }

    // optional uint32 players_searching = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_searching());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedSearchStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetailedSearchStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedSearchStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedSearchStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetailedSearchStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetailedSearchStatistic)
    MergeFrom(*source);
  }
}

void DetailedSearchStatistic::MergeFrom(const DetailedSearchStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetailedSearchStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      search_time_avg_ = from.search_time_avg_;
    }
    if (cached_has_bits & 0x00000004u) {
      players_searching_ = from.players_searching_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetailedSearchStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetailedSearchStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedSearchStatistic::CopyFrom(const DetailedSearchStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetailedSearchStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedSearchStatistic::IsInitialized() const {
  return true;
}

void DetailedSearchStatistic::InternalSwap(DetailedSearchStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedSearchStatistic, players_searching_)
      + sizeof(DetailedSearchStatistic::players_searching_)
      - PROTOBUF_FIELD_OFFSET(DetailedSearchStatistic, game_type_)>(
          reinterpret_cast<char*>(&game_type_),
          reinterpret_cast<char*>(&other->game_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedSearchStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TournamentPlayer::InitAsDefaultInstance() {
}
class TournamentPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentPlayer>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_nick(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_dob(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TournamentPlayer::TournamentPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentPlayer)
}
TournamentPlayer::TournamentPlayer(const TournamentPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_nick()) {
    player_nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_nick(),
      GetArena());
  }
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_name(),
      GetArena());
  }
  player_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_flag()) {
    player_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_flag(),
      GetArena());
  }
  player_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_location()) {
    player_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_location(),
      GetArena());
  }
  player_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_desc()) {
    player_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_desc(),
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_dob_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_dob_));
  // @@protoc_insertion_point(copy_constructor:TournamentPlayer)
}

void TournamentPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto.base);
  player_nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_dob_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(player_dob_));
}

TournamentPlayer::~TournamentPlayer() {
  // @@protoc_insertion_point(destructor:TournamentPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TournamentPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TournamentPlayer::ArenaDtor(void* object) {
  TournamentPlayer* _this = reinterpret_cast< TournamentPlayer* >(object);
  (void)_this;
}
void TournamentPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TournamentPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TournamentPlayer& TournamentPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TournamentPlayer_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void TournamentPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      player_flag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      player_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      player_desc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_dob_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_dob_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentPlayer.player_nick");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentPlayer.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_dob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_dob(&has_bits);
          player_dob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_player_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentPlayer.player_flag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_player_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentPlayer.player_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_player_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentPlayer.player_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TournamentPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string player_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_nick().data(), static_cast<int>(this->_internal_player_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_nick(), target);
  }

  // optional string player_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_name(), target);
  }

  // optional uint32 player_dob = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_dob(), target);
  }

  // optional string player_flag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_flag().data(), static_cast<int>(this->_internal_player_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_flag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_player_flag(), target);
  }

  // optional string player_location = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_location().data(), static_cast<int>(this->_internal_player_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_location");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player_location(), target);
  }

  // optional string player_desc = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_desc().data(), static_cast<int>(this->_internal_player_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_player_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentPlayer)
  return target;
}

size_t TournamentPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string player_nick = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_nick());
    }

    // optional string player_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional string player_flag = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_flag());
    }

    // optional string player_location = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_location());
    }

    // optional string player_desc = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_desc());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 player_dob = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_dob());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TournamentPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentPlayer)
    MergeFrom(*source);
  }
}

void TournamentPlayer::MergeFrom(const TournamentPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_nick(from._internal_player_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_player_flag(from._internal_player_flag());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_player_location(from._internal_player_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_player_desc(from._internal_player_desc());
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_dob_ = from.player_dob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TournamentPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentPlayer::CopyFrom(const TournamentPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentPlayer::IsInitialized() const {
  return true;
}

void TournamentPlayer::InternalSwap(TournamentPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_nick_.Swap(&other->player_nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_flag_.Swap(&other->player_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_location_.Swap(&other->player_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_desc_.Swap(&other->player_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentPlayer, player_dob_)
      + sizeof(TournamentPlayer::player_dob_)
      - PROTOBUF_FIELD_OFFSET(TournamentPlayer, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TournamentTeam::InitAsDefaultInstance() {
}
class TournamentTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentTeam>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TournamentTeam::TournamentTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentTeam)
}
TournamentTeam::TournamentTeam(const TournamentTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team_tag(),
      GetArena());
  }
  team_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_flag()) {
    team_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team_flag(),
      GetArena());
  }
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team_name(),
      GetArena());
  }
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:TournamentTeam)
}

void TournamentTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base);
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0;
}

TournamentTeam::~TournamentTeam() {
  // @@protoc_insertion_point(destructor:TournamentTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TournamentTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TournamentTeam::ArenaDtor(void* object) {
  TournamentTeam* _this = reinterpret_cast< TournamentTeam* >(object);
  (void)_this;
}
void TournamentTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TournamentTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TournamentTeam& TournamentTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TournamentTeam_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void TournamentTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_flag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_name_.ClearNonDefaultToEmpty();
    }
  }
  team_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentTeam.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentTeam.team_flag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentTeam.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentPlayer players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TournamentTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_tag(), target);
  }

  // optional string team_flag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_flag().data(), static_cast<int>(this->_internal_team_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_flag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_flag(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // repeated .TournamentPlayer players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentTeam)
  return target;
}

size_t TournamentTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TournamentPlayer players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_flag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_flag());
    }

    // optional string team_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional int32 team_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TournamentTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentTeam)
    MergeFrom(*source);
  }
}

void TournamentTeam::MergeFrom(const TournamentTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_flag(from._internal_team_flag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TournamentTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentTeam::CopyFrom(const TournamentTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentTeam::IsInitialized() const {
  return true;
}

void TournamentTeam::InternalSwap(TournamentTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_flag_.Swap(&other->team_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TournamentEvent::InitAsDefaultInstance() {
}
class TournamentEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentEvent>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_event_time_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_public(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_event_stage_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_event_stage_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active_section_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TournamentEvent::TournamentEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentEvent)
}
TournamentEvent::TournamentEvent(const TournamentEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_tag()) {
    event_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_event_tag(),
      GetArena());
  }
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_event_name(),
      GetArena());
  }
  event_stage_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_stage_name()) {
    event_stage_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_event_stage_name(),
      GetArena());
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_section_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(active_section_id_));
  // @@protoc_insertion_point(copy_constructor:TournamentEvent)
}

void TournamentEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto.base);
  event_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stage_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_section_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(active_section_id_));
}

TournamentEvent::~TournamentEvent() {
  // @@protoc_insertion_point(destructor:TournamentEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TournamentEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stage_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TournamentEvent::ArenaDtor(void* object) {
  TournamentEvent* _this = reinterpret_cast< TournamentEvent* >(object);
  (void)_this;
}
void TournamentEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TournamentEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TournamentEvent& TournamentEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TournamentEvent_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void TournamentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      event_stage_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_stage_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
  }
  active_section_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string event_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_event_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentEvent.event_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string event_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentEvent.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_time_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_time_start(&has_bits);
          event_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_time_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_event_time_end(&has_bits);
          event_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_public = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_event_public(&has_bits);
          event_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_stage_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_event_stage_id(&has_bits);
          event_stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string event_stage_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_event_stage_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentEvent.event_stage_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_section_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_active_section_id(&has_bits);
          active_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TournamentEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional string event_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_tag().data(), static_cast<int>(this->_internal_event_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_tag(), target);
  }

  // optional string event_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_name(), target);
  }

  // optional uint32 event_time_start = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_time_start(), target);
  }

  // optional uint32 event_time_end = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_time_end(), target);
  }

  // optional int32 event_public = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_event_public(), target);
  }

  // optional int32 event_stage_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_event_stage_id(), target);
  }

  // optional string event_stage_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_stage_name().data(), static_cast<int>(this->_internal_event_stage_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_stage_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_event_stage_name(), target);
  }

  // optional uint32 active_section_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_active_section_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentEvent)
  return target;
}

size_t TournamentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string event_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_tag());
    }

    // optional string event_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional string event_stage_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_stage_name());
    }

    // optional int32 event_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_id());
    }

    // optional uint32 event_time_start = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_time_start());
    }

    // optional uint32 event_time_end = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_time_end());
    }

    // optional int32 event_public = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_public());
    }

    // optional int32 event_stage_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_stage_id());
    }

  }
  // optional uint32 active_section_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_section_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TournamentEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentEvent)
    MergeFrom(*source);
  }
}

void TournamentEvent::MergeFrom(const TournamentEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_tag(from._internal_event_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_event_stage_name(from._internal_event_stage_name());
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_time_start_ = from.event_time_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      event_time_end_ = from.event_time_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      event_public_ = from.event_public_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_stage_id_ = from.event_stage_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_active_section_id(from._internal_active_section_id());
  }
}

void TournamentEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentEvent::CopyFrom(const TournamentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentEvent::IsInitialized() const {
  return true;
}

void TournamentEvent::InternalSwap(TournamentEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_tag_.Swap(&other->event_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  event_stage_name_.Swap(&other->event_stage_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentEvent, active_section_id_)
      + sizeof(TournamentEvent::active_section_id_)
      - PROTOBUF_FIELD_OFFSET(TournamentEvent, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlobalStatistics::InitAsDefaultInstance() {
}
class GlobalStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalStatistics>()._has_bits_);
  static void set_has_players_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_servers_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_players_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_servers_available(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ongoing_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_search_time_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_main_post_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required_appid_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pricesheet_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_twitch_streams_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_active_tournament_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_active_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rtime32_cur(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rtime32_event_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

GlobalStatistics::GlobalStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  search_statistics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GlobalStatistics)
}
GlobalStatistics::GlobalStatistics(const GlobalStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      search_statistics_(from.search_statistics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_post_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_post_url()) {
    main_post_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_main_post_url(),
      GetArena());
  }
  ::memcpy(&players_online_, &from.players_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime32_event_start_) -
    reinterpret_cast<char*>(&players_online_)) + sizeof(rtime32_event_start_));
  // @@protoc_insertion_point(copy_constructor:GlobalStatistics)
}

void GlobalStatistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto.base);
  main_post_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&players_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtime32_event_start_) -
      reinterpret_cast<char*>(&players_online_)) + sizeof(rtime32_event_start_));
}

GlobalStatistics::~GlobalStatistics() {
  // @@protoc_insertion_point(destructor:GlobalStatistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  main_post_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GlobalStatistics::ArenaDtor(void* object) {
  GlobalStatistics* _this = reinterpret_cast< GlobalStatistics* >(object);
  (void)_this;
}
void GlobalStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalStatistics& GlobalStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalStatistics_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void GlobalStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:GlobalStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_statistics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    main_post_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&players_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_appid_version_) -
        reinterpret_cast<char*>(&players_online_)) + sizeof(required_appid_version_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&pricesheet_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime32_event_start_) -
        reinterpret_cast<char*>(&pricesheet_version_)) + sizeof(rtime32_event_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 players_online = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_players_online(&has_bits);
          players_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 servers_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_servers_online(&has_bits);
          servers_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_searching = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_players_searching(&has_bits);
          players_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 servers_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_servers_available(&has_bits);
          servers_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ongoing_matches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ongoing_matches(&has_bits);
          ongoing_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 search_time_avg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_search_time_avg(&has_bits);
          search_time_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DetailedSearchStatistic search_statistics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string main_post_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_main_post_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GlobalStatistics.main_post_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_appid_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_required_appid_version(&has_bits);
          required_appid_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pricesheet_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pricesheet_version(&has_bits);
          pricesheet_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 twitch_streams_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_twitch_streams_version(&has_bits);
          twitch_streams_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_tournament_eventid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_active_tournament_eventid(&has_bits);
          active_tournament_eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_survey_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_active_survey_id(&has_bits);
          active_survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_cur = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rtime32_cur(&has_bits);
          rtime32_cur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_event_start = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_rtime32_event_start(&has_bits);
          rtime32_event_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlobalStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 players_online = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_players_online(), target);
  }

  // optional uint32 servers_online = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_servers_online(), target);
  }

  // optional uint32 players_searching = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_players_searching(), target);
  }

  // optional uint32 servers_available = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_servers_available(), target);
  }

  // optional uint32 ongoing_matches = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ongoing_matches(), target);
  }

  // optional uint32 search_time_avg = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_search_time_avg(), target);
  }

  // repeated .DetailedSearchStatistic search_statistics = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_statistics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_search_statistics(i), target, stream);
  }

  // optional string main_post_url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_post_url().data(), static_cast<int>(this->_internal_main_post_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GlobalStatistics.main_post_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_main_post_url(), target);
  }

  // optional uint32 required_appid_version = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_required_appid_version(), target);
  }

  // optional uint32 pricesheet_version = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pricesheet_version(), target);
  }

  // optional uint32 twitch_streams_version = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_twitch_streams_version(), target);
  }

  // optional uint32 active_tournament_eventid = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_active_tournament_eventid(), target);
  }

  // optional uint32 active_survey_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_active_survey_id(), target);
  }

  // optional uint32 rtime32_cur = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rtime32_cur(), target);
  }

  // optional uint32 rtime32_event_start = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rtime32_event_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlobalStatistics)
  return target;
}

size_t GlobalStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlobalStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DetailedSearchStatistic search_statistics = 7;
  total_size += 1UL * this->_internal_search_statistics_size();
  for (const auto& msg : this->search_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string main_post_url = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_post_url());
    }

    // optional uint32 players_online = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_online());
    }

    // optional uint32 servers_online = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_servers_online());
    }

    // optional uint32 players_searching = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_searching());
    }

    // optional uint32 servers_available = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_servers_available());
    }

    // optional uint32 ongoing_matches = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ongoing_matches());
    }

    // optional uint32 search_time_avg = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_search_time_avg());
    }

    // optional uint32 required_appid_version = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_appid_version());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 pricesheet_version = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pricesheet_version());
    }

    // optional uint32 twitch_streams_version = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_twitch_streams_version());
    }

    // optional uint32 active_tournament_eventid = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_tournament_eventid());
    }

    // optional uint32 active_survey_id = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_survey_id());
    }

    // optional uint32 rtime32_cur = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_cur());
    }

    // optional uint32 rtime32_event_start = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_event_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GlobalStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GlobalStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GlobalStatistics)
    MergeFrom(*source);
  }
}

void GlobalStatistics::MergeFrom(const GlobalStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GlobalStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_statistics_.MergeFrom(from.search_statistics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_main_post_url(from._internal_main_post_url());
    }
    if (cached_has_bits & 0x00000002u) {
      players_online_ = from.players_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      servers_online_ = from.servers_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      players_searching_ = from.players_searching_;
    }
    if (cached_has_bits & 0x00000010u) {
      servers_available_ = from.servers_available_;
    }
    if (cached_has_bits & 0x00000020u) {
      ongoing_matches_ = from.ongoing_matches_;
    }
    if (cached_has_bits & 0x00000040u) {
      search_time_avg_ = from.search_time_avg_;
    }
    if (cached_has_bits & 0x00000080u) {
      required_appid_version_ = from.required_appid_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      pricesheet_version_ = from.pricesheet_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      twitch_streams_version_ = from.twitch_streams_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_tournament_eventid_ = from.active_tournament_eventid_;
    }
    if (cached_has_bits & 0x00000800u) {
      active_survey_id_ = from.active_survey_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      rtime32_cur_ = from.rtime32_cur_;
    }
    if (cached_has_bits & 0x00002000u) {
      rtime32_event_start_ = from.rtime32_event_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlobalStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GlobalStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalStatistics::CopyFrom(const GlobalStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlobalStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStatistics::IsInitialized() const {
  return true;
}

void GlobalStatistics::InternalSwap(GlobalStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  search_statistics_.InternalSwap(&other->search_statistics_);
  main_post_url_.Swap(&other->main_post_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalStatistics, rtime32_event_start_)
      + sizeof(GlobalStatistics::rtime32_event_start_)
      - PROTOBUF_FIELD_OFFSET(GlobalStatistics, players_online_)>(
          reinterpret_cast<char*>(&players_online_),
          reinterpret_cast<char*>(&other->players_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationalStatisticDescription::InitAsDefaultInstance() {
}
class OperationalStatisticDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalStatisticDescription>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationalStatisticDescription::OperationalStatisticDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OperationalStatisticDescription)
}
OperationalStatisticDescription::OperationalStatisticDescription(const OperationalStatisticDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  idkey_ = from.idkey_;
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticDescription)
}

void OperationalStatisticDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idkey_ = 0u;
}

OperationalStatisticDescription::~OperationalStatisticDescription() {
  // @@protoc_insertion_point(destructor:OperationalStatisticDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationalStatisticDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationalStatisticDescription::ArenaDtor(void* object) {
  OperationalStatisticDescription* _this = reinterpret_cast< OperationalStatisticDescription* >(object);
  (void)_this;
}
void OperationalStatisticDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationalStatisticDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationalStatisticDescription& OperationalStatisticDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationalStatisticDescription_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void OperationalStatisticDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  idkey_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalStatisticDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OperationalStatisticDescription.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idkey(&has_bits);
          idkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationalStatisticDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "OperationalStatisticDescription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 idkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticDescription)
  return target;
}

size_t OperationalStatisticDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 idkey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_idkey());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationalStatisticDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperationalStatisticDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationalStatisticDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationalStatisticDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperationalStatisticDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperationalStatisticDescription)
    MergeFrom(*source);
  }
}

void OperationalStatisticDescription::MergeFrom(const OperationalStatisticDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      idkey_ = from.idkey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationalStatisticDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperationalStatisticDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticDescription::CopyFrom(const OperationalStatisticDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticDescription::IsInitialized() const {
  return true;
}

void OperationalStatisticDescription::InternalSwap(OperationalStatisticDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(idkey_, other->idkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalStatisticDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationalStatisticElement::InitAsDefaultInstance() {
}
class OperationalStatisticElement::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalStatisticElement>()._has_bits_);
  static void set_has_idkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OperationalStatisticElement::OperationalStatisticElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OperationalStatisticElement)
}
OperationalStatisticElement::OperationalStatisticElement(const OperationalStatisticElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  idkey_ = from.idkey_;
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticElement)
}

void OperationalStatisticElement::SharedCtor() {
  idkey_ = 0u;
}

OperationalStatisticElement::~OperationalStatisticElement() {
  // @@protoc_insertion_point(destructor:OperationalStatisticElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationalStatisticElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OperationalStatisticElement::ArenaDtor(void* object) {
  OperationalStatisticElement* _this = reinterpret_cast< OperationalStatisticElement* >(object);
  (void)_this;
}
void OperationalStatisticElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationalStatisticElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationalStatisticElement& OperationalStatisticElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationalStatisticElement_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void OperationalStatisticElement::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  idkey_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalStatisticElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 idkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idkey(&has_bits);
          idkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationalStatisticElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 idkey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idkey(), target);
  }

  // repeated int32 values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticElement)
  return target;
}

size_t OperationalStatisticElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->values_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  // optional uint32 idkey = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationalStatisticElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperationalStatisticElement)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationalStatisticElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationalStatisticElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperationalStatisticElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperationalStatisticElement)
    MergeFrom(*source);
  }
}

void OperationalStatisticElement::MergeFrom(const OperationalStatisticElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_idkey()) {
    _internal_set_idkey(from._internal_idkey());
  }
}

void OperationalStatisticElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperationalStatisticElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticElement::CopyFrom(const OperationalStatisticElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticElement::IsInitialized() const {
  return true;
}

void OperationalStatisticElement::InternalSwap(OperationalStatisticElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(idkey_, other->idkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalStatisticElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationalStatisticsPacket::InitAsDefaultInstance() {
}
class OperationalStatisticsPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalStatisticsPacket>()._has_bits_);
  static void set_has_packetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationalStatisticsPacket::OperationalStatisticsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OperationalStatisticsPacket)
}
OperationalStatisticsPacket::OperationalStatisticsPacket(const OperationalStatisticsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packetid_, &from.packetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstimestamp_) -
    reinterpret_cast<char*>(&packetid_)) + sizeof(mstimestamp_));
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticsPacket)
}

void OperationalStatisticsPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&packetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstimestamp_) -
      reinterpret_cast<char*>(&packetid_)) + sizeof(mstimestamp_));
}

OperationalStatisticsPacket::~OperationalStatisticsPacket() {
  // @@protoc_insertion_point(destructor:OperationalStatisticsPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationalStatisticsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OperationalStatisticsPacket::ArenaDtor(void* object) {
  OperationalStatisticsPacket* _this = reinterpret_cast< OperationalStatisticsPacket* >(object);
  (void)_this;
}
void OperationalStatisticsPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationalStatisticsPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationalStatisticsPacket& OperationalStatisticsPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationalStatisticsPacket_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void OperationalStatisticsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticsPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstimestamp_) -
        reinterpret_cast<char*>(&packetid_)) + sizeof(mstimestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalStatisticsPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 packetid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packetid(&has_bits);
          packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mstimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstimestamp(&has_bits);
          mstimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OperationalStatisticElement values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationalStatisticsPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticsPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetid(), target);
  }

  // optional int32 mstimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mstimestamp(), target);
  }

  // repeated .OperationalStatisticElement values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticsPacket)
  return target;
}

size_t OperationalStatisticsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticsPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OperationalStatisticElement values = 3;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 packetid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_packetid());
    }

    // optional int32 mstimestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstimestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationalStatisticsPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperationalStatisticsPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationalStatisticsPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationalStatisticsPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperationalStatisticsPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperationalStatisticsPacket)
    MergeFrom(*source);
  }
}

void OperationalStatisticsPacket::MergeFrom(const OperationalStatisticsPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticsPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packetid_ = from.packetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstimestamp_ = from.mstimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationalStatisticsPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperationalStatisticsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticsPacket::CopyFrom(const OperationalStatisticsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticsPacket::IsInitialized() const {
  return true;
}

void OperationalStatisticsPacket::InternalSwap(OperationalStatisticsPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationalStatisticsPacket, mstimestamp_)
      + sizeof(OperationalStatisticsPacket::mstimestamp_)
      - PROTOBUF_FIELD_OFFSET(OperationalStatisticsPacket, packetid_)>(
          reinterpret_cast<char*>(&packetid_),
          reinterpret_cast<char*>(&other->packetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalStatisticsPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerRankingInfo::InitAsDefaultInstance() {
}
class PlayerRankingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerRankingInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_control(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

PlayerRankingInfo::PlayerRankingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerRankingInfo)
}
PlayerRankingInfo::PlayerRankingInfo(const PlayerRankingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tv_control_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(tv_control_));
  // @@protoc_insertion_point(copy_constructor:PlayerRankingInfo)
}

void PlayerRankingInfo::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tv_control_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(tv_control_));
}

PlayerRankingInfo::~PlayerRankingInfo() {
  // @@protoc_insertion_point(destructor:PlayerRankingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerRankingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerRankingInfo::ArenaDtor(void* object) {
  PlayerRankingInfo* _this = reinterpret_cast< PlayerRankingInfo* >(object);
  (void)_this;
}
void PlayerRankingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerRankingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerRankingInfo& PlayerRankingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerRankingInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerRankingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerRankingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_control_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(tv_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRankingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rank_id(&has_bits);
          rank_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rank_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rank_change(&has_bits);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_type_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rank_type_id(&has_bits);
          rank_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_control = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tv_control(&has_bits);
          tv_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerRankingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerRankingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wins(), target);
  }

  // optional float rank_change = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rank_change(), target);
  }

  // optional uint32 rank_type_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rank_type_id(), target);
  }

  // optional uint32 tv_control = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tv_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerRankingInfo)
  return target;
}

size_t PlayerRankingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerRankingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 rank_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_id());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional float rank_change = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 rank_type_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_type_id());
    }

    // optional uint32 tv_control = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_control());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRankingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerRankingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRankingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerRankingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerRankingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerRankingInfo)
    MergeFrom(*source);
  }
}

void PlayerRankingInfo::MergeFrom(const PlayerRankingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerRankingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_id_ = from.rank_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_type_id_ = from.rank_type_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_control_ = from.tv_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerRankingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerRankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRankingInfo::CopyFrom(const PlayerRankingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerRankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankingInfo::IsInitialized() const {
  return true;
}

void PlayerRankingInfo::InternalSwap(PlayerRankingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerRankingInfo, tv_control_)
      + sizeof(PlayerRankingInfo::tv_control_)
      - PROTOBUF_FIELD_OFFSET(PlayerRankingInfo, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRankingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerCommendationInfo::InitAsDefaultInstance() {
}
class PlayerCommendationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerCommendationInfo>()._has_bits_);
  static void set_has_cmd_friendly(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd_teaching(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerCommendationInfo::PlayerCommendationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerCommendationInfo)
}
PlayerCommendationInfo::PlayerCommendationInfo(const PlayerCommendationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cmd_friendly_, &from.cmd_friendly_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_leader_) -
    reinterpret_cast<char*>(&cmd_friendly_)) + sizeof(cmd_leader_));
  // @@protoc_insertion_point(copy_constructor:PlayerCommendationInfo)
}

void PlayerCommendationInfo::SharedCtor() {
  ::memset(&cmd_friendly_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_leader_) -
      reinterpret_cast<char*>(&cmd_friendly_)) + sizeof(cmd_leader_));
}

PlayerCommendationInfo::~PlayerCommendationInfo() {
  // @@protoc_insertion_point(destructor:PlayerCommendationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerCommendationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerCommendationInfo::ArenaDtor(void* object) {
  PlayerCommendationInfo* _this = reinterpret_cast< PlayerCommendationInfo* >(object);
  (void)_this;
}
void PlayerCommendationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerCommendationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCommendationInfo& PlayerCommendationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerCommendationInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerCommendationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerCommendationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cmd_friendly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_leader_) -
        reinterpret_cast<char*>(&cmd_friendly_)) + sizeof(cmd_leader_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCommendationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cmd_friendly = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cmd_friendly(&has_bits);
          cmd_friendly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cmd_teaching = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cmd_teaching(&has_bits);
          cmd_teaching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cmd_leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cmd_leader(&has_bits);
          cmd_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerCommendationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerCommendationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cmd_friendly = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmd_friendly(), target);
  }

  // optional uint32 cmd_teaching = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cmd_teaching(), target);
  }

  // optional uint32 cmd_leader = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cmd_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerCommendationInfo)
  return target;
}

size_t PlayerCommendationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerCommendationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 cmd_friendly = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmd_friendly());
    }

    // optional uint32 cmd_teaching = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmd_teaching());
    }

    // optional uint32 cmd_leader = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmd_leader());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCommendationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerCommendationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCommendationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerCommendationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerCommendationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerCommendationInfo)
    MergeFrom(*source);
  }
}

void PlayerCommendationInfo::MergeFrom(const PlayerCommendationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerCommendationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cmd_friendly_ = from.cmd_friendly_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_teaching_ = from.cmd_teaching_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_leader_ = from.cmd_leader_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCommendationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerCommendationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommendationInfo::CopyFrom(const PlayerCommendationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerCommendationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommendationInfo::IsInitialized() const {
  return true;
}

void PlayerCommendationInfo::InternalSwap(PlayerCommendationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerCommendationInfo, cmd_leader_)
      + sizeof(PlayerCommendationInfo::cmd_leader_)
      - PROTOBUF_FIELD_OFFSET(PlayerCommendationInfo, cmd_friendly_)>(
          reinterpret_cast<char*>(&cmd_friendly_),
          reinterpret_cast<char*>(&other->cmd_friendly_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCommendationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerMedalsInfo::InitAsDefaultInstance() {
}
class PlayerMedalsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerMedalsInfo>()._has_bits_);
  static void set_has_featured_display_item_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerMedalsInfo::PlayerMedalsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_items_defidx_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerMedalsInfo)
}
PlayerMedalsInfo::PlayerMedalsInfo(const PlayerMedalsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_items_defidx_(from.display_items_defidx_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  featured_display_item_defidx_ = from.featured_display_item_defidx_;
  // @@protoc_insertion_point(copy_constructor:PlayerMedalsInfo)
}

void PlayerMedalsInfo::SharedCtor() {
  featured_display_item_defidx_ = 0u;
}

PlayerMedalsInfo::~PlayerMedalsInfo() {
  // @@protoc_insertion_point(destructor:PlayerMedalsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerMedalsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerMedalsInfo::ArenaDtor(void* object) {
  PlayerMedalsInfo* _this = reinterpret_cast< PlayerMedalsInfo* >(object);
  (void)_this;
}
void PlayerMedalsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerMedalsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerMedalsInfo& PlayerMedalsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerMedalsInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerMedalsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerMedalsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_items_defidx_.Clear();
  featured_display_item_defidx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMedalsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 display_items_defidx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_display_items_defidx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_display_items_defidx(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 featured_display_item_defidx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_featured_display_item_defidx(&has_bits);
          featured_display_item_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerMedalsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerMedalsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 display_items_defidx = 7;
  for (int i = 0, n = this->_internal_display_items_defidx_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_display_items_defidx(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 featured_display_item_defidx = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_featured_display_item_defidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerMedalsInfo)
  return target;
}

size_t PlayerMedalsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerMedalsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 display_items_defidx = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->display_items_defidx_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_display_items_defidx_size());
    total_size += data_size;
  }

  // optional uint32 featured_display_item_defidx = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_featured_display_item_defidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerMedalsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerMedalsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMedalsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerMedalsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerMedalsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerMedalsInfo)
    MergeFrom(*source);
  }
}

void PlayerMedalsInfo::MergeFrom(const PlayerMedalsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerMedalsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_items_defidx_.MergeFrom(from.display_items_defidx_);
  if (from._internal_has_featured_display_item_defidx()) {
    _internal_set_featured_display_item_defidx(from._internal_featured_display_item_defidx());
  }
}

void PlayerMedalsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerMedalsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMedalsInfo::CopyFrom(const PlayerMedalsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerMedalsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMedalsInfo::IsInitialized() const {
  return true;
}

void PlayerMedalsInfo::InternalSwap(PlayerMedalsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_items_defidx_.InternalSwap(&other->display_items_defidx_);
  swap(featured_display_item_defidx_, other->featured_display_item_defidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMedalsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountActivity::InitAsDefaultInstance() {
}
class AccountActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountActivity>()._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AccountActivity::AccountActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AccountActivity)
}
AccountActivity::AccountActivity(const AccountActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activity_, &from.activity_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_) -
    reinterpret_cast<char*>(&activity_)) + sizeof(map_));
  // @@protoc_insertion_point(copy_constructor:AccountActivity)
}

void AccountActivity::SharedCtor() {
  ::memset(&activity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&activity_)) + sizeof(map_));
}

AccountActivity::~AccountActivity() {
  // @@protoc_insertion_point(destructor:AccountActivity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountActivity::ArenaDtor(void* object) {
  AccountActivity* _this = reinterpret_cast< AccountActivity* >(object);
  (void)_this;
}
void AccountActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountActivity& AccountActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountActivity_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void AccountActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_) -
        reinterpret_cast<char*>(&activity_)) + sizeof(map_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_map(&has_bits);
          map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_activity(), target);
  }

  // optional uint32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // optional uint32 map = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_matchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountActivity)
  return target;
}

size_t AccountActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 activity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activity());
    }

    // optional uint32 mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mode());
    }

    // optional uint64 matchid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 map = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_map());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountActivity)
    MergeFrom(*source);
  }
}

void AccountActivity::MergeFrom(const AccountActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000008u) {
      map_ = from.map_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountActivity::CopyFrom(const AccountActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountActivity::IsInitialized() const {
  return true;
}

void AccountActivity::InternalSwap(AccountActivity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountActivity, map_)
      + sizeof(AccountActivity::map_)
      - PROTOBUF_FIELD_OFFSET(AccountActivity, activity_)>(
          reinterpret_cast<char*>(&activity_),
          reinterpret_cast<char*>(&other->activity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TournamentMatchSetup::InitAsDefaultInstance() {
}
class TournamentMatchSetup::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentMatchSetup>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id_t(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_stage_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TournamentMatchSetup::TournamentMatchSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentMatchSetup)
}
TournamentMatchSetup::TournamentMatchSetup(const TournamentMatchSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_stage_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
  // @@protoc_insertion_point(copy_constructor:TournamentMatchSetup)
}

void TournamentMatchSetup::SharedCtor() {
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_stage_id_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
}

TournamentMatchSetup::~TournamentMatchSetup() {
  // @@protoc_insertion_point(destructor:TournamentMatchSetup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TournamentMatchSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TournamentMatchSetup::ArenaDtor(void* object) {
  TournamentMatchSetup* _this = reinterpret_cast< TournamentMatchSetup* >(object);
  (void)_this;
}
void TournamentMatchSetup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TournamentMatchSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TournamentMatchSetup& TournamentMatchSetup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TournamentMatchSetup_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void TournamentMatchSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentMatchSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_stage_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(event_stage_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentMatchSetup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_ct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id_ct(&has_bits);
          team_id_ct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id_t(&has_bits);
          team_id_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_stage_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_stage_id(&has_bits);
          event_stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TournamentMatchSetup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentMatchSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id_ct(), target);
  }

  // optional int32 team_id_t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_id_t(), target);
  }

  // optional int32 event_stage_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_event_stage_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentMatchSetup)
  return target;
}

size_t TournamentMatchSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentMatchSetup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_id());
    }

    // optional int32 team_id_ct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_ct());
    }

    // optional int32 team_id_t = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_t());
    }

    // optional int32 event_stage_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_stage_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TournamentMatchSetup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentMatchSetup)
  GOOGLE_DCHECK_NE(&from, this);
  const TournamentMatchSetup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TournamentMatchSetup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentMatchSetup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentMatchSetup)
    MergeFrom(*source);
  }
}

void TournamentMatchSetup::MergeFrom(const TournamentMatchSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentMatchSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ct_ = from.team_id_ct_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_t_ = from.team_id_t_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_stage_id_ = from.event_stage_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TournamentMatchSetup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentMatchSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentMatchSetup::CopyFrom(const TournamentMatchSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentMatchSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentMatchSetup::IsInitialized() const {
  return true;
}

void TournamentMatchSetup::InternalSwap(TournamentMatchSetup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentMatchSetup, event_stage_id_)
      + sizeof(TournamentMatchSetup::event_stage_id_)
      - PROTOBUF_FIELD_OFFSET(TournamentMatchSetup, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentMatchSetup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerHltvInfo::InitAsDefaultInstance() {
}
class ServerHltvInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerHltvInfo>()._has_bits_);
  static void set_has_tv_udp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tv_watch_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tv_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tv_proxies(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tv_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_mapgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tv_master_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tv_local_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tv_local_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tv_local_proxies(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tv_relay_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tv_relay_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tv_relay_proxies(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tv_relay_address(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tv_relay_port(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tv_relay_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

ServerHltvInfo::ServerHltvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerHltvInfo)
}
ServerHltvInfo::ServerHltvInfo(const ServerHltvInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_mapgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_mapgroup()) {
    game_mapgroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_mapgroup(),
      GetArena());
  }
  game_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_map()) {
    game_map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_map(),
      GetArena());
  }
  ::memcpy(&tv_watch_key_, &from.tv_watch_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&tv_watch_key_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:ServerHltvInfo)
}

void ServerHltvInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto.base);
  game_mapgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tv_watch_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&tv_watch_key_)) + sizeof(flags_));
}

ServerHltvInfo::~ServerHltvInfo() {
  // @@protoc_insertion_point(destructor:ServerHltvInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerHltvInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_mapgroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerHltvInfo::ArenaDtor(void* object) {
  ServerHltvInfo* _this = reinterpret_cast< ServerHltvInfo* >(object);
  (void)_this;
}
void ServerHltvInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerHltvInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerHltvInfo& ServerHltvInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerHltvInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void ServerHltvInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerHltvInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_mapgroup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&tv_watch_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_time_) -
        reinterpret_cast<char*>(&tv_watch_key_)) + sizeof(tv_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_relay_proxies_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(tv_relay_proxies_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&tv_relay_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&tv_relay_address_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerHltvInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tv_udp_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tv_udp_port(&has_bits);
          tv_udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tv_watch_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tv_watch_key(&has_bits);
          tv_watch_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tv_slots(&has_bits);
          tv_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_clients = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tv_clients(&has_bits);
          tv_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_proxies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tv_proxies(&has_bits);
          tv_proxies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tv_time(&has_bits);
          tv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_mapgroup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_game_mapgroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerHltvInfo.game_mapgroup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_game_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerHltvInfo.game_map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tv_master_steamid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tv_master_steamid(&has_bits);
          tv_master_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_local_slots = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tv_local_slots(&has_bits);
          tv_local_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_local_clients = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tv_local_clients(&has_bits);
          tv_local_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_local_proxies = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tv_local_proxies(&has_bits);
          tv_local_proxies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_relay_slots = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tv_relay_slots(&has_bits);
          tv_relay_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_relay_clients = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tv_relay_clients(&has_bits);
          tv_relay_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_relay_proxies = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tv_relay_proxies(&has_bits);
          tv_relay_proxies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_relay_address = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tv_relay_address(&has_bits);
          tv_relay_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_relay_port = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tv_relay_port(&has_bits);
          tv_relay_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tv_relay_steamid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tv_relay_steamid(&has_bits);
          tv_relay_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerHltvInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerHltvInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tv_udp_port = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tv_udp_port(), target);
  }

  // optional uint64 tv_watch_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tv_watch_key(), target);
  }

  // optional uint32 tv_slots = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tv_slots(), target);
  }

  // optional uint32 tv_clients = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tv_clients(), target);
  }

  // optional uint32 tv_proxies = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tv_proxies(), target);
  }

  // optional uint32 tv_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tv_time(), target);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_mapgroup().data(), static_cast<int>(this->_internal_game_mapgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_mapgroup");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_map().data(), static_cast<int>(this->_internal_game_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_map");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_game_map(), target);
  }

  // optional uint64 tv_master_steamid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tv_master_steamid(), target);
  }

  // optional uint32 tv_local_slots = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tv_local_slots(), target);
  }

  // optional uint32 tv_local_clients = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tv_local_clients(), target);
  }

  // optional uint32 tv_local_proxies = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tv_local_proxies(), target);
  }

  // optional uint32 tv_relay_slots = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tv_relay_slots(), target);
  }

  // optional uint32 tv_relay_clients = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_tv_relay_clients(), target);
  }

  // optional uint32 tv_relay_proxies = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tv_relay_proxies(), target);
  }

  // optional uint32 tv_relay_address = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tv_relay_address(), target);
  }

  // optional uint32 tv_relay_port = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tv_relay_port(), target);
  }

  // optional uint64 tv_relay_steamid = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_tv_relay_steamid(), target);
  }

  // optional uint32 flags = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerHltvInfo)
  return target;
}

size_t ServerHltvInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerHltvInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string game_mapgroup = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_mapgroup());
    }

    // optional string game_map = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_map());
    }

    // optional uint64 tv_watch_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tv_watch_key());
    }

    // optional uint32 tv_udp_port = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_udp_port());
    }

    // optional uint32 tv_slots = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_slots());
    }

    // optional uint32 tv_clients = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_clients());
    }

    // optional uint32 tv_proxies = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_proxies());
    }

    // optional uint32 tv_time = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 game_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

    // optional uint64 tv_master_steamid = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tv_master_steamid());
    }

    // optional uint32 tv_local_slots = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_local_slots());
    }

    // optional uint32 tv_local_clients = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_local_clients());
    }

    // optional uint32 tv_local_proxies = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_local_proxies());
    }

    // optional uint32 tv_relay_slots = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_slots());
    }

    // optional uint32 tv_relay_clients = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_clients());
    }

    // optional uint32 tv_relay_proxies = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_proxies());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 tv_relay_address = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_address());
    }

    // optional uint32 tv_relay_port = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_port());
    }

    // optional uint64 tv_relay_steamid = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tv_relay_steamid());
    }

    // optional uint32 flags = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHltvInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerHltvInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerHltvInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerHltvInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerHltvInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerHltvInfo)
    MergeFrom(*source);
  }
}

void ServerHltvInfo::MergeFrom(const ServerHltvInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerHltvInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_mapgroup(from._internal_game_mapgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_map(from._internal_game_map());
    }
    if (cached_has_bits & 0x00000004u) {
      tv_watch_key_ = from.tv_watch_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      tv_udp_port_ = from.tv_udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_slots_ = from.tv_slots_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_clients_ = from.tv_clients_;
    }
    if (cached_has_bits & 0x00000040u) {
      tv_proxies_ = from.tv_proxies_;
    }
    if (cached_has_bits & 0x00000080u) {
      tv_time_ = from.tv_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      tv_master_steamid_ = from.tv_master_steamid_;
    }
    if (cached_has_bits & 0x00000400u) {
      tv_local_slots_ = from.tv_local_slots_;
    }
    if (cached_has_bits & 0x00000800u) {
      tv_local_clients_ = from.tv_local_clients_;
    }
    if (cached_has_bits & 0x00001000u) {
      tv_local_proxies_ = from.tv_local_proxies_;
    }
    if (cached_has_bits & 0x00002000u) {
      tv_relay_slots_ = from.tv_relay_slots_;
    }
    if (cached_has_bits & 0x00004000u) {
      tv_relay_clients_ = from.tv_relay_clients_;
    }
    if (cached_has_bits & 0x00008000u) {
      tv_relay_proxies_ = from.tv_relay_proxies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      tv_relay_address_ = from.tv_relay_address_;
    }
    if (cached_has_bits & 0x00020000u) {
      tv_relay_port_ = from.tv_relay_port_;
    }
    if (cached_has_bits & 0x00040000u) {
      tv_relay_steamid_ = from.tv_relay_steamid_;
    }
    if (cached_has_bits & 0x00080000u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerHltvInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerHltvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHltvInfo::CopyFrom(const ServerHltvInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerHltvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHltvInfo::IsInitialized() const {
  return true;
}

void ServerHltvInfo::InternalSwap(ServerHltvInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_mapgroup_.Swap(&other->game_mapgroup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_map_.Swap(&other->game_map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerHltvInfo, flags_)
      + sizeof(ServerHltvInfo::flags_)
      - PROTOBUF_FIELD_OFFSET(ServerHltvInfo, tv_watch_key_)>(
          reinterpret_cast<char*>(&tv_watch_key_),
          reinterpret_cast<char*>(&other->tv_watch_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHltvInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpAddressMask::InitAsDefaultInstance() {
}
class IpAddressMask::_Internal {
 public:
  using HasBits = decltype(std::declval<IpAddressMask>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

IpAddressMask::IpAddressMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IpAddressMask)
}
IpAddressMask::IpAddressMask(const IpAddressMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&a_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:IpAddressMask)
}

void IpAddressMask::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&a_)) + sizeof(token_));
}

IpAddressMask::~IpAddressMask() {
  // @@protoc_insertion_point(destructor:IpAddressMask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IpAddressMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IpAddressMask::ArenaDtor(void* object) {
  IpAddressMask* _this = reinterpret_cast< IpAddressMask* >(object);
  (void)_this;
}
void IpAddressMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpAddressMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpAddressMask& IpAddressMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpAddressMask_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void IpAddressMask::Clear() {
// @@protoc_insertion_point(message_clear_start:IpAddressMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_) -
        reinterpret_cast<char*>(&a_)) + sizeof(token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpAddressMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_d(&has_bits);
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bits(&has_bits);
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpAddressMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IpAddressMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a(), target);
  }

  // optional uint32 b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_b(), target);
  }

  // optional uint32 c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_c(), target);
  }

  // optional uint32 d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_d(), target);
  }

  // optional uint32 bits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bits(), target);
  }

  // optional uint32 token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IpAddressMask)
  return target;
}

size_t IpAddressMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IpAddressMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a());
    }

    // optional uint32 b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_b());
    }

    // optional uint32 c = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_c());
    }

    // optional uint32 d = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_d());
    }

    // optional uint32 bits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bits());
    }

    // optional uint32 token = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_token());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddressMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IpAddressMask)
  GOOGLE_DCHECK_NE(&from, this);
  const IpAddressMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpAddressMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IpAddressMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IpAddressMask)
    MergeFrom(*source);
  }
}

void IpAddressMask::MergeFrom(const IpAddressMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IpAddressMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000008u) {
      d_ = from.d_;
    }
    if (cached_has_bits & 0x00000010u) {
      bits_ = from.bits_;
    }
    if (cached_has_bits & 0x00000020u) {
      token_ = from.token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpAddressMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IpAddressMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddressMask::CopyFrom(const IpAddressMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IpAddressMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressMask::IsInitialized() const {
  return true;
}

void IpAddressMask::InternalSwap(IpAddressMask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IpAddressMask, token_)
      + sizeof(IpAddressMask::token_)
      - PROTOBUF_FIELD_OFFSET(IpAddressMask, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IpAddressMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgCsgoSteamUserStatChange::InitAsDefaultInstance() {
}
class CMsgCsgoSteamUserStatChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCsgoSteamUserStatChange>()._has_bits_);
  static void set_has_ecsgosteamuserstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCsgoSteamUserStatChange::CMsgCsgoSteamUserStatChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCsgoSteamUserStatChange)
}
CMsgCsgoSteamUserStatChange::CMsgCsgoSteamUserStatChange(const CMsgCsgoSteamUserStatChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ecsgosteamuserstat_, &from.ecsgosteamuserstat_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_) -
    reinterpret_cast<char*>(&ecsgosteamuserstat_)) + sizeof(absolute_));
  // @@protoc_insertion_point(copy_constructor:CMsgCsgoSteamUserStatChange)
}

void CMsgCsgoSteamUserStatChange::SharedCtor() {
  ::memset(&ecsgosteamuserstat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_) -
      reinterpret_cast<char*>(&ecsgosteamuserstat_)) + sizeof(absolute_));
}

CMsgCsgoSteamUserStatChange::~CMsgCsgoSteamUserStatChange() {
  // @@protoc_insertion_point(destructor:CMsgCsgoSteamUserStatChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCsgoSteamUserStatChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCsgoSteamUserStatChange::ArenaDtor(void* object) {
  CMsgCsgoSteamUserStatChange* _this = reinterpret_cast< CMsgCsgoSteamUserStatChange* >(object);
  (void)_this;
}
void CMsgCsgoSteamUserStatChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCsgoSteamUserStatChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCsgoSteamUserStatChange& CMsgCsgoSteamUserStatChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgCsgoSteamUserStatChange_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCsgoSteamUserStatChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCsgoSteamUserStatChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ecsgosteamuserstat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&absolute_) -
        reinterpret_cast<char*>(&ecsgosteamuserstat_)) + sizeof(absolute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCsgoSteamUserStatChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ecsgosteamuserstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ecsgosteamuserstat(&has_bits);
          ecsgosteamuserstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_absolute(&has_bits);
          absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCsgoSteamUserStatChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCsgoSteamUserStatChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ecsgosteamuserstat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ecsgosteamuserstat(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  // optional bool absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCsgoSteamUserStatChange)
  return target;
}

size_t CMsgCsgoSteamUserStatChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCsgoSteamUserStatChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ecsgosteamuserstat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ecsgosteamuserstat());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_delta());
    }

    // optional bool absolute = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCsgoSteamUserStatChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCsgoSteamUserStatChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCsgoSteamUserStatChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCsgoSteamUserStatChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCsgoSteamUserStatChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCsgoSteamUserStatChange)
    MergeFrom(*source);
  }
}

void CMsgCsgoSteamUserStatChange::MergeFrom(const CMsgCsgoSteamUserStatChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCsgoSteamUserStatChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ecsgosteamuserstat_ = from.ecsgosteamuserstat_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      absolute_ = from.absolute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCsgoSteamUserStatChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCsgoSteamUserStatChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCsgoSteamUserStatChange::CopyFrom(const CMsgCsgoSteamUserStatChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCsgoSteamUserStatChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCsgoSteamUserStatChange::IsInitialized() const {
  return true;
}

void CMsgCsgoSteamUserStatChange::InternalSwap(CMsgCsgoSteamUserStatChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCsgoSteamUserStatChange, absolute_)
      + sizeof(CMsgCsgoSteamUserStatChange::absolute_)
      - PROTOBUF_FIELD_OFFSET(CMsgCsgoSteamUserStatChange, ecsgosteamuserstat_)>(
          reinterpret_cast<char*>(&ecsgosteamuserstat_),
          reinterpret_cast<char*>(&other->ecsgosteamuserstat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCsgoSteamUserStatChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XpProgressData::InitAsDefaultInstance() {
}
class XpProgressData::_Internal {
 public:
  using HasBits = decltype(std::declval<XpProgressData>()._has_bits_);
  static void set_has_xp_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

XpProgressData::XpProgressData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:XpProgressData)
}
XpProgressData::XpProgressData(const XpProgressData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xp_points_, &from.xp_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&xp_category_) -
    reinterpret_cast<char*>(&xp_points_)) + sizeof(xp_category_));
  // @@protoc_insertion_point(copy_constructor:XpProgressData)
}

void XpProgressData::SharedCtor() {
  ::memset(&xp_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xp_category_) -
      reinterpret_cast<char*>(&xp_points_)) + sizeof(xp_category_));
}

XpProgressData::~XpProgressData() {
  // @@protoc_insertion_point(destructor:XpProgressData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XpProgressData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XpProgressData::ArenaDtor(void* object) {
  XpProgressData* _this = reinterpret_cast< XpProgressData* >(object);
  (void)_this;
}
void XpProgressData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XpProgressData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XpProgressData& XpProgressData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XpProgressData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void XpProgressData::Clear() {
// @@protoc_insertion_point(message_clear_start:XpProgressData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&xp_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xp_category_) -
        reinterpret_cast<char*>(&xp_points_)) + sizeof(xp_category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XpProgressData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 xp_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_xp_points(&has_bits);
          xp_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 xp_category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_xp_category(&has_bits);
          xp_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XpProgressData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XpProgressData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 xp_points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_xp_points(), target);
  }

  // optional int32 xp_category = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xp_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XpProgressData)
  return target;
}

size_t XpProgressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XpProgressData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 xp_points = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_points());
    }

    // optional int32 xp_category = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_xp_category());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XpProgressData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XpProgressData)
  GOOGLE_DCHECK_NE(&from, this);
  const XpProgressData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XpProgressData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XpProgressData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XpProgressData)
    MergeFrom(*source);
  }
}

void XpProgressData::MergeFrom(const XpProgressData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XpProgressData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      xp_points_ = from.xp_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_category_ = from.xp_category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XpProgressData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XpProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XpProgressData::CopyFrom(const XpProgressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XpProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XpProgressData::IsInitialized() const {
  return true;
}

void XpProgressData::InternalSwap(XpProgressData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XpProgressData, xp_category_)
      + sizeof(XpProgressData::xp_category_)
      - PROTOBUF_FIELD_OFFSET(XpProgressData, xp_points_)>(
          reinterpret_cast<char*>(&xp_points_),
          reinterpret_cast<char*>(&other->xp_points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XpProgressData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchEndItemUpdates::InitAsDefaultInstance() {
}
class MatchEndItemUpdates::_Internal {
 public:
  using HasBits = decltype(std::declval<MatchEndItemUpdates>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_attr_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_attr_delta_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MatchEndItemUpdates::MatchEndItemUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MatchEndItemUpdates)
}
MatchEndItemUpdates::MatchEndItemUpdates(const MatchEndItemUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_attr_delta_value_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(item_attr_delta_value_));
  // @@protoc_insertion_point(copy_constructor:MatchEndItemUpdates)
}

void MatchEndItemUpdates::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_attr_delta_value_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(item_attr_delta_value_));
}

MatchEndItemUpdates::~MatchEndItemUpdates() {
  // @@protoc_insertion_point(destructor:MatchEndItemUpdates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchEndItemUpdates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchEndItemUpdates::ArenaDtor(void* object) {
  MatchEndItemUpdates* _this = reinterpret_cast< MatchEndItemUpdates* >(object);
  (void)_this;
}
void MatchEndItemUpdates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchEndItemUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchEndItemUpdates& MatchEndItemUpdates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchEndItemUpdates_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void MatchEndItemUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchEndItemUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_attr_delta_value_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(item_attr_delta_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchEndItemUpdates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_attr_defidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_attr_defidx(&has_bits);
          item_attr_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_attr_delta_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_attr_delta_value(&has_bits);
          item_attr_delta_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchEndItemUpdates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchEndItemUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 item_attr_defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_attr_defidx(), target);
  }

  // optional uint32 item_attr_delta_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_attr_delta_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchEndItemUpdates)
  return target;
}

size_t MatchEndItemUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchEndItemUpdates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 item_attr_defidx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_attr_defidx());
    }

    // optional uint32 item_attr_delta_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_attr_delta_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchEndItemUpdates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchEndItemUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchEndItemUpdates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchEndItemUpdates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchEndItemUpdates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchEndItemUpdates)
    MergeFrom(*source);
  }
}

void MatchEndItemUpdates::MergeFrom(const MatchEndItemUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchEndItemUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_attr_defidx_ = from.item_attr_defidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_attr_delta_value_ = from.item_attr_delta_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatchEndItemUpdates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchEndItemUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchEndItemUpdates::CopyFrom(const MatchEndItemUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchEndItemUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchEndItemUpdates::IsInitialized() const {
  return true;
}

void MatchEndItemUpdates::InternalSwap(MatchEndItemUpdates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchEndItemUpdates, item_attr_delta_value_)
      + sizeof(MatchEndItemUpdates::item_attr_delta_value_)
      - PROTOBUF_FIELD_OFFSET(MatchEndItemUpdates, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchEndItemUpdates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScoreLeaderboardData_Entry::InitAsDefaultInstance() {
}
class ScoreLeaderboardData_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreLeaderboardData_Entry>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ScoreLeaderboardData.Entry)
}
ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData.Entry)
}

void ScoreLeaderboardData_Entry::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(val_));
}

ScoreLeaderboardData_Entry::~ScoreLeaderboardData_Entry() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScoreLeaderboardData_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScoreLeaderboardData_Entry::ArenaDtor(void* object) {
  ScoreLeaderboardData_Entry* _this = reinterpret_cast< ScoreLeaderboardData_Entry* >(object);
  (void)_this;
}
void ScoreLeaderboardData_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScoreLeaderboardData_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoreLeaderboardData_Entry& ScoreLeaderboardData_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoreLeaderboardData_Entry_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void ScoreLeaderboardData_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreLeaderboardData_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoreLeaderboardData_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag(), target);
  }

  // optional uint32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData.Entry)
  return target;
}

size_t ScoreLeaderboardData_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tag());
    }

    // optional uint32 val = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreLeaderboardData_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreLeaderboardData.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreLeaderboardData_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScoreLeaderboardData_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreLeaderboardData.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreLeaderboardData.Entry)
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_Entry::MergeFrom(const ScoreLeaderboardData_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoreLeaderboardData_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreLeaderboardData.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_Entry::CopyFrom(const ScoreLeaderboardData_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_Entry::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData_Entry::InternalSwap(ScoreLeaderboardData_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData_Entry, val_)
      + sizeof(ScoreLeaderboardData_Entry::val_)
      - PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData_Entry, tag_)>(
          reinterpret_cast<char*>(&tag_),
          reinterpret_cast<char*>(&other->tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreLeaderboardData_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScoreLeaderboardData_AccountEntries::InitAsDefaultInstance() {
}
class ScoreLeaderboardData_AccountEntries::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreLeaderboardData_AccountEntries>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ScoreLeaderboardData.AccountEntries)
}
ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData.AccountEntries)
}

void ScoreLeaderboardData_AccountEntries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto.base);
  accountid_ = 0u;
}

ScoreLeaderboardData_AccountEntries::~ScoreLeaderboardData_AccountEntries() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData.AccountEntries)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScoreLeaderboardData_AccountEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScoreLeaderboardData_AccountEntries::ArenaDtor(void* object) {
  ScoreLeaderboardData_AccountEntries* _this = reinterpret_cast< ScoreLeaderboardData_AccountEntries* >(object);
  (void)_this;
}
void ScoreLeaderboardData_AccountEntries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScoreLeaderboardData_AccountEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData_AccountEntries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoreLeaderboardData_AccountEntries_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void ScoreLeaderboardData_AccountEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData.AccountEntries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreLeaderboardData_AccountEntries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ScoreLeaderboardData.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoreLeaderboardData_AccountEntries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData.AccountEntries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData.AccountEntries)
  return target;
}

size_t ScoreLeaderboardData_AccountEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData.AccountEntries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 accountid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreLeaderboardData.AccountEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreLeaderboardData_AccountEntries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScoreLeaderboardData_AccountEntries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreLeaderboardData.AccountEntries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreLeaderboardData.AccountEntries)
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ScoreLeaderboardData_AccountEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData.AccountEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_accountid()) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreLeaderboardData.AccountEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ScoreLeaderboardData_AccountEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData.AccountEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_AccountEntries::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData_AccountEntries::InternalSwap(ScoreLeaderboardData_AccountEntries* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreLeaderboardData_AccountEntries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScoreLeaderboardData::InitAsDefaultInstance() {
}
class ScoreLeaderboardData::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreLeaderboardData>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScoreLeaderboardData::ScoreLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accountentries_(arena),
  matchentries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ScoreLeaderboardData)
}
ScoreLeaderboardData::ScoreLeaderboardData(const ScoreLeaderboardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      accountentries_(from.accountentries_),
      matchentries_(from.matchentries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData)
}

void ScoreLeaderboardData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(score_));
}

ScoreLeaderboardData::~ScoreLeaderboardData() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScoreLeaderboardData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScoreLeaderboardData::ArenaDtor(void* object) {
  ScoreLeaderboardData* _this = reinterpret_cast< ScoreLeaderboardData* >(object);
  (void)_this;
}
void ScoreLeaderboardData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScoreLeaderboardData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoreLeaderboardData& ScoreLeaderboardData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoreLeaderboardData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void ScoreLeaderboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountentries_.Clear();
  matchentries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreLeaderboardData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accountentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ScoreLeaderboardData.Entry matchentries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matchentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoreLeaderboardData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accountentries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_accountentries(i), target, stream);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matchentries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_matchentries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData)
  return target;
}

size_t ScoreLeaderboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  total_size += 1UL * this->_internal_accountentries_size();
  for (const auto& msg : this->accountentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  total_size += 1UL * this->_internal_matchentries_size();
  for (const auto& msg : this->matchentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_quest_id());
    }

    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoreLeaderboardData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreLeaderboardData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScoreLeaderboardData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScoreLeaderboardData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScoreLeaderboardData)
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData::MergeFrom(const ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accountentries_.MergeFrom(from.accountentries_);
  matchentries_.MergeFrom(from.matchentries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoreLeaderboardData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData::CopyFrom(const ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData::InternalSwap(ScoreLeaderboardData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accountentries_.InternalSwap(&other->accountentries_);
  matchentries_.InternalSwap(&other->matchentries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData, score_)
      + sizeof(ScoreLeaderboardData::score_)
      - PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreLeaderboardData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerQuestData_QuestItemData::InitAsDefaultInstance() {
}
class PlayerQuestData_QuestItemData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerQuestData_QuestItemData>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quest_normal_points_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quest_bonus_points_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerQuestData.QuestItemData)
}
PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(const PlayerQuestData_QuestItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quest_bonus_points_earned_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_bonus_points_earned_));
  // @@protoc_insertion_point(copy_constructor:PlayerQuestData.QuestItemData)
}

void PlayerQuestData_QuestItemData::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quest_bonus_points_earned_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_bonus_points_earned_));
}

PlayerQuestData_QuestItemData::~PlayerQuestData_QuestItemData() {
  // @@protoc_insertion_point(destructor:PlayerQuestData.QuestItemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerQuestData_QuestItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerQuestData_QuestItemData::ArenaDtor(void* object) {
  PlayerQuestData_QuestItemData* _this = reinterpret_cast< PlayerQuestData_QuestItemData* >(object);
  (void)_this;
}
void PlayerQuestData_QuestItemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerQuestData_QuestItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerQuestData_QuestItemData& PlayerQuestData_QuestItemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerQuestData_QuestItemData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerQuestData_QuestItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerQuestData.QuestItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quest_bonus_points_earned_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_bonus_points_earned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerQuestData_QuestItemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 quest_normal_points_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quest_normal_points_earned(&has_bits);
          quest_normal_points_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 quest_bonus_points_earned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_quest_bonus_points_earned(&has_bits);
          quest_bonus_points_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerQuestData_QuestItemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerQuestData.QuestItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  // optional int32 quest_normal_points_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quest_normal_points_earned(), target);
  }

  // optional int32 quest_bonus_points_earned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_quest_bonus_points_earned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerQuestData.QuestItemData)
  return target;
}

size_t PlayerQuestData_QuestItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerQuestData.QuestItemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_quest_id());
    }

    // optional int32 quest_normal_points_earned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quest_normal_points_earned());
    }

    // optional int32 quest_bonus_points_earned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quest_bonus_points_earned());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerQuestData_QuestItemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerQuestData.QuestItemData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuestData_QuestItemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerQuestData_QuestItemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerQuestData.QuestItemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerQuestData.QuestItemData)
    MergeFrom(*source);
  }
}

void PlayerQuestData_QuestItemData::MergeFrom(const PlayerQuestData_QuestItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerQuestData.QuestItemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quest_normal_points_earned_ = from.quest_normal_points_earned_;
    }
    if (cached_has_bits & 0x00000004u) {
      quest_bonus_points_earned_ = from.quest_bonus_points_earned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerQuestData_QuestItemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerQuestData.QuestItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuestData_QuestItemData::CopyFrom(const PlayerQuestData_QuestItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerQuestData.QuestItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData_QuestItemData::IsInitialized() const {
  return true;
}

void PlayerQuestData_QuestItemData::InternalSwap(PlayerQuestData_QuestItemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerQuestData_QuestItemData, quest_bonus_points_earned_)
      + sizeof(PlayerQuestData_QuestItemData::quest_bonus_points_earned_)
      - PROTOBUF_FIELD_OFFSET(PlayerQuestData_QuestItemData, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerQuestData_QuestItemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerQuestData::InitAsDefaultInstance() {
}
class PlayerQuestData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerQuestData>()._has_bits_);
  static void set_has_quester_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mm_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operation_points_eligible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlayerQuestData::PlayerQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quest_item_data_(arena),
  xp_progress_data_(arena),
  item_updates_(arena),
  userstatchanges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerQuestData)
}
PlayerQuestData::PlayerQuestData(const PlayerQuestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      quest_item_data_(from.quest_item_data_),
      xp_progress_data_(from.xp_progress_data_),
      item_updates_(from.item_updates_),
      userstatchanges_(from.userstatchanges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quester_account_id_, &from.quester_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_points_eligible_) -
    reinterpret_cast<char*>(&quester_account_id_)) + sizeof(operation_points_eligible_));
  // @@protoc_insertion_point(copy_constructor:PlayerQuestData)
}

void PlayerQuestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&quester_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_points_eligible_) -
      reinterpret_cast<char*>(&quester_account_id_)) + sizeof(operation_points_eligible_));
}

PlayerQuestData::~PlayerQuestData() {
  // @@protoc_insertion_point(destructor:PlayerQuestData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerQuestData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerQuestData::ArenaDtor(void* object) {
  PlayerQuestData* _this = reinterpret_cast< PlayerQuestData* >(object);
  (void)_this;
}
void PlayerQuestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerQuestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerQuestData& PlayerQuestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerQuestData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerQuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerQuestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quest_item_data_.Clear();
  xp_progress_data_.Clear();
  item_updates_.Clear();
  userstatchanges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&quester_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_points_eligible_) -
        reinterpret_cast<char*>(&quester_account_id_)) + sizeof(operation_points_eligible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerQuestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 quester_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quester_account_id(&has_bits);
          quester_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quest_item_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .XpProgressData xp_progress_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_progress_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 time_played = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_played(&has_bits);
          time_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mm_game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mm_game_mode(&has_bits);
          mm_game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MatchEndItemUpdates item_updates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool operation_points_eligible = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_operation_points_eligible(&has_bits);
          operation_points_eligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgCsgoSteamUserStatChange userstatchanges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userstatchanges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerQuestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerQuestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quester_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quester_account_id(), target);
  }

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quest_item_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_quest_item_data(i), target, stream);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_xp_progress_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_xp_progress_data(i), target, stream);
  }

  // optional uint32 time_played = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_played(), target);
  }

  // optional uint32 mm_game_mode = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mm_game_mode(), target);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_item_updates(i), target, stream);
  }

  // optional bool operation_points_eligible = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_operation_points_eligible(), target);
  }

  // repeated .CMsgCsgoSteamUserStatChange userstatchanges = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_userstatchanges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_userstatchanges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerQuestData)
  return target;
}

size_t PlayerQuestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerQuestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  total_size += 1UL * this->_internal_quest_item_data_size();
  for (const auto& msg : this->quest_item_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  total_size += 1UL * this->_internal_xp_progress_data_size();
  for (const auto& msg : this->xp_progress_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  total_size += 1UL * this->_internal_item_updates_size();
  for (const auto& msg : this->item_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgCsgoSteamUserStatChange userstatchanges = 8;
  total_size += 1UL * this->_internal_userstatchanges_size();
  for (const auto& msg : this->userstatchanges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 quester_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quester_account_id());
    }

    // optional uint32 time_played = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_played());
    }

    // optional uint32 mm_game_mode = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mm_game_mode());
    }

    // optional bool operation_points_eligible = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerQuestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerQuestData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerQuestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerQuestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerQuestData)
    MergeFrom(*source);
  }
}

void PlayerQuestData::MergeFrom(const PlayerQuestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerQuestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quest_item_data_.MergeFrom(from.quest_item_data_);
  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  item_updates_.MergeFrom(from.item_updates_);
  userstatchanges_.MergeFrom(from.userstatchanges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      quester_account_id_ = from.quester_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_played_ = from.time_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      mm_game_mode_ = from.mm_game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      operation_points_eligible_ = from.operation_points_eligible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerQuestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuestData::CopyFrom(const PlayerQuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData::IsInitialized() const {
  return true;
}

void PlayerQuestData::InternalSwap(PlayerQuestData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quest_item_data_.InternalSwap(&other->quest_item_data_);
  xp_progress_data_.InternalSwap(&other->xp_progress_data_);
  item_updates_.InternalSwap(&other->item_updates_);
  userstatchanges_.InternalSwap(&other->userstatchanges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerQuestData, operation_points_eligible_)
      + sizeof(PlayerQuestData::operation_points_eligible_)
      - PROTOBUF_FIELD_OFFSET(PlayerQuestData, quester_account_id_)>(
          reinterpret_cast<char*>(&quester_account_id_),
          reinterpret_cast<char*>(&other->quester_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerQuestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGC_ServerQuestUpdateData::InitAsDefaultInstance() {
  ::_CMsgGC_ServerQuestUpdateData_default_instance_._instance.get_mutable()->missionlbsdata_ = const_cast< ::ScoreLeaderboardData*>(
      ::ScoreLeaderboardData::internal_default_instance());
}
class CMsgGC_ServerQuestUpdateData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_ServerQuestUpdateData>()._has_bits_);
  static void set_has_binary_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mm_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ScoreLeaderboardData& missionlbsdata(const CMsgGC_ServerQuestUpdateData* msg);
  static void set_has_missionlbsdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ScoreLeaderboardData&
CMsgGC_ServerQuestUpdateData::_Internal::missionlbsdata(const CMsgGC_ServerQuestUpdateData* msg) {
  return *msg->missionlbsdata_;
}
CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_quest_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_ServerQuestUpdateData)
}
CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(const CMsgGC_ServerQuestUpdateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_quest_data_(from.player_quest_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  binary_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_binary_data()) {
    binary_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_binary_data(),
      GetArena());
  }
  if (from._internal_has_missionlbsdata()) {
    missionlbsdata_ = new ::ScoreLeaderboardData(*from.missionlbsdata_);
  } else {
    missionlbsdata_ = nullptr;
  }
  mm_game_mode_ = from.mm_game_mode_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_ServerQuestUpdateData)
}

void CMsgGC_ServerQuestUpdateData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto.base);
  binary_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&missionlbsdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mm_game_mode_) -
      reinterpret_cast<char*>(&missionlbsdata_)) + sizeof(mm_game_mode_));
}

CMsgGC_ServerQuestUpdateData::~CMsgGC_ServerQuestUpdateData() {
  // @@protoc_insertion_point(destructor:CMsgGC_ServerQuestUpdateData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_ServerQuestUpdateData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  binary_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete missionlbsdata_;
}

void CMsgGC_ServerQuestUpdateData::ArenaDtor(void* object) {
  CMsgGC_ServerQuestUpdateData* _this = reinterpret_cast< CMsgGC_ServerQuestUpdateData* >(object);
  (void)_this;
}
void CMsgGC_ServerQuestUpdateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_ServerQuestUpdateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGC_ServerQuestUpdateData& CMsgGC_ServerQuestUpdateData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGC_ServerQuestUpdateData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGC_ServerQuestUpdateData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_ServerQuestUpdateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_quest_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      binary_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(missionlbsdata_ != nullptr);
      missionlbsdata_->Clear();
    }
  }
  mm_game_mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_ServerQuestUpdateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlayerQuestData player_quest_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_quest_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes binary_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_binary_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mm_game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mm_game_mode(&has_bits);
          mm_game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ScoreLeaderboardData missionlbsdata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_missionlbsdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_ServerQuestUpdateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_ServerQuestUpdateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerQuestData player_quest_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_quest_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_quest_data(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes binary_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_binary_data(), target);
  }

  // optional uint32 mm_game_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mm_game_mode(), target);
  }

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::missionlbsdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_ServerQuestUpdateData)
  return target;
}

size_t CMsgGC_ServerQuestUpdateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_ServerQuestUpdateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerQuestData player_quest_data = 1;
  total_size += 1UL * this->_internal_player_quest_data_size();
  for (const auto& msg : this->player_quest_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes binary_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_data());
    }

    // optional .ScoreLeaderboardData missionlbsdata = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *missionlbsdata_);
    }

    // optional uint32 mm_game_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mm_game_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_ServerQuestUpdateData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_ServerQuestUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_ServerQuestUpdateData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_ServerQuestUpdateData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_ServerQuestUpdateData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_ServerQuestUpdateData)
    MergeFrom(*source);
  }
}

void CMsgGC_ServerQuestUpdateData::MergeFrom(const CMsgGC_ServerQuestUpdateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_ServerQuestUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_quest_data_.MergeFrom(from.player_quest_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_binary_data(from._internal_binary_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_missionlbsdata()->::ScoreLeaderboardData::MergeFrom(from._internal_missionlbsdata());
    }
    if (cached_has_bits & 0x00000004u) {
      mm_game_mode_ = from.mm_game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_ServerQuestUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const CMsgGC_ServerQuestUpdateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_ServerQuestUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ServerQuestUpdateData::IsInitialized() const {
  return true;
}

void CMsgGC_ServerQuestUpdateData::InternalSwap(CMsgGC_ServerQuestUpdateData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_quest_data_.InternalSwap(&other->player_quest_data_);
  binary_data_.Swap(&other->binary_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, mm_game_mode_)
      + sizeof(CMsgGC_ServerQuestUpdateData::mm_game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, missionlbsdata_)>(
          reinterpret_cast<char*>(&missionlbsdata_),
          reinterpret_cast<char*>(&other->missionlbsdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_ServerQuestUpdateData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>()._has_bits_);
  static void set_has_packetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  namekeys_(arena),
  packets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
}
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      namekeys_(from.namekeys_),
      packets_(from.packets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packetid_ = from.packetid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_cstrike15_5fgcmessages_2eproto.base);
  packetid_ = 0;
}

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::~CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namekeys_.Clear();
  packets_.Clear();
  packetid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 packetid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packetid(&has_bits);
          packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OperationalStatisticDescription namekeys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_namekeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OperationalStatisticsPacket packets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetid(), target);
  }

  // repeated .OperationalStatisticDescription namekeys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_namekeys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_namekeys(i), target, stream);
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_packets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OperationalStatisticDescription namekeys = 2;
  total_size += 1UL * this->_internal_namekeys_size();
  for (const auto& msg : this->namekeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  total_size += 1UL * this->_internal_packets_size();
  for (const auto& msg : this->packets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 packetid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packetid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namekeys_.MergeFrom(from.namekeys_);
  packets_.MergeFrom(from.packets_);
  if (from._internal_has_packetid()) {
    _internal_set_packetid(from._internal_packetid());
  }
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namekeys_.InternalSwap(&other->namekeys_);
  packets_.InternalSwap(&other->packets_);
  swap(packetid_, other->packetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&token_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedCtor() {
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&token_)) + sizeof(exchange_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exchange_) -
        reinterpret_cast<char*>(&token_)) + sizeof(exchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stamp(&has_bits);
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 exchange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exchange(&has_bits);
          exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_token(), target);
  }

  // optional uint32 stamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stamp(), target);
  }

  // optional uint64 exchange = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_token());
    }

    // optional uint32 stamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stamp());
    }

    // optional uint64 exchange = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_exchange());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      exchange_ = from.exchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, exchange_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::exchange_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>()._has_bits_);
  static void set_has_viewers_external_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_viewers_external_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}
CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&viewers_external_total_, &from.viewers_external_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewers_external_steam_) -
    reinterpret_cast<char*>(&viewers_external_total_)) + sizeof(viewers_external_steam_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedCtor() {
  ::memset(&viewers_external_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viewers_external_steam_) -
      reinterpret_cast<char*>(&viewers_external_total_)) + sizeof(viewers_external_steam_));
}

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::~CMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate* _this = reinterpret_cast< CMsgGCCStrike15_v2_GC2ServerReservationUpdate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&viewers_external_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewers_external_steam_) -
        reinterpret_cast<char*>(&viewers_external_total_)) + sizeof(viewers_external_steam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 viewers_external_total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewers_external_total(&has_bits);
          viewers_external_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 viewers_external_steam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_viewers_external_steam(&has_bits);
          viewers_external_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 viewers_external_total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_viewers_external_total(), target);
  }

  // optional uint32 viewers_external_steam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_viewers_external_steam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ServerReservationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 viewers_external_total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_viewers_external_total());
    }

    // optional uint32 viewers_external_steam = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_viewers_external_steam());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ServerReservationUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      viewers_external_total_ = from.viewers_external_total_;
    }
    if (cached_has_bits & 0x00000002u) {
      viewers_external_steam_ = from.viewers_external_steam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InternalSwap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_steam_)
      + sizeof(CMsgGCCStrike15_v2_GC2ServerReservationUpdate::viewers_external_steam_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_total_)>(
          reinterpret_cast<char*>(&viewers_external_total_),
          reinterpret_cast<char*>(&other->viewers_external_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ServerReservationUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingStart::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_._instance.get_mutable()->tournament_match_ = const_cast< ::TournamentMatchSetup*>(
      ::TournamentMatchSetup::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingStart::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingStart>()._has_bits_);
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TournamentMatchSetup& tournament_match(const CMsgGCCStrike15_v2_MatchmakingStart* msg);
  static void set_has_tournament_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prime_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TournamentMatchSetup&
CMsgGCCStrike15_v2_MatchmakingStart::_Internal::tournament_match(const CMsgGCCStrike15_v2_MatchmakingStart* msg) {
  return *msg->tournament_match_;
}
CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingStart)
}
CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(const CMsgGCCStrike15_v2_MatchmakingStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket_data()) {
    ticket_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticket_data(),
      GetArena());
  }
  if (from._internal_has_tournament_match()) {
    tournament_match_ = new ::TournamentMatchSetup(*from.tournament_match_);
  } else {
    tournament_match_ = nullptr;
  }
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&prime_only_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(prime_only_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingStart)
}

void CMsgGCCStrike15_v2_MatchmakingStart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingStart_cstrike15_5fgcmessages_2eproto.base);
  ticket_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tournament_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prime_only_) -
      reinterpret_cast<char*>(&tournament_match_)) + sizeof(prime_only_));
}

CMsgGCCStrike15_v2_MatchmakingStart::~CMsgGCCStrike15_v2_MatchmakingStart() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingStart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingStart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tournament_match_;
}

void CMsgGCCStrike15_v2_MatchmakingStart::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingStart* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingStart* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingStart& CMsgGCCStrike15_v2_MatchmakingStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingStart_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tournament_match_ != nullptr);
      tournament_match_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prime_only_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(prime_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ticket_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TournamentMatchSetup tournament_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prime_only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_prime_only(&has_bits);
          prime_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // optional string ticket_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticket_data().data(), static_cast<int>(this->_internal_ticket_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticket_data(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_version(), target);
  }

  // optional .TournamentMatchSetup tournament_match = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tournament_match(this), target, stream);
  }

  // optional bool prime_only = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_prime_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingStart)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ticket_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticket_data());
    }

    // optional .TournamentMatchSetup tournament_match = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tournament_match_);
    }

    // optional uint32 game_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional bool prime_only = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingStart)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingStart::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticket_data(from._internal_ticket_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tournament_match()->::TournamentMatchSetup::MergeFrom(from._internal_tournament_match());
    }
    if (cached_has_bits & 0x00000004u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      prime_only_ = from.prime_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStart::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStart::InternalSwap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  ticket_data_.Swap(&other->ticket_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, prime_only_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingStart::prime_only_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, tournament_match_)>(
          reinterpret_cast<char*>(&tournament_match_),
          reinterpret_cast<char*>(&other->tournament_match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingStop::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingStop::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingStop>()._has_bits_);
  static void set_has_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingStop)
}
CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(const CMsgGCCStrike15_v2_MatchmakingStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  abandon_ = from.abandon_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingStop)
}

void CMsgGCCStrike15_v2_MatchmakingStop::SharedCtor() {
  abandon_ = 0;
}

CMsgGCCStrike15_v2_MatchmakingStop::~CMsgGCCStrike15_v2_MatchmakingStop() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingStop::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingStop* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingStop* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingStop& CMsgGCCStrike15_v2_MatchmakingStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingStop_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abandon_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 abandon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_abandon(&has_bits);
          abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 abandon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_abandon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingStop)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 abandon = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abandon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingStop)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingStop::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_abandon()) {
    _internal_set_abandon(from._internal_abandon());
  }
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStop::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStop::InternalSwap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(abandon_, other->abandon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>()._has_bits_);
  static void set_has_offset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_final_batch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_test_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gameserverpings_(arena),
  data_center_pings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gameserverpings_(from.gameserverpings_),
      data_center_pings_(from.data_center_pings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_index_, &from.offset_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_token_) -
    reinterpret_cast<char*>(&offset_index_)) + sizeof(test_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&offset_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_token_) -
      reinterpret_cast<char*>(&offset_index_)) + sizeof(test_token_));
}

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::~CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserverpings_.Clear();
  data_center_pings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&offset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_token_) -
        reinterpret_cast<char*>(&offset_index_)) + sizeof(test_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GameServerPing gameserverpings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameserverpings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 offset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset_index(&has_bits);
          offset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 final_batch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_final_batch(&has_bits);
          final_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DataCenterPing data_center_pings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_center_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_ping(&has_bits);
          max_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 test_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_test_token(&has_bits);
          test_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameServerPing gameserverpings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gameserverpings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gameserverpings(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 offset_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset_index(), target);
  }

  // optional int32 final_batch = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_final_batch(), target);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_center_pings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data_center_pings(i), target, stream);
  }

  // optional uint32 max_ping = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_ping(), target);
  }

  // optional fixed32 test_token = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_test_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameServerPing gameserverpings = 1;
  total_size += 1UL * this->_internal_gameserverpings_size();
  for (const auto& msg : this->gameserverpings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  total_size += 1UL * this->_internal_data_center_pings_size();
  for (const auto& msg : this->data_center_pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 offset_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_offset_index());
    }

    // optional int32 final_batch = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_final_batch());
    }

    // optional uint32 max_ping = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ping());
    }

    // optional fixed32 test_token = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserverpings_.MergeFrom(from.gameserverpings_);
  data_center_pings_.MergeFrom(from.data_center_pings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      offset_index_ = from.offset_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      final_batch_ = from.final_batch_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ping_ = from.max_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      test_token_ = from.test_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InternalSwap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameserverpings_.InternalSwap(&other->gameserverpings_);
  data_center_pings_.InternalSwap(&other->data_center_pings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, test_token_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::test_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, offset_index_)>(
          reinterpret_cast<char*>(&offset_index_),
          reinterpret_cast<char*>(&other->offset_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&type_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&type_)) + sizeof(distance_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&type_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_region_id(&has_bits);
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float region_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_region_r(&has_bits);
          region_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_region_id(), target);
  }

  // optional float region_r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_region_r(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 region_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_region_id());
    }

    // optional float region_r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_r_ = from.region_r_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, distance_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::distance_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_._instance.get_mutable()->global_stats_ = const_cast< ::GlobalStatistics*>(
      ::GlobalStatistics::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_._instance.get_mutable()->server_ipaddress_mask_ = const_cast< ::IpAddressMask*>(
      ::IpAddressMask::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>()._has_bits_);
  static void set_has_matchmaking(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GlobalStatistics& global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg);
  static void set_has_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::IpAddressMask& server_ipaddress_mask(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg);
  static void set_has_server_ipaddress_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::GlobalStatistics&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_Internal::global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg) {
  return *msg->global_stats_;
}
const ::IpAddressMask&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_Internal::server_ipaddress_mask(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg) {
  return *msg->server_ipaddress_mask_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waiting_account_id_sessions_(arena),
  ongoingmatch_account_id_sessions_(arena),
  failping_account_id_sessions_(arena),
  penalty_account_id_sessions_(arena),
  failready_account_id_sessions_(arena),
  vacbanned_account_id_sessions_(arena),
  notes_(arena),
  penalty_account_id_sessions_green_(arena),
  insufficientlevel_sessions_(arena),
  vsncheck_account_id_sessions_(arena),
  launcher_mismatch_sessions_(arena),
  insecure_account_id_sessions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      waiting_account_id_sessions_(from.waiting_account_id_sessions_),
      ongoingmatch_account_id_sessions_(from.ongoingmatch_account_id_sessions_),
      failping_account_id_sessions_(from.failping_account_id_sessions_),
      penalty_account_id_sessions_(from.penalty_account_id_sessions_),
      failready_account_id_sessions_(from.failready_account_id_sessions_),
      vacbanned_account_id_sessions_(from.vacbanned_account_id_sessions_),
      notes_(from.notes_),
      penalty_account_id_sessions_green_(from.penalty_account_id_sessions_green_),
      insufficientlevel_sessions_(from.insufficientlevel_sessions_),
      vsncheck_account_id_sessions_(from.vsncheck_account_id_sessions_),
      launcher_mismatch_sessions_(from.launcher_mismatch_sessions_),
      insecure_account_id_sessions_(from.insecure_account_id_sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  if (from._internal_has_global_stats()) {
    global_stats_ = new ::GlobalStatistics(*from.global_stats_);
  } else {
    global_stats_ = nullptr;
  }
  if (from._internal_has_server_ipaddress_mask()) {
    server_ipaddress_mask_ = new ::IpAddressMask(*from.server_ipaddress_mask_);
  } else {
    server_ipaddress_mask_ = nullptr;
  }
  matchmaking_ = from.matchmaking_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_cstrike15_5fgcmessages_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&global_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchmaking_) -
      reinterpret_cast<char*>(&global_stats_)) + sizeof(matchmaking_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete global_stats_;
  if (this != internal_default_instance()) delete server_ipaddress_mask_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waiting_account_id_sessions_.Clear();
  ongoingmatch_account_id_sessions_.Clear();
  failping_account_id_sessions_.Clear();
  penalty_account_id_sessions_.Clear();
  failready_account_id_sessions_.Clear();
  vacbanned_account_id_sessions_.Clear();
  notes_.Clear();
  penalty_account_id_sessions_green_.Clear();
  insufficientlevel_sessions_.Clear();
  vsncheck_account_id_sessions_.Clear();
  launcher_mismatch_sessions_.Clear();
  insecure_account_id_sessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(global_stats_ != nullptr);
      global_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ipaddress_mask_ != nullptr);
      server_ipaddress_mask_->Clear();
    }
  }
  matchmaking_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 matchmaking = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_matchmaking(&has_bits);
          matchmaking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 waiting_account_id_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_waiting_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_waiting_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ongoingmatch_account_id_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ongoingmatch_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ongoingmatch_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GlobalStatistics global_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 failping_account_id_sessions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failping_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_failping_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 penalty_account_id_sessions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_penalty_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_penalty_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 failready_account_id_sessions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failready_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_failready_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vacbanned_account_id_sessions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vacbanned_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vacbanned_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .IpAddressMask server_ipaddress_mask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_ipaddress_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 penalty_account_id_sessions_green = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_penalty_account_id_sessions_green(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_penalty_account_id_sessions_green(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 insufficientlevel_sessions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_insufficientlevel_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_insufficientlevel_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vsncheck_account_id_sessions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_vsncheck_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vsncheck_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 launcher_mismatch_sessions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_launcher_mismatch_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_launcher_mismatch_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 insecure_account_id_sessions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_insecure_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_insecure_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 matchmaking = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_matchmaking(), target);
  }

  // repeated uint32 waiting_account_id_sessions = 2;
  for (int i = 0, n = this->_internal_waiting_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_waiting_account_id_sessions(i), target);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  for (int i = 0, n = this->_internal_ongoingmatch_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ongoingmatch_account_id_sessions(i), target);
  }

  // optional .GlobalStatistics global_stats = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::global_stats(this), target, stream);
  }

  // repeated uint32 failping_account_id_sessions = 8;
  for (int i = 0, n = this->_internal_failping_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_failping_account_id_sessions(i), target);
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  for (int i = 0, n = this->_internal_penalty_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_penalty_account_id_sessions(i), target);
  }

  // repeated uint32 failready_account_id_sessions = 10;
  for (int i = 0, n = this->_internal_failready_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_failready_account_id_sessions(i), target);
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  for (int i = 0, n = this->_internal_vacbanned_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_vacbanned_account_id_sessions(i), target);
  }

  // optional .IpAddressMask server_ipaddress_mask = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::server_ipaddress_mask(this), target, stream);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_notes(i), target, stream);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  for (int i = 0, n = this->_internal_penalty_account_id_sessions_green_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_penalty_account_id_sessions_green(i), target);
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  for (int i = 0, n = this->_internal_insufficientlevel_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_insufficientlevel_sessions(i), target);
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  for (int i = 0, n = this->_internal_vsncheck_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_vsncheck_account_id_sessions(i), target);
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  for (int i = 0, n = this->_internal_launcher_mismatch_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_launcher_mismatch_sessions(i), target);
  }

  // repeated uint32 insecure_account_id_sessions = 18;
  for (int i = 0, n = this->_internal_insecure_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_insecure_account_id_sessions(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 waiting_account_id_sessions = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->waiting_account_id_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_waiting_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ongoingmatch_account_id_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ongoingmatch_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 failping_account_id_sessions = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->failping_account_id_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_failping_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->penalty_account_id_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_penalty_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 failready_account_id_sessions = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->failready_account_id_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_failready_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vacbanned_account_id_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vacbanned_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->penalty_account_id_sessions_green_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_penalty_account_id_sessions_green_size());
    total_size += data_size;
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->insufficientlevel_sessions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_insufficientlevel_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vsncheck_account_id_sessions_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vsncheck_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->launcher_mismatch_sessions_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_launcher_mismatch_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 insecure_account_id_sessions = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->insecure_account_id_sessions_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_insecure_account_id_sessions_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string error = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional .GlobalStatistics global_stats = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_stats_);
    }

    // optional .IpAddressMask server_ipaddress_mask = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_ipaddress_mask_);
    }

    // optional int32 matchmaking = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_matchmaking());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waiting_account_id_sessions_.MergeFrom(from.waiting_account_id_sessions_);
  ongoingmatch_account_id_sessions_.MergeFrom(from.ongoingmatch_account_id_sessions_);
  failping_account_id_sessions_.MergeFrom(from.failping_account_id_sessions_);
  penalty_account_id_sessions_.MergeFrom(from.penalty_account_id_sessions_);
  failready_account_id_sessions_.MergeFrom(from.failready_account_id_sessions_);
  vacbanned_account_id_sessions_.MergeFrom(from.vacbanned_account_id_sessions_);
  notes_.MergeFrom(from.notes_);
  penalty_account_id_sessions_green_.MergeFrom(from.penalty_account_id_sessions_green_);
  insufficientlevel_sessions_.MergeFrom(from.insufficientlevel_sessions_);
  vsncheck_account_id_sessions_.MergeFrom(from.vsncheck_account_id_sessions_);
  launcher_mismatch_sessions_.MergeFrom(from.launcher_mismatch_sessions_);
  insecure_account_id_sessions_.MergeFrom(from.insecure_account_id_sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_global_stats()->::GlobalStatistics::MergeFrom(from._internal_global_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_server_ipaddress_mask()->::IpAddressMask::MergeFrom(from._internal_server_ipaddress_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      matchmaking_ = from.matchmaking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  waiting_account_id_sessions_.InternalSwap(&other->waiting_account_id_sessions_);
  ongoingmatch_account_id_sessions_.InternalSwap(&other->ongoingmatch_account_id_sessions_);
  failping_account_id_sessions_.InternalSwap(&other->failping_account_id_sessions_);
  penalty_account_id_sessions_.InternalSwap(&other->penalty_account_id_sessions_);
  failready_account_id_sessions_.InternalSwap(&other->failready_account_id_sessions_);
  vacbanned_account_id_sessions_.InternalSwap(&other->vacbanned_account_id_sessions_);
  notes_.InternalSwap(&other->notes_);
  penalty_account_id_sessions_green_.InternalSwap(&other->penalty_account_id_sessions_green_);
  insufficientlevel_sessions_.InternalSwap(&other->insufficientlevel_sessions_);
  vsncheck_account_id_sessions_.InternalSwap(&other->vsncheck_account_id_sessions_);
  launcher_mismatch_sessions_.InternalSwap(&other->launcher_mismatch_sessions_);
  insecure_account_id_sessions_.InternalSwap(&other->insecure_account_id_sessions_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, matchmaking_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::matchmaking_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, global_stats_)>(
          reinterpret_cast<char*>(&global_stats_),
          reinterpret_cast<char*>(&other->global_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InitAsDefaultInstance() {
}
class CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>()._has_bits_);
  static void set_has_mapid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}
CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_ct_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(team_id_ct_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_ct_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(team_id_ct_));
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::~CDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentMatchDraft_Entry* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mapid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_ct_) -
        reinterpret_cast<char*>(&mapid_)) + sizeof(team_id_ct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mapid(&has_bits);
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_ct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id_ct(&has_bits);
          team_id_ct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mapid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id_ct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentMatchDraft_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mapid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mapid());
    }

    // optional int32 team_id_ct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_ct());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mapid_ = from.mapid_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ct_ = from.team_id_ct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, team_id_ct_)
      + sizeof(CDataGCCStrike15_v2_TournamentMatchDraft_Entry::team_id_ct_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, mapid_)>(
          reinterpret_cast<char*>(&mapid_),
          reinterpret_cast<char*>(&other->mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentMatchDraft_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentMatchDraft::InitAsDefaultInstance() {
}
class CDataGCCStrike15_v2_TournamentMatchDraft::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentMatchDraft>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_stage_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id_0(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maps_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_maps_current(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_id_start(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_id_veto1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id_pickn(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drafts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentMatchDraft)
}
CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drafts_(from.drafts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_pickn_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(team_id_pickn_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentMatchDraft)
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_pickn_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(team_id_pickn_));
}

CDataGCCStrike15_v2_TournamentMatchDraft::~CDataGCCStrike15_v2_TournamentMatchDraft() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentMatchDraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentMatchDraft* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentMatchDraft* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentMatchDraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentMatchDraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentMatchDraft& CDataGCCStrike15_v2_TournamentMatchDraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentMatchDraft_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentMatchDraft::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drafts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_veto1_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(team_id_veto1_));
  }
  team_id_pickn_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentMatchDraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_stage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_stage_id(&has_bits);
          event_stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id_0(&has_bits);
          team_id_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id_1(&has_bits);
          team_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maps_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maps_count(&has_bits);
          maps_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maps_current = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_maps_current(&has_bits);
          maps_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_id_start(&has_bits);
          team_id_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_veto1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_team_id_veto1(&has_bits);
          team_id_veto1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id_pickn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_team_id_pickn(&has_bits);
          team_id_pickn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drafts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentMatchDraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional int32 event_stage_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_event_stage_id(), target);
  }

  // optional int32 team_id_0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_id_0(), target);
  }

  // optional int32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_team_id_1(), target);
  }

  // optional int32 maps_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maps_count(), target);
  }

  // optional int32 maps_current = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maps_current(), target);
  }

  // optional int32 team_id_start = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_team_id_start(), target);
  }

  // optional int32 team_id_veto1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_team_id_veto1(), target);
  }

  // optional int32 team_id_pickn = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_team_id_pickn(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drafts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_drafts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentMatchDraft)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentMatchDraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  total_size += 1UL * this->_internal_drafts_size();
  for (const auto& msg : this->drafts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_id());
    }

    // optional int32 event_stage_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_stage_id());
    }

    // optional int32 team_id_0 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_0());
    }

    // optional int32 team_id_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_1());
    }

    // optional int32 maps_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maps_count());
    }

    // optional int32 maps_current = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maps_current());
    }

    // optional int32 team_id_start = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_start());
    }

    // optional int32 team_id_veto1 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id_veto1());
    }

  }
  // optional int32 team_id_pickn = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team_id_pickn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentMatchDraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentMatchDraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentMatchDraft)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drafts_.MergeFrom(from.drafts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_stage_id_ = from.event_stage_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_0_ = from.team_id_0_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      maps_count_ = from.maps_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      maps_current_ = from.maps_current_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_start_ = from.team_id_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_veto1_ = from.team_id_veto1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_team_id_pickn(from._internal_team_id_pickn());
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drafts_.InternalSwap(&other->drafts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_pickn_)
      + sizeof(CDataGCCStrike15_v2_TournamentMatchDraft::team_id_pickn_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentMatchDraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPreMatchInfoData_TeamStats::InitAsDefaultInstance() {
}
class CPreMatchInfoData_TeamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CPreMatchInfoData_TeamStats>()._has_bits_);
  static void set_has_match_info_idxtxt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_info_txt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_info_teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPreMatchInfoData.TeamStats)
}
CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      match_info_teams_(from.match_info_teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_info_txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_match_info_txt()) {
    match_info_txt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_match_info_txt(),
      GetArena());
  }
  match_info_idxtxt_ = from.match_info_idxtxt_;
  // @@protoc_insertion_point(copy_constructor:CPreMatchInfoData.TeamStats)
}

void CPreMatchInfoData_TeamStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto.base);
  match_info_txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_info_idxtxt_ = 0;
}

CPreMatchInfoData_TeamStats::~CPreMatchInfoData_TeamStats() {
  // @@protoc_insertion_point(destructor:CPreMatchInfoData.TeamStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPreMatchInfoData_TeamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  match_info_txt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPreMatchInfoData_TeamStats::ArenaDtor(void* object) {
  CPreMatchInfoData_TeamStats* _this = reinterpret_cast< CPreMatchInfoData_TeamStats* >(object);
  (void)_this;
}
void CPreMatchInfoData_TeamStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPreMatchInfoData_TeamStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPreMatchInfoData_TeamStats& CPreMatchInfoData_TeamStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPreMatchInfoData_TeamStats_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CPreMatchInfoData_TeamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CPreMatchInfoData.TeamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_info_teams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    match_info_txt_.ClearNonDefaultToEmpty();
  }
  match_info_idxtxt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPreMatchInfoData_TeamStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 match_info_idxtxt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_info_idxtxt(&has_bits);
          match_info_idxtxt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string match_info_txt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_match_info_txt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPreMatchInfoData.TeamStats.match_info_txt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string match_info_teams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_info_teams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPreMatchInfoData.TeamStats.match_info_teams");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPreMatchInfoData_TeamStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPreMatchInfoData.TeamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 match_info_idxtxt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_match_info_idxtxt(), target);
  }

  // optional string match_info_txt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_match_info_txt().data(), static_cast<int>(this->_internal_match_info_txt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_txt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_match_info_txt(), target);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0, n = this->_internal_match_info_teams_size(); i < n; i++) {
    const auto& s = this->_internal_match_info_teams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_teams");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPreMatchInfoData.TeamStats)
  return target;
}

size_t CPreMatchInfoData_TeamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPreMatchInfoData.TeamStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_info_teams = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(match_info_teams_.size());
  for (int i = 0, n = match_info_teams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      match_info_teams_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string match_info_txt = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_match_info_txt());
    }

    // optional int32 match_info_idxtxt = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_info_idxtxt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPreMatchInfoData_TeamStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPreMatchInfoData.TeamStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CPreMatchInfoData_TeamStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPreMatchInfoData_TeamStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPreMatchInfoData.TeamStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPreMatchInfoData.TeamStats)
    MergeFrom(*source);
  }
}

void CPreMatchInfoData_TeamStats::MergeFrom(const CPreMatchInfoData_TeamStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPreMatchInfoData.TeamStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_info_teams_.MergeFrom(from.match_info_teams_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_match_info_txt(from._internal_match_info_txt());
    }
    if (cached_has_bits & 0x00000002u) {
      match_info_idxtxt_ = from.match_info_idxtxt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPreMatchInfoData_TeamStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPreMatchInfoData.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData_TeamStats::CopyFrom(const CPreMatchInfoData_TeamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPreMatchInfoData.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData_TeamStats::IsInitialized() const {
  return true;
}

void CPreMatchInfoData_TeamStats::InternalSwap(CPreMatchInfoData_TeamStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_info_teams_.InternalSwap(&other->match_info_teams_);
  match_info_txt_.Swap(&other->match_info_txt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(match_info_idxtxt_, other->match_info_idxtxt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPreMatchInfoData_TeamStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPreMatchInfoData::InitAsDefaultInstance() {
  ::_CPreMatchInfoData_default_instance_._instance.get_mutable()->draft_ = const_cast< ::CDataGCCStrike15_v2_TournamentMatchDraft*>(
      ::CDataGCCStrike15_v2_TournamentMatchDraft::internal_default_instance());
}
class CPreMatchInfoData::_Internal {
 public:
  using HasBits = decltype(std::declval<CPreMatchInfoData>()._has_bits_);
  static void set_has_predictions_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDataGCCStrike15_v2_TournamentMatchDraft& draft(const CPreMatchInfoData* msg);
  static void set_has_draft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDataGCCStrike15_v2_TournamentMatchDraft&
CPreMatchInfoData::_Internal::draft(const CPreMatchInfoData* msg) {
  return *msg->draft_;
}
CPreMatchInfoData::CPreMatchInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena),
  wins_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPreMatchInfoData)
}
CPreMatchInfoData::CPreMatchInfoData(const CPreMatchInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      wins_(from.wins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_draft()) {
    draft_ = new ::CDataGCCStrike15_v2_TournamentMatchDraft(*from.draft_);
  } else {
    draft_ = nullptr;
  }
  predictions_pct_ = from.predictions_pct_;
  // @@protoc_insertion_point(copy_constructor:CPreMatchInfoData)
}

void CPreMatchInfoData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&draft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictions_pct_) -
      reinterpret_cast<char*>(&draft_)) + sizeof(predictions_pct_));
}

CPreMatchInfoData::~CPreMatchInfoData() {
  // @@protoc_insertion_point(destructor:CPreMatchInfoData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPreMatchInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete draft_;
}

void CPreMatchInfoData::ArenaDtor(void* object) {
  CPreMatchInfoData* _this = reinterpret_cast< CPreMatchInfoData* >(object);
  (void)_this;
}
void CPreMatchInfoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPreMatchInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPreMatchInfoData& CPreMatchInfoData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPreMatchInfoData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CPreMatchInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:CPreMatchInfoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  wins_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(draft_ != nullptr);
    draft_->Clear();
  }
  predictions_pct_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPreMatchInfoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 predictions_pct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_predictions_pct(&has_bits);
          predictions_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_draft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CPreMatchInfoData.TeamStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 wins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wins(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPreMatchInfoData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPreMatchInfoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 predictions_pct = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_predictions_pct(), target);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::draft(this), target, stream);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stats(i), target, stream);
  }

  // repeated int32 wins = 6;
  for (int i = 0, n = this->_internal_wins_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_wins(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPreMatchInfoData)
  return target;
}

size_t CPreMatchInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPreMatchInfoData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 wins = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->wins_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wins_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *draft_);
    }

    // optional int32 predictions_pct = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_predictions_pct());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPreMatchInfoData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPreMatchInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  const CPreMatchInfoData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPreMatchInfoData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPreMatchInfoData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPreMatchInfoData)
    MergeFrom(*source);
  }
}

void CPreMatchInfoData::MergeFrom(const CPreMatchInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPreMatchInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  wins_.MergeFrom(from.wins_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_draft()->::CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(from._internal_draft());
    }
    if (cached_has_bits & 0x00000002u) {
      predictions_pct_ = from.predictions_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPreMatchInfoData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPreMatchInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData::CopyFrom(const CPreMatchInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPreMatchInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData::IsInitialized() const {
  return true;
}

void CPreMatchInfoData::InternalSwap(CPreMatchInfoData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  wins_.InternalSwap(&other->wins_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPreMatchInfoData, predictions_pct_)
      + sizeof(CPreMatchInfoData::predictions_pct_)
      - PROTOBUF_FIELD_OFFSET(CPreMatchInfoData, draft_)>(
          reinterpret_cast<char*>(&draft_),
          reinterpret_cast<char*>(&other->draft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPreMatchInfoData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_._instance.get_mutable()->tournament_event_ = const_cast< ::TournamentEvent*>(
      ::TournamentEvent::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_._instance.get_mutable()->pre_match_data_ = const_cast< ::CPreMatchInfoData*>(
      ::CPreMatchInfoData::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>()._has_bits_);
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_encryption_key_pub(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tv_master_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TournamentEvent& tournament_event(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg);
  static void set_has_tournament_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tv_relay_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CPreMatchInfoData& pre_match_data(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg);
  static void set_has_pre_match_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime32_event_start(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tv_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::TournamentEvent&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_Internal::tournament_event(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg) {
  return *msg->tournament_event_;
}
const ::CPreMatchInfoData&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_Internal::pre_match_data(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg) {
  return *msg->pre_match_data_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena),
  rankings_(arena),
  party_ids_(arena),
  whitelist_(arena),
  tournament_teams_(arena),
  tournament_casters_account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      rankings_(from.rankings_),
      party_ids_(from.party_ids_),
      whitelist_(from.whitelist_),
      tournament_teams_(from.tournament_teams_),
      tournament_casters_account_ids_(from.tournament_casters_account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournament_event()) {
    tournament_event_ = new ::TournamentEvent(*from.tournament_event_);
  } else {
    tournament_event_ = nullptr;
  }
  if (from._internal_has_pre_match_data()) {
    pre_match_data_ = new ::CPreMatchInfoData(*from.pre_match_data_);
  } else {
    pre_match_data_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&tournament_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&tournament_event_)) + sizeof(flags_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tournament_event_;
  if (this != internal_default_instance()) delete pre_match_data_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  rankings_.Clear();
  party_ids_.Clear();
  whitelist_.Clear();
  tournament_teams_.Clear();
  tournament_casters_account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tournament_event_ != nullptr);
      tournament_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pre_match_data_ != nullptr);
      pre_match_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_master_steamid_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(tv_master_steamid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&tv_relay_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&tv_relay_steamid_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerRankingInfo rankings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 encryption_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_encryption_key(&has_bits);
          encryption_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 encryption_key_pub = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_encryption_key_pub(&has_bits);
          encryption_key_pub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 party_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_party_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_party_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IpAddressMask whitelist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_whitelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 tv_master_steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tv_master_steamid(&has_bits);
          tv_master_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TournamentEvent tournament_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentTeam tournament_teams = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tournament_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 tournament_casters_account_ids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tournament_casters_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tournament_casters_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tv_relay_steamid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tv_relay_steamid(&has_bits);
          tv_relay_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CPreMatchInfoData pre_match_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_match_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_event_start = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rtime32_event_start(&has_bits);
          rtime32_event_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_control = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tv_control(&has_bits);
          tv_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional uint32 server_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_version(), target);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rankings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rankings(i), target, stream);
  }

  // optional uint64 encryption_key = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_encryption_key(), target);
  }

  // optional uint64 encryption_key_pub = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_encryption_key_pub(), target);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0, n = this->_internal_party_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_party_ids(i), target);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_whitelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_whitelist(i), target, stream);
  }

  // optional uint64 tv_master_steamid = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_tv_master_steamid(), target);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tournament_event(this), target, stream);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tournament_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_tournament_teams(i), target, stream);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0, n = this->_internal_tournament_casters_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tournament_casters_account_ids(i), target);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tv_relay_steamid(), target);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::pre_match_data(this), target, stream);
  }

  // optional uint32 rtime32_event_start = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_rtime32_event_start(), target);
  }

  // optional uint32 tv_control = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tv_control(), target);
  }

  // optional uint32 flags = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated .PlayerRankingInfo rankings = 5;
  total_size += 1UL * this->_internal_rankings_size();
  for (const auto& msg : this->rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 party_ids = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->party_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_party_ids_size());
    total_size += data_size;
  }

  // repeated .IpAddressMask whitelist = 9;
  total_size += 1UL * this->_internal_whitelist_size();
  for (const auto& msg : this->whitelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  total_size += 1UL * this->_internal_tournament_teams_size();
  for (const auto& msg : this->tournament_teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tournament_casters_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tournament_casters_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TournamentEvent tournament_event = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tournament_event_);
    }

    // optional .CPreMatchInfoData pre_match_data = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre_match_data_);
    }

    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 game_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

    // optional uint32 server_version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional uint64 encryption_key = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_encryption_key());
    }

    // optional uint64 encryption_key_pub = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_encryption_key_pub());
    }

    // optional uint64 tv_master_steamid = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tv_master_steamid());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 tv_relay_steamid = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tv_relay_steamid());
    }

    // optional uint32 rtime32_event_start = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_event_start());
    }

    // optional uint32 tv_control = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_control());
    }

    // optional uint32 flags = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  rankings_.MergeFrom(from.rankings_);
  party_ids_.MergeFrom(from.party_ids_);
  whitelist_.MergeFrom(from.whitelist_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  tournament_casters_account_ids_.MergeFrom(from.tournament_casters_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tournament_event()->::TournamentEvent::MergeFrom(from._internal_tournament_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pre_match_data()->::CPreMatchInfoData::MergeFrom(from._internal_pre_match_data());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      encryption_key_ = from.encryption_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      encryption_key_pub_ = from.encryption_key_pub_;
    }
    if (cached_has_bits & 0x00000080u) {
      tv_master_steamid_ = from.tv_master_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      tv_relay_steamid_ = from.tv_relay_steamid_;
    }
    if (cached_has_bits & 0x00000200u) {
      rtime32_event_start_ = from.rtime32_event_start_;
    }
    if (cached_has_bits & 0x00000400u) {
      tv_control_ = from.tv_control_;
    }
    if (cached_has_bits & 0x00000800u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  rankings_.InternalSwap(&other->rankings_);
  party_ids_.InternalSwap(&other->party_ids_);
  whitelist_.InternalSwap(&other->whitelist_);
  tournament_teams_.InternalSwap(&other->tournament_teams_);
  tournament_casters_account_ids_.InternalSwap(&other->tournament_casters_account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, flags_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_event_)>(
          reinterpret_cast<char*>(&tournament_event_),
          reinterpret_cast<char*>(&other->tournament_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_._instance.get_mutable()->tv_info_ = const_cast< ::ServerHltvInfo*>(
      ::ServerHltvInfo::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>()._has_bits_);
  static void set_has_reservationid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gc_reservation_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ServerHltvInfo& tv_info(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg);
  static void set_has_tv_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reward_item_attr_def_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reward_item_attr_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reward_item_attr_reward_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reward_drop_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tournament_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_steamdatagram_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steamdatagram_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_test_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_Internal::reservation(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg) {
  return *msg->reservation_;
}
const ::ServerHltvInfo&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_Internal::tv_info(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg) {
  return *msg->tv_info_;
}
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_player_accounts_(arena),
  idle_player_accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reward_player_accounts_(from.reward_player_accounts_),
      idle_player_accounts_(from.idle_player_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map(),
      GetArena());
  }
  tournament_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tournament_tag()) {
    tournament_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tournament_tag(),
      GetArena());
  }
  if (from._internal_has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = nullptr;
  }
  if (from._internal_has_tv_info()) {
    tv_info_ = new ::ServerHltvInfo(*from.tv_info_);
  } else {
    tv_info_ = nullptr;
  }
  ::memcpy(&reservationid_, &from.reservationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamdatagram_routing_) -
    reinterpret_cast<char*>(&reservationid_)) + sizeof(steamdatagram_routing_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto.base);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tournament_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamdatagram_routing_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(steamdatagram_routing_));
}

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::~CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tournament_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_;
  if (this != internal_default_instance()) delete tv_info_;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_player_accounts_.Clear();
  idle_player_accounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reservation_ != nullptr);
      reservation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tv_info_ != nullptr);
      tv_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&reservationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_item_attr_def_idx_) -
        reinterpret_cast<char*>(&reservationid_)) + sizeof(reward_item_attr_def_idx_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&reward_item_attr_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamdatagram_routing_) -
        reinterpret_cast<char*>(&reward_item_attr_value_)) + sizeof(steamdatagram_routing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 reservationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reservationid(&has_bits);
          reservationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gc_reservation_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gc_reservation_sent(&has_bits);
          gc_reservation_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ServerHltvInfo tv_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tv_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 reward_player_accounts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reward_player_accounts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reward_player_accounts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 idle_player_accounts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_idle_player_accounts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_idle_player_accounts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_item_attr_def_idx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reward_item_attr_def_idx(&has_bits);
          reward_item_attr_def_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_item_attr_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_reward_item_attr_value(&has_bits);
          reward_item_attr_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_item_attr_reward_idx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_reward_item_attr_reward_idx(&has_bits);
          reward_item_attr_reward_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_drop_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_reward_drop_list(&has_bits);
          reward_drop_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tournament_tag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_tournament_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 legacy_steamdatagram_port = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_legacy_steamdatagram_port(&has_bits);
          legacy_steamdatagram_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 test_token = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_test_token(&has_bits);
          test_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 steamdatagram_routing = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_steamdatagram_routing(&has_bits);
          steamdatagram_routing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reservation(this), target, stream);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map(), target);
  }

  // optional uint64 gc_reservation_sent = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gc_reservation_sent(), target);
  }

  // optional uint32 server_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_version(), target);
  }

  // optional .ServerHltvInfo tv_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tv_info(this), target, stream);
  }

  // repeated uint32 reward_player_accounts = 7;
  for (int i = 0, n = this->_internal_reward_player_accounts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reward_player_accounts(i), target);
  }

  // repeated uint32 idle_player_accounts = 8;
  for (int i = 0, n = this->_internal_idle_player_accounts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_idle_player_accounts(i), target);
  }

  // optional uint32 reward_item_attr_def_idx = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_reward_item_attr_def_idx(), target);
  }

  // optional uint32 reward_item_attr_value = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_reward_item_attr_value(), target);
  }

  // optional uint32 reward_item_attr_reward_idx = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reward_item_attr_reward_idx(), target);
  }

  // optional uint32 reward_drop_list = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_reward_drop_list(), target);
  }

  // optional string tournament_tag = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tournament_tag().data(), static_cast<int>(this->_internal_tournament_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_tournament_tag(), target);
  }

  // optional uint32 legacy_steamdatagram_port = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_legacy_steamdatagram_port(), target);
  }

  // optional fixed32 test_token = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(15, this->_internal_test_token(), target);
  }

  // optional uint32 flags = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_flags(), target);
  }

  // optional uint32 steamdatagram_routing = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_steamdatagram_routing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reward_player_accounts = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reward_player_accounts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reward_player_accounts_size());
    total_size += data_size;
  }

  // repeated uint32 idle_player_accounts = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->idle_player_accounts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_idle_player_accounts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string tournament_tag = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tournament_tag());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional .ServerHltvInfo tv_info = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tv_info_);
    }

    // optional uint64 reservationid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reservationid());
    }

    // optional uint64 gc_reservation_sent = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gc_reservation_sent());
    }

    // optional uint32 server_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional uint32 reward_item_attr_def_idx = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_item_attr_def_idx());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 reward_item_attr_value = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_item_attr_value());
    }

    // optional uint32 reward_item_attr_reward_idx = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_item_attr_reward_idx());
    }

    // optional uint32 reward_drop_list = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_drop_list());
    }

    // optional uint32 legacy_steamdatagram_port = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_steamdatagram_port());
    }

    // optional fixed32 test_token = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 steamdatagram_routing = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steamdatagram_routing());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_player_accounts_.MergeFrom(from.reward_player_accounts_);
  idle_player_accounts_.MergeFrom(from.idle_player_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tournament_tag(from._internal_tournament_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from._internal_reservation());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tv_info()->::ServerHltvInfo::MergeFrom(from._internal_tv_info());
    }
    if (cached_has_bits & 0x00000010u) {
      reservationid_ = from.reservationid_;
    }
    if (cached_has_bits & 0x00000020u) {
      gc_reservation_sent_ = from.gc_reservation_sent_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      reward_item_attr_def_idx_ = from.reward_item_attr_def_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      reward_item_attr_value_ = from.reward_item_attr_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      reward_item_attr_reward_idx_ = from.reward_item_attr_reward_idx_;
    }
    if (cached_has_bits & 0x00000400u) {
      reward_drop_list_ = from.reward_drop_list_;
    }
    if (cached_has_bits & 0x00000800u) {
      legacy_steamdatagram_port_ = from.legacy_steamdatagram_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      test_token_ = from.test_token_;
    }
    if (cached_has_bits & 0x00002000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00004000u) {
      steamdatagram_routing_ = from.steamdatagram_routing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reward_player_accounts_.InternalSwap(&other->reward_player_accounts_);
  idle_player_accounts_.InternalSwap(&other->idle_player_accounts_);
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tournament_tag_.Swap(&other->tournament_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, steamdatagram_routing_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::steamdatagram_routing_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservation_)>(
          reinterpret_cast<char*>(&reservation_),
          reinterpret_cast<char*>(&other->reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>()._has_bits_);
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_direct_udp_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direct_udp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reservationid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_Internal::reservation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* msg) {
  return *msg->reservation_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map(),
      GetArena());
  }
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_address()) {
    server_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_address(),
      GetArena());
  }
  if (from._internal_has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = nullptr;
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reservationid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(reservationid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reservationid_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(reservationid_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      server_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reservation_ != nullptr);
      reservation_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reservationid_) -
        reinterpret_cast<char*>(&serverid_)) + sizeof(reservationid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_serverid(&has_bits);
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 direct_udp_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_direct_udp_ip(&has_bits);
          direct_udp_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 direct_udp_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_direct_udp_port(&has_bits);
          direct_udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 reservationid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reservationid(&has_bits);
          reservationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_server_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_serverid(), target);
  }

  // optional uint32 direct_udp_ip = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_direct_udp_ip(), target);
  }

  // optional uint32 direct_udp_port = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direct_udp_port(), target);
  }

  // optional uint64 reservationid = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reservation(this), target, stream);
  }

  // optional string map = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_map(), target);
  }

  // optional string server_address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_server_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string map = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string server_address = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_address());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional uint64 serverid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_serverid());
    }

    // optional uint32 direct_udp_ip = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_direct_udp_ip());
    }

    // optional uint32 direct_udp_port = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_direct_udp_port());
    }

    // optional uint64 reservationid = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reservationid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_server_address(from._internal_server_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from._internal_reservation());
    }
    if (cached_has_bits & 0x00000008u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000010u) {
      direct_udp_ip_ = from.direct_udp_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      direct_udp_port_ = from.direct_udp_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      reservationid_ = from.reservationid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_address_.Swap(&other->server_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservationid_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::reservationid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservation_)>(
          reinterpret_cast<char*>(&reservation_),
          reinterpret_cast<char*>(&other->reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>()._has_bits_);
  static void set_has_account_mvp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_mvp_ = from.account_mvp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedCtor() {
  account_mvp_ = 0u;
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_mvp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_mvp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_mvp(&has_bits);
          account_mvp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_mvp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_mvp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_mvp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_mvp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_mvp()) {
    _internal_set_account_mvp(from._internal_account_mvp());
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_mvp_, other->account_mvp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance.get_mutable()->confirm_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance.get_mutable()->drop_info_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>()._has_bits_);
  static void set_has_reservationid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_round(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_round_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& confirm(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg);
  static void set_has_confirm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reservation_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spectators_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spectators_count_tv(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spectators_count_lnk(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& drop_info(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg);
  static void set_has_drop_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b_switched_teams(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal::reservation(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg) {
  return *msg->reservation_;
}
const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal::confirm(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg) {
  return *msg->confirm_;
}
const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal::drop_info(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg) {
  return *msg->drop_info_;
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kills_(arena),
  assists_(arena),
  deaths_(arena),
  scores_(arena),
  pings_(arena),
  team_scores_(arena),
  enemy_kills_(arena),
  enemy_headshots_(arena),
  enemy_3ks_(arena),
  enemy_4ks_(arena),
  enemy_5ks_(arena),
  mvps_(arena),
  enemy_kills_agg_(arena),
  enemy_2ks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      kills_(from.kills_),
      assists_(from.assists_),
      deaths_(from.deaths_),
      scores_(from.scores_),
      pings_(from.pings_),
      team_scores_(from.team_scores_),
      enemy_kills_(from.enemy_kills_),
      enemy_headshots_(from.enemy_headshots_),
      enemy_3ks_(from.enemy_3ks_),
      enemy_4ks_(from.enemy_4ks_),
      enemy_5ks_(from.enemy_5ks_),
      mvps_(from.mvps_),
      enemy_kills_agg_(from.enemy_kills_agg_),
      enemy_2ks_(from.enemy_2ks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map(),
      GetArena());
  }
  if (from._internal_has_reservation()) {
    reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from.reservation_);
  } else {
    reservation_ = nullptr;
  }
  if (from._internal_has_confirm()) {
    confirm_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(*from.confirm_);
  } else {
    confirm_ = nullptr;
  }
  if (from._internal_has_drop_info()) {
    drop_info_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(*from.drop_info_);
  } else {
    drop_info_ = nullptr;
  }
  ::memcpy(&reservationid_, &from.reservationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_switched_teams_) -
    reinterpret_cast<char*>(&reservationid_)) + sizeof(b_switched_teams_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto.base);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_switched_teams_) -
      reinterpret_cast<char*>(&reservation_)) + sizeof(b_switched_teams_));
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_;
  if (this != internal_default_instance()) delete confirm_;
  if (this != internal_default_instance()) delete drop_info_;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingServerRoundStats* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kills_.Clear();
  assists_.Clear();
  deaths_.Clear();
  scores_.Clear();
  pings_.Clear();
  team_scores_.Clear();
  enemy_kills_.Clear();
  enemy_headshots_.Clear();
  enemy_3ks_.Clear();
  enemy_4ks_.Clear();
  enemy_5ks_.Clear();
  mvps_.Clear();
  enemy_kills_agg_.Clear();
  enemy_2ks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reservation_ != nullptr);
      reservation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(confirm_ != nullptr);
      confirm_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(drop_info_ != nullptr);
      drop_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&reservationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_result_) -
        reinterpret_cast<char*>(&reservationid_)) + sizeof(match_result_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&reservation_stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_switched_teams_) -
        reinterpret_cast<char*>(&reservation_stage_)) + sizeof(b_switched_teams_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 reservationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reservationid(&has_bits);
          reservationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 round = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_round(&has_bits);
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_kills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_kills(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 assists = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_assists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_assists(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_deaths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_deaths(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 scores = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 round_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_round_result(&has_bits);
          round_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_result = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_match_result(&has_bits);
          match_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 team_scores = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_team_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_team_scores(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reservation_stage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_reservation_stage(&has_bits);
          reservation_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_duration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_match_duration(&has_bits);
          match_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_kills = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_kills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_kills(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_headshots = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_headshots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_headshots(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_3ks = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_3ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_3ks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_4ks = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_4ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_4ks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_5ks = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_5ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_5ks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 mvps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mvps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mvps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectators_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_spectators_count(&has_bits);
          spectators_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectators_count_tv = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_spectators_count_tv(&has_bits);
          spectators_count_tv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectators_count_lnk = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_spectators_count_lnk(&has_bits);
          spectators_count_lnk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_kills_agg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_kills_agg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_kills_agg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool b_switched_teams = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_b_switched_teams(&has_bits);
          b_switched_teams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enemy_2ks = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_2ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_2ks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reservation(this), target, stream);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map(), target);
  }

  // optional int32 round = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_round(), target);
  }

  // repeated int32 kills = 5;
  for (int i = 0, n = this->_internal_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_kills(i), target);
  }

  // repeated int32 assists = 6;
  for (int i = 0, n = this->_internal_assists_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_assists(i), target);
  }

  // repeated int32 deaths = 7;
  for (int i = 0, n = this->_internal_deaths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_deaths(i), target);
  }

  // repeated int32 scores = 8;
  for (int i = 0, n = this->_internal_scores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_scores(i), target);
  }

  // repeated int32 pings = 9;
  for (int i = 0, n = this->_internal_pings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_pings(i), target);
  }

  // optional int32 round_result = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_round_result(), target);
  }

  // optional int32 match_result = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_match_result(), target);
  }

  // repeated int32 team_scores = 12;
  for (int i = 0, n = this->_internal_team_scores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_team_scores(i), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::confirm(this), target, stream);
  }

  // optional int32 reservation_stage = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_reservation_stage(), target);
  }

  // optional int32 match_duration = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_match_duration(), target);
  }

  // repeated int32 enemy_kills = 16;
  for (int i = 0, n = this->_internal_enemy_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_enemy_kills(i), target);
  }

  // repeated int32 enemy_headshots = 17;
  for (int i = 0, n = this->_internal_enemy_headshots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_enemy_headshots(i), target);
  }

  // repeated int32 enemy_3ks = 18;
  for (int i = 0, n = this->_internal_enemy_3ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_enemy_3ks(i), target);
  }

  // repeated int32 enemy_4ks = 19;
  for (int i = 0, n = this->_internal_enemy_4ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_enemy_4ks(i), target);
  }

  // repeated int32 enemy_5ks = 20;
  for (int i = 0, n = this->_internal_enemy_5ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_enemy_5ks(i), target);
  }

  // repeated int32 mvps = 21;
  for (int i = 0, n = this->_internal_mvps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_mvps(i), target);
  }

  // optional uint32 spectators_count = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_spectators_count(), target);
  }

  // optional uint32 spectators_count_tv = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_spectators_count_tv(), target);
  }

  // optional uint32 spectators_count_lnk = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_spectators_count_lnk(), target);
  }

  // repeated int32 enemy_kills_agg = 25;
  for (int i = 0, n = this->_internal_enemy_kills_agg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_enemy_kills_agg(i), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::drop_info(this), target, stream);
  }

  // optional bool b_switched_teams = 27;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_b_switched_teams(), target);
  }

  // repeated int32 enemy_2ks = 28;
  for (int i = 0, n = this->_internal_enemy_2ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_enemy_2ks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerRoundStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 kills = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->kills_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kills_size());
    total_size += data_size;
  }

  // repeated int32 assists = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->assists_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assists_size());
    total_size += data_size;
  }

  // repeated int32 deaths = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->deaths_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deaths_size());
    total_size += data_size;
  }

  // repeated int32 scores = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->scores_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scores_size());
    total_size += data_size;
  }

  // repeated int32 pings = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pings_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pings_size());
    total_size += data_size;
  }

  // repeated int32 team_scores = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->team_scores_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_scores_size());
    total_size += data_size;
  }

  // repeated int32 enemy_kills = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_kills_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_kills_size());
    total_size += data_size;
  }

  // repeated int32 enemy_headshots = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_headshots_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_headshots_size());
    total_size += data_size;
  }

  // repeated int32 enemy_3ks = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_3ks_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_3ks_size());
    total_size += data_size;
  }

  // repeated int32 enemy_4ks = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_4ks_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_4ks_size());
    total_size += data_size;
  }

  // repeated int32 enemy_5ks = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_5ks_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_5ks_size());
    total_size += data_size;
  }

  // repeated int32 mvps = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mvps_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mvps_size());
    total_size += data_size;
  }

  // repeated int32 enemy_kills_agg = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_kills_agg_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_kills_agg_size());
    total_size += data_size;
  }

  // repeated int32 enemy_2ks = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enemy_2ks_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemy_2ks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reservation_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *confirm_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drop_info_);
    }

    // optional uint64 reservationid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reservationid());
    }

    // optional int32 round = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_round());
    }

    // optional int32 round_result = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_round_result());
    }

    // optional int32 match_result = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_result());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 reservation_stage = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reservation_stage());
    }

    // optional int32 match_duration = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_duration());
    }

    // optional uint32 spectators_count = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectators_count());
    }

    // optional uint32 spectators_count_tv = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectators_count_tv());
    }

    // optional uint32 spectators_count_lnk = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectators_count_lnk());
    }

    // optional bool b_switched_teams = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kills_.MergeFrom(from.kills_);
  assists_.MergeFrom(from.assists_);
  deaths_.MergeFrom(from.deaths_);
  scores_.MergeFrom(from.scores_);
  pings_.MergeFrom(from.pings_);
  team_scores_.MergeFrom(from.team_scores_);
  enemy_kills_.MergeFrom(from.enemy_kills_);
  enemy_headshots_.MergeFrom(from.enemy_headshots_);
  enemy_3ks_.MergeFrom(from.enemy_3ks_);
  enemy_4ks_.MergeFrom(from.enemy_4ks_);
  enemy_5ks_.MergeFrom(from.enemy_5ks_);
  mvps_.MergeFrom(from.mvps_);
  enemy_kills_agg_.MergeFrom(from.enemy_kills_agg_);
  enemy_2ks_.MergeFrom(from.enemy_2ks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from._internal_reservation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_confirm()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(from._internal_confirm());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_drop_info()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(from._internal_drop_info());
    }
    if (cached_has_bits & 0x00000010u) {
      reservationid_ = from.reservationid_;
    }
    if (cached_has_bits & 0x00000020u) {
      round_ = from.round_;
    }
    if (cached_has_bits & 0x00000040u) {
      round_result_ = from.round_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_result_ = from.match_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      reservation_stage_ = from.reservation_stage_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_duration_ = from.match_duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      spectators_count_ = from.spectators_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      spectators_count_tv_ = from.spectators_count_tv_;
    }
    if (cached_has_bits & 0x00001000u) {
      spectators_count_lnk_ = from.spectators_count_lnk_;
    }
    if (cached_has_bits & 0x00002000u) {
      b_switched_teams_ = from.b_switched_teams_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kills_.InternalSwap(&other->kills_);
  assists_.InternalSwap(&other->assists_);
  deaths_.InternalSwap(&other->deaths_);
  scores_.InternalSwap(&other->scores_);
  pings_.InternalSwap(&other->pings_);
  team_scores_.InternalSwap(&other->team_scores_);
  enemy_kills_.InternalSwap(&other->enemy_kills_);
  enemy_headshots_.InternalSwap(&other->enemy_headshots_);
  enemy_3ks_.InternalSwap(&other->enemy_3ks_);
  enemy_4ks_.InternalSwap(&other->enemy_4ks_);
  enemy_5ks_.InternalSwap(&other->enemy_5ks_);
  mvps_.InternalSwap(&other->mvps_);
  enemy_kills_agg_.InternalSwap(&other->enemy_kills_agg_);
  enemy_2ks_.InternalSwap(&other->enemy_2ks_);
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, b_switched_teams_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingServerRoundStats::b_switched_teams_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_)>(
          reinterpret_cast<char*>(&reservation_),
          reinterpret_cast<char*>(&other->reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingClient2GCHello::_Internal {
 public:
};

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}
CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SharedCtor() {
}

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::~CMsgGCCStrike15_v2_MatchmakingClient2GCHello() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingClient2GCHello* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingClient2GCHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingClient2GCHello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingClient2GCHello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2GCHello::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InternalSwap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingClient2GCHello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->ongoingmatch_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->global_stats_ = const_cast< ::GlobalStatistics*>(
      ::GlobalStatistics::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->ranking_ = const_cast< ::PlayerRankingInfo*>(
      ::PlayerRankingInfo::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->commendation_ = const_cast< ::PlayerCommendationInfo*>(
      ::PlayerCommendationInfo::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->medals_ = const_cast< ::PlayerMedalsInfo*>(
      ::PlayerMedalsInfo::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->my_current_event_ = const_cast< ::TournamentEvent*>(
      ::TournamentEvent::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->my_current_team_ = const_cast< ::TournamentTeam*>(
      ::TournamentTeam::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance.get_mutable()->activity_ = const_cast< ::AccountActivity*>(
      ::AccountActivity::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& ongoingmatch(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_ongoingmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GlobalStatistics& global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_penalty_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_penalty_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vac_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::PlayerRankingInfo& ranking(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PlayerCommendationInfo& commendation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_commendation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PlayerMedalsInfo& medals(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_medals(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TournamentEvent& my_current_event(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_my_current_event(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TournamentTeam& my_current_team(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_my_current_team(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_survey_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::AccountActivity& activity(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_player_cur_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_player_xp_bonus_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::ongoingmatch(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->ongoingmatch_;
}
const ::GlobalStatistics&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->global_stats_;
}
const ::PlayerRankingInfo&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::ranking(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->ranking_;
}
const ::PlayerCommendationInfo&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::commendation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->commendation_;
}
const ::PlayerMedalsInfo&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::medals(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->medals_;
}
const ::TournamentEvent&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::my_current_event(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->my_current_event_;
}
const ::TournamentTeam&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::my_current_team(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->my_current_team_;
}
const ::AccountActivity&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::activity(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->activity_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  my_current_event_teams_(arena),
  my_current_event_stages_(arena),
  rankings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      my_current_event_teams_(from.my_current_event_teams_),
      my_current_event_stages_(from.my_current_event_stages_),
      rankings_(from.rankings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ongoingmatch()) {
    ongoingmatch_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.ongoingmatch_);
  } else {
    ongoingmatch_ = nullptr;
  }
  if (from._internal_has_global_stats()) {
    global_stats_ = new ::GlobalStatistics(*from.global_stats_);
  } else {
    global_stats_ = nullptr;
  }
  if (from._internal_has_ranking()) {
    ranking_ = new ::PlayerRankingInfo(*from.ranking_);
  } else {
    ranking_ = nullptr;
  }
  if (from._internal_has_commendation()) {
    commendation_ = new ::PlayerCommendationInfo(*from.commendation_);
  } else {
    commendation_ = nullptr;
  }
  if (from._internal_has_medals()) {
    medals_ = new ::PlayerMedalsInfo(*from.medals_);
  } else {
    medals_ = nullptr;
  }
  if (from._internal_has_my_current_event()) {
    my_current_event_ = new ::TournamentEvent(*from.my_current_event_);
  } else {
    my_current_event_ = nullptr;
  }
  if (from._internal_has_my_current_team()) {
    my_current_team_ = new ::TournamentTeam(*from.my_current_team_);
  } else {
    my_current_team_ = nullptr;
  }
  if (from._internal_has_activity()) {
    activity_ = new ::AccountActivity(*from.activity_);
  } else {
    activity_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_xp_bonus_flags_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_xp_bonus_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&ongoingmatch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_xp_bonus_flags_) -
      reinterpret_cast<char*>(&ongoingmatch_)) + sizeof(player_xp_bonus_flags_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::~CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ongoingmatch_;
  if (this != internal_default_instance()) delete global_stats_;
  if (this != internal_default_instance()) delete ranking_;
  if (this != internal_default_instance()) delete commendation_;
  if (this != internal_default_instance()) delete medals_;
  if (this != internal_default_instance()) delete my_current_event_;
  if (this != internal_default_instance()) delete my_current_team_;
  if (this != internal_default_instance()) delete activity_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  my_current_event_teams_.Clear();
  my_current_event_stages_.Clear();
  rankings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ongoingmatch_ != nullptr);
      ongoingmatch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(global_stats_ != nullptr);
      global_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ranking_ != nullptr);
      ranking_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(commendation_ != nullptr);
      commendation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(medals_ != nullptr);
      medals_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(my_current_event_ != nullptr);
      my_current_event_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(my_current_team_ != nullptr);
      my_current_team_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(activity_ != nullptr);
      activity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_xp_bonus_flags_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_xp_bonus_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ongoingmatch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GlobalStatistics global_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_penalty_seconds(&has_bits);
          penalty_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_penalty_reason(&has_bits);
          penalty_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vac_banned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vac_banned(&has_bits);
          vac_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerRankingInfo ranking = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerCommendationInfo commendation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_commendation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerMedalsInfo medals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_medals(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TournamentEvent my_current_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_current_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentTeam my_current_event_teams = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_my_current_event_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TournamentTeam my_current_team = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_current_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentEvent my_current_event_stages = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_my_current_event_stages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 survey_vote = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_survey_vote(&has_bits);
          survey_vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AccountActivity activity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_level = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_player_level(&has_bits);
          player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_cur_xp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_player_cur_xp(&has_bits);
          player_cur_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_xp_bonus_flags = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_player_xp_bonus_flags(&has_bits);
          player_xp_bonus_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerRankingInfo rankings = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ongoingmatch(this), target, stream);
  }

  // optional .GlobalStatistics global_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::global_stats(this), target, stream);
  }

  // optional uint32 penalty_seconds = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_penalty_reason(), target);
  }

  // optional int32 vac_banned = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vac_banned(), target);
  }

  // optional .PlayerRankingInfo ranking = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ranking(this), target, stream);
  }

  // optional .PlayerCommendationInfo commendation = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::commendation(this), target, stream);
  }

  // optional .PlayerMedalsInfo medals = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::medals(this), target, stream);
  }

  // optional .TournamentEvent my_current_event = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::my_current_event(this), target, stream);
  }

  // repeated .TournamentTeam my_current_event_teams = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_my_current_event_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_my_current_event_teams(i), target, stream);
  }

  // optional .TournamentTeam my_current_team = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::my_current_team(this), target, stream);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_my_current_event_stages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_my_current_event_stages(i), target, stream);
  }

  // optional uint32 survey_vote = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_survey_vote(), target);
  }

  // optional .AccountActivity activity = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::activity(this), target, stream);
  }

  // optional int32 player_level = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_player_level(), target);
  }

  // optional int32 player_cur_xp = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_player_cur_xp(), target);
  }

  // optional int32 player_xp_bonus_flags = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_player_xp_bonus_flags(), target);
  }

  // repeated .PlayerRankingInfo rankings = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rankings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_rankings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TournamentTeam my_current_event_teams = 11;
  total_size += 1UL * this->_internal_my_current_event_teams_size();
  for (const auto& msg : this->my_current_event_teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  total_size += 1UL * this->_internal_my_current_event_stages_size();
  for (const auto& msg : this->my_current_event_stages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlayerRankingInfo rankings = 20;
  total_size += 2UL * this->_internal_rankings_size();
  for (const auto& msg : this->rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ongoingmatch_);
    }

    // optional .GlobalStatistics global_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_stats_);
    }

    // optional .PlayerRankingInfo ranking = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ranking_);
    }

    // optional .PlayerCommendationInfo commendation = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commendation_);
    }

    // optional .PlayerMedalsInfo medals = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *medals_);
    }

    // optional .TournamentEvent my_current_event = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *my_current_event_);
    }

    // optional .TournamentTeam my_current_team = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *my_current_team_);
    }

    // optional .AccountActivity activity = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activity_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 penalty_seconds = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_seconds());
    }

    // optional uint32 penalty_reason = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_reason());
    }

    // optional int32 vac_banned = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vac_banned());
    }

    // optional uint32 survey_vote = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_survey_vote());
    }

    // optional int32 player_level = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_level());
    }

    // optional int32 player_cur_xp = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_cur_xp());
    }

    // optional int32 player_xp_bonus_flags = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_xp_bonus_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  my_current_event_teams_.MergeFrom(from.my_current_event_teams_);
  my_current_event_stages_.MergeFrom(from.my_current_event_stages_);
  rankings_.MergeFrom(from.rankings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ongoingmatch()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from._internal_ongoingmatch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_global_stats()->::GlobalStatistics::MergeFrom(from._internal_global_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ranking()->::PlayerRankingInfo::MergeFrom(from._internal_ranking());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from._internal_commendation());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_medals()->::PlayerMedalsInfo::MergeFrom(from._internal_medals());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_my_current_event()->::TournamentEvent::MergeFrom(from._internal_my_current_event());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_my_current_team()->::TournamentTeam::MergeFrom(from._internal_my_current_team());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_activity()->::AccountActivity::MergeFrom(from._internal_activity());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      penalty_seconds_ = from.penalty_seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      penalty_reason_ = from.penalty_reason_;
    }
    if (cached_has_bits & 0x00000800u) {
      vac_banned_ = from.vac_banned_;
    }
    if (cached_has_bits & 0x00001000u) {
      survey_vote_ = from.survey_vote_;
    }
    if (cached_has_bits & 0x00002000u) {
      player_level_ = from.player_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      player_cur_xp_ = from.player_cur_xp_;
    }
    if (cached_has_bits & 0x00008000u) {
      player_xp_bonus_flags_ = from.player_xp_bonus_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  my_current_event_teams_.InternalSwap(&other->my_current_event_teams_);
  my_current_event_stages_.InternalSwap(&other->my_current_event_stages_);
  rankings_.InternalSwap(&other->rankings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_xp_bonus_flags_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_xp_bonus_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ongoingmatch_)>(
          reinterpret_cast<char*>(&ongoingmatch_),
          reinterpret_cast<char*>(&other->ongoingmatch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>()._has_bits_);
  static void set_has_setting_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_setting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}
CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&setting_type_, &from.setting_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_value_) -
    reinterpret_cast<char*>(&setting_type_)) + sizeof(setting_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedCtor() {
  ::memset(&setting_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_value_) -
      reinterpret_cast<char*>(&setting_type_)) + sizeof(setting_value_));
}

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::~CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* _this = reinterpret_cast< CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&setting_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_value_) -
        reinterpret_cast<char*>(&setting_type_)) + sizeof(setting_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 setting_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_setting_type(&has_bits);
          setting_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 setting_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_setting_value(&has_bits);
          setting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 setting_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_setting_type(), target);
  }

  // optional uint32 setting_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_setting_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  return target;
}

size_t CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 setting_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_setting_type());
    }

    // optional uint32 setting_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_setting_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      setting_type_ = from.setting_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      setting_value_ = from.setting_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_value_)
      + sizeof(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::setting_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_type_)>(
          reinterpret_cast<char*>(&setting_type_),
          reinterpret_cast<char*>(&other->setting_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_AccountPrivacySettings::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_AccountPrivacySettings::_Internal {
 public:
};

CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
}
CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(const CMsgGCCStrike15_v2_AccountPrivacySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_cstrike15_5fgcmessages_2eproto.base);
}

CMsgGCCStrike15_v2_AccountPrivacySettings::~CMsgGCCStrike15_v2_AccountPrivacySettings() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_AccountPrivacySettings* _this = reinterpret_cast< CMsgGCCStrike15_v2_AccountPrivacySettings* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_AccountPrivacySettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_AccountPrivacySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_AccountPrivacySettings& CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_AccountPrivacySettings_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_AccountPrivacySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_AccountPrivacySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_AccountPrivacySettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AccountPrivacySettings)
  return target;
}

size_t CMsgGCCStrike15_v2_AccountPrivacySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AccountPrivacySettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_AccountPrivacySettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_AccountPrivacySettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_AccountPrivacySettings)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settings_.InternalSwap(&other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_._instance.get_mutable()->abandoned_match_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& abandoned_match(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* msg);
  static void set_has_abandoned_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_penalty_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_penalty_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_Internal::abandoned_match(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* msg) {
  return *msg->abandoned_match_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_abandoned_match()) {
    abandoned_match_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.abandoned_match_);
  } else {
    abandoned_match_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_reason_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(penalty_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&abandoned_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_reason_) -
      reinterpret_cast<char*>(&abandoned_match_)) + sizeof(penalty_reason_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete abandoned_match_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(abandoned_match_ != nullptr);
    abandoned_match_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_reason_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(penalty_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_abandoned_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_penalty_seconds(&has_bits);
          penalty_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_penalty_reason(&has_bits);
          penalty_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::abandoned_match(this), target, stream);
  }

  // optional uint32 penalty_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_penalty_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abandoned_match_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 penalty_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_seconds());
    }

    // optional uint32 penalty_reason = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_abandoned_match()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from._internal_abandoned_match());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      penalty_seconds_ = from.penalty_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      penalty_reason_ = from.penalty_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_reason_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::penalty_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, abandoned_match_)>(
          reinterpret_cast<char*>(&abandoned_match_),
          reinterpret_cast<char*>(&other->abandoned_match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientGCRankUpdate::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientGCRankUpdate::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rankings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientGCRankUpdate)
}
CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rankings_(from.rankings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientGCRankUpdate)
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientGCRankUpdate_cstrike15_5fgcmessages_2eproto.base);
}

CMsgGCCStrike15_v2_ClientGCRankUpdate::~CMsgGCCStrike15_v2_ClientGCRankUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientGCRankUpdate* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientGCRankUpdate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientGCRankUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientGCRankUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientGCRankUpdate& CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientGCRankUpdate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientGCRankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientGCRankUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlayerRankingInfo rankings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientGCRankUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo rankings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rankings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rankings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientGCRankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo rankings = 1;
  total_size += 1UL * this->_internal_rankings_size();
  for (const auto& msg : this->rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientGCRankUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientGCRankUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientGCRankUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientGCRankUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::MergeFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankings_.MergeFrom(from.rankings_);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::CopyFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientGCRankUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::InternalSwap(CMsgGCCStrike15_v2_ClientGCRankUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rankings_.InternalSwap(&other->rankings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientGCRankUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>()._has_bits_);
  static void set_has_main_post_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}
CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_post_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_post_url()) {
    main_post_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_main_post_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_cstrike15_5fgcmessages_2eproto.base);
  main_post_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  main_post_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    main_post_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string main_post_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_main_post_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string main_post_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_post_url().data(), static_cast<int>(this->_internal_main_post_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_post_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string main_post_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_post_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_main_post_url()) {
    _internal_set_main_post_url(from._internal_main_post_url());
  }
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  main_post_url_.Swap(&other->main_post_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_communication_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}
CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&communication_cooldown_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(communication_cooldown_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&communication_cooldown_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(communication_cooldown_));
}

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::~CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* _this = reinterpret_cast< CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&communication_cooldown_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(communication_cooldown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool communication_cooldown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_communication_cooldown(&has_bits);
          communication_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds(), target);
  }

  // optional bool communication_cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_communication_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  return target;
}

size_t CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

    // optional uint32 seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds());
    }

    // optional bool communication_cooldown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      communication_cooldown_ = from.communication_cooldown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InternalSwap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, communication_cooldown_)
      + sizeof(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::communication_cooldown_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportPlayer::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientReportPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportPlayer>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpt_aimbot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpt_wallhack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpt_speedhack(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rpt_teamharm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rpt_textabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rpt_voiceabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_report_from_demo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportPlayer)
}
CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(const CMsgGCCStrike15_v2_ClientReportPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_from_demo_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(report_from_demo_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportPlayer)
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_from_demo_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(report_from_demo_));
}

CMsgGCCStrike15_v2_ClientReportPlayer::~CMsgGCCStrike15_v2_ClientReportPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientReportPlayer* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientReportPlayer* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientReportPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientReportPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientReportPlayer& CMsgGCCStrike15_v2_ClientReportPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientReportPlayer_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rpt_voiceabuse_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rpt_voiceabuse_));
  }
  report_from_demo_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_aimbot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rpt_aimbot(&has_bits);
          rpt_aimbot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_wallhack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rpt_wallhack(&has_bits);
          rpt_wallhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_speedhack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rpt_speedhack(&has_bits);
          rpt_speedhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_teamharm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rpt_teamharm(&has_bits);
          rpt_teamharm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_textabuse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rpt_textabuse(&has_bits);
          rpt_textabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_voiceabuse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rpt_voiceabuse(&has_bits);
          rpt_voiceabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_from_demo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_report_from_demo(&has_bits);
          report_from_demo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientReportPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 rpt_aimbot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rpt_teamharm(), target);
  }

  // optional uint32 rpt_textabuse = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rpt_textabuse(), target);
  }

  // optional uint32 rpt_voiceabuse = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rpt_voiceabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_match_id(), target);
  }

  // optional bool report_from_demo = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_report_from_demo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportPlayer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 rpt_aimbot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_teamharm());
    }

    // optional uint32 rpt_textabuse = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_textabuse());
    }

    // optional uint64 match_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 rpt_voiceabuse = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_voiceabuse());
    }

  }
  // optional bool report_from_demo = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientReportPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportPlayer)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportPlayer::MergeFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rpt_aimbot_ = from.rpt_aimbot_;
    }
    if (cached_has_bits & 0x00000004u) {
      rpt_wallhack_ = from.rpt_wallhack_;
    }
    if (cached_has_bits & 0x00000008u) {
      rpt_speedhack_ = from.rpt_speedhack_;
    }
    if (cached_has_bits & 0x00000010u) {
      rpt_teamharm_ = from.rpt_teamharm_;
    }
    if (cached_has_bits & 0x00000020u) {
      rpt_textabuse_ = from.rpt_textabuse_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      rpt_voiceabuse_ = from.rpt_voiceabuse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_report_from_demo(from._internal_report_from_demo());
  }
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportPlayer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::InternalSwap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, report_from_demo_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportPlayer::report_from_demo_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientCommendPlayer::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_._instance.get_mutable()->commendation_ = const_cast< ::PlayerCommendationInfo*>(
      ::PlayerCommendationInfo::internal_default_instance());
}
class CMsgGCCStrike15_v2_ClientCommendPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientCommendPlayer>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PlayerCommendationInfo& commendation(const CMsgGCCStrike15_v2_ClientCommendPlayer* msg);
  static void set_has_commendation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PlayerCommendationInfo&
CMsgGCCStrike15_v2_ClientCommendPlayer::_Internal::commendation(const CMsgGCCStrike15_v2_ClientCommendPlayer* msg) {
  return *msg->commendation_;
}
CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
}
CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(const CMsgGCCStrike15_v2_ClientCommendPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commendation()) {
    commendation_ = new ::PlayerCommendationInfo(*from.commendation_);
  } else {
    commendation_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&commendation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&commendation_)) + sizeof(match_id_));
}

CMsgGCCStrike15_v2_ClientCommendPlayer::~CMsgGCCStrike15_v2_ClientCommendPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commendation_;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientCommendPlayer* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientCommendPlayer* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientCommendPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientCommendPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientCommendPlayer& CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientCommendPlayer_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientCommendPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commendation_ != nullptr);
    commendation_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientCommendPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerCommendationInfo commendation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_commendation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tokens = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tokens(&has_bits);
          tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientCommendPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_match_id(), target);
  }

  // optional .PlayerCommendationInfo commendation = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::commendation(this), target, stream);
  }

  // optional uint32 tokens = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_tokens(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientCommendPlayer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientCommendPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .PlayerCommendationInfo commendation = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commendation_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 tokens = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tokens());
    }

    // optional uint64 match_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientCommendPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientCommendPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientCommendPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientCommendPlayer)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from._internal_commendation());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tokens_ = from.tokens_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientCommendPlayer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::InternalSwap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, match_id_)
      + sizeof(CMsgGCCStrike15_v2_ClientCommendPlayer::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, commendation_)>(
          reinterpret_cast<char*>(&commendation_),
          reinterpret_cast<char*>(&other->commendation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientCommendPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportServer::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientReportServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportServer>()._has_bits_);
  static void set_has_rpt_poorperf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpt_abusivemodels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpt_badmotd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpt_listingabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rpt_inventoryabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportServer)
}
CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(const CMsgGCCStrike15_v2_ClientReportServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rpt_poorperf_, &from.rpt_poorperf_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&rpt_poorperf_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportServer)
}

void CMsgGCCStrike15_v2_ClientReportServer::SharedCtor() {
  ::memset(&rpt_poorperf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&rpt_poorperf_)) + sizeof(match_id_));
}

CMsgGCCStrike15_v2_ClientReportServer::~CMsgGCCStrike15_v2_ClientReportServer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientReportServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientReportServer::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientReportServer* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientReportServer* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientReportServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientReportServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientReportServer& CMsgGCCStrike15_v2_ClientReportServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientReportServer_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&rpt_poorperf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&rpt_poorperf_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rpt_poorperf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rpt_poorperf(&has_bits);
          rpt_poorperf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_abusivemodels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rpt_abusivemodels(&has_bits);
          rpt_abusivemodels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_badmotd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rpt_badmotd(&has_bits);
          rpt_badmotd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_listingabuse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rpt_listingabuse(&has_bits);
          rpt_listingabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_inventoryabuse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rpt_inventoryabuse(&has_bits);
          rpt_inventoryabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientReportServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rpt_poorperf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rpt_poorperf(), target);
  }

  // optional uint32 rpt_abusivemodels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rpt_abusivemodels(), target);
  }

  // optional uint32 rpt_badmotd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rpt_badmotd(), target);
  }

  // optional uint32 rpt_listingabuse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rpt_listingabuse(), target);
  }

  // optional uint32 rpt_inventoryabuse = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rpt_inventoryabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportServer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 rpt_poorperf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_poorperf());
    }

    // optional uint32 rpt_abusivemodels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_abusivemodels());
    }

    // optional uint32 rpt_badmotd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_badmotd());
    }

    // optional uint32 rpt_listingabuse = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_listingabuse());
    }

    // optional uint32 rpt_inventoryabuse = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_inventoryabuse());
    }

    // optional uint64 match_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientReportServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportServer)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportServer::MergeFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      rpt_poorperf_ = from.rpt_poorperf_;
    }
    if (cached_has_bits & 0x00000002u) {
      rpt_abusivemodels_ = from.rpt_abusivemodels_;
    }
    if (cached_has_bits & 0x00000004u) {
      rpt_badmotd_ = from.rpt_badmotd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rpt_listingabuse_ = from.rpt_listingabuse_;
    }
    if (cached_has_bits & 0x00000010u) {
      rpt_inventoryabuse_ = from.rpt_inventoryabuse_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportServer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportServer::InternalSwap(CMsgGCCStrike15_v2_ClientReportServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, match_id_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportServer::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, rpt_poorperf_)>(
          reinterpret_cast<char*>(&rpt_poorperf_),
          reinterpret_cast<char*>(&other->rpt_poorperf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportResponse::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportResponse>()._has_bits_);
  static void set_has_confirmation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_response_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportResponse)
}
CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(const CMsgGCCStrike15_v2_ClientReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&confirmation_id_, &from.confirmation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tokens_) -
    reinterpret_cast<char*>(&confirmation_id_)) + sizeof(tokens_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportResponse)
}

void CMsgGCCStrike15_v2_ClientReportResponse::SharedCtor() {
  ::memset(&confirmation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokens_) -
      reinterpret_cast<char*>(&confirmation_id_)) + sizeof(tokens_));
}

CMsgGCCStrike15_v2_ClientReportResponse::~CMsgGCCStrike15_v2_ClientReportResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientReportResponse::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientReportResponse* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientReportResponse* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientReportResponse& CMsgGCCStrike15_v2_ClientReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientReportResponse_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&confirmation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tokens_) -
        reinterpret_cast<char*>(&confirmation_id_)) + sizeof(tokens_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 confirmation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_confirmation_id(&has_bits);
          confirmation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_ip(&has_bits);
          server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 response_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_response_type(&has_bits);
          response_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 response_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_response_result(&has_bits);
          response_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tokens = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tokens(&has_bits);
          tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 confirmation_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_confirmation_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_ip(), target);
  }

  // optional uint32 response_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_response_type(), target);
  }

  // optional uint32 response_result = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_response_result(), target);
  }

  // optional uint32 tokens = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tokens(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 confirmation_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_confirmation_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 server_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_ip());
    }

    // optional uint32 response_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_response_type());
    }

    // optional uint32 response_result = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_response_result());
    }

    // optional uint32 tokens = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tokens());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportResponse::MergeFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      confirmation_id_ = from.confirmation_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      response_type_ = from.response_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      response_result_ = from.response_result_;
    }
    if (cached_has_bits & 0x00000020u) {
      tokens_ = from.tokens_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportResponse::InternalSwap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, tokens_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportResponse::tokens_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, confirmation_id_)>(
          reinterpret_cast<char*>(&confirmation_id_),
          reinterpret_cast<char*>(&other->confirmation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena),
  data_center_pings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      data_center_pings_(from.data_center_pings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(matchid_));
}

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  data_center_pings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchid_) -
        reinterpret_cast<char*>(&serverid_)) + sizeof(matchid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_serverid(&has_bits);
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_launcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_launcher(&has_bits);
          client_launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DataCenterPing data_center_pings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_center_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids(i), target);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_serverid(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_matchid(), target);
  }

  // optional uint32 client_launcher = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_launcher(), target);
  }

  // repeated .DataCenterPing data_center_pings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_center_pings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_data_center_pings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated .DataCenterPing data_center_pings = 6;
  total_size += 1UL * this->_internal_data_center_pings_size();
  for (const auto& msg : this->data_center_pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 serverid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_serverid());
    }

    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_request_id());
    }

    // optional uint32 client_launcher = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_launcher());
    }

    // optional uint64 matchid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  data_center_pings_.MergeFrom(from.data_center_pings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_launcher_ = from.client_launcher_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchid_ = from.matchid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InternalSwap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  data_center_pings_.InternalSwap(&other->data_center_pings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, matchid_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::matchid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchableMatchInfo::InitAsDefaultInstance() {
}
class WatchableMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WatchableMatchInfo>()._has_bits_);
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tv_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tv_watch_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cl_decryptdata_key(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cl_decryptdata_key_pub(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_game_mapgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reservation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

WatchableMatchInfo::WatchableMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WatchableMatchInfo)
}
WatchableMatchInfo::WatchableMatchInfo(const WatchableMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tv_watch_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tv_watch_password()) {
    tv_watch_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tv_watch_password(),
      GetArena());
  }
  game_mapgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_mapgroup()) {
    game_mapgroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_mapgroup(),
      GetArena());
  }
  game_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_map()) {
    game_map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_map(),
      GetArena());
  }
  ::memcpy(&server_ip_, &from.server_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&server_ip_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:WatchableMatchInfo)
}

void WatchableMatchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto.base);
  tv_watch_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_mapgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&server_ip_)) + sizeof(game_type_));
}

WatchableMatchInfo::~WatchableMatchInfo() {
  // @@protoc_insertion_point(destructor:WatchableMatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchableMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tv_watch_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_mapgroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchableMatchInfo::ArenaDtor(void* object) {
  WatchableMatchInfo* _this = reinterpret_cast< WatchableMatchInfo* >(object);
  (void)_this;
}
void WatchableMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchableMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchableMatchInfo& WatchableMatchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchableMatchInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void WatchableMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchableMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tv_watch_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_mapgroup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      game_map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&server_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cl_decryptdata_key_) -
        reinterpret_cast<char*>(&server_ip_)) + sizeof(cl_decryptdata_key_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&cl_decryptdata_key_pub_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_type_) -
        reinterpret_cast<char*>(&cl_decryptdata_key_pub_)) + sizeof(game_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchableMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_ip(&has_bits);
          server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tv_port(&has_bits);
          tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_spectators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tv_spectators(&has_bits);
          tv_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tv_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tv_time(&has_bits);
          tv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tv_watch_password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tv_watch_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 cl_decryptdata_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cl_decryptdata_key(&has_bits);
          cl_decryptdata_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 cl_decryptdata_key_pub = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cl_decryptdata_key_pub(&has_bits);
          cl_decryptdata_key_pub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_mapgroup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_game_mapgroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchableMatchInfo.game_mapgroup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_game_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchableMatchInfo.game_map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 server_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_server_id(&has_bits);
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 reservation_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_reservation_id(&has_bits);
          reservation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchableMatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchableMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_ip(), target);
  }

  // optional uint32 tv_port = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tv_port(), target);
  }

  // optional uint32 tv_spectators = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tv_spectators(), target);
  }

  // optional uint32 tv_time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tv_time(), target);
  }

  // optional bytes tv_watch_password = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tv_watch_password(), target);
  }

  // optional uint64 cl_decryptdata_key = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cl_decryptdata_key(), target);
  }

  // optional uint64 cl_decryptdata_key_pub = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_cl_decryptdata_key_pub(), target);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_mapgroup().data(), static_cast<int>(this->_internal_game_mapgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_mapgroup");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_map().data(), static_cast<int>(this->_internal_game_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_map");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_game_map(), target);
  }

  // optional uint64 server_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_server_id(), target);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_match_id(), target);
  }

  // optional uint64 reservation_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_reservation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchableMatchInfo)
  return target;
}

size_t WatchableMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchableMatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes tv_watch_password = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tv_watch_password());
    }

    // optional string game_mapgroup = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_mapgroup());
    }

    // optional string game_map = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_map());
    }

    // optional uint32 server_ip = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_ip());
    }

    // optional uint32 tv_port = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_port());
    }

    // optional uint32 tv_spectators = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_spectators());
    }

    // optional uint32 tv_time = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tv_time());
    }

    // optional uint64 cl_decryptdata_key = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_cl_decryptdata_key());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 cl_decryptdata_key_pub = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_cl_decryptdata_key_pub());
    }

    // optional uint64 server_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_server_id());
    }

    // optional uint64 match_id = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint64 reservation_id = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_reservation_id());
    }

    // optional uint32 game_type = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchableMatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WatchableMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchableMatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchableMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WatchableMatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WatchableMatchInfo)
    MergeFrom(*source);
  }
}

void WatchableMatchInfo::MergeFrom(const WatchableMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchableMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tv_watch_password(from._internal_tv_watch_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_mapgroup(from._internal_game_mapgroup());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_game_map(from._internal_game_map());
    }
    if (cached_has_bits & 0x00000008u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_port_ = from.tv_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_spectators_ = from.tv_spectators_;
    }
    if (cached_has_bits & 0x00000040u) {
      tv_time_ = from.tv_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      cl_decryptdata_key_ = from.cl_decryptdata_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      cl_decryptdata_key_pub_ = from.cl_decryptdata_key_pub_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      reservation_id_ = from.reservation_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      game_type_ = from.game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WatchableMatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WatchableMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchableMatchInfo::CopyFrom(const WatchableMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchableMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchableMatchInfo::IsInitialized() const {
  return true;
}

void WatchableMatchInfo::InternalSwap(WatchableMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tv_watch_password_.Swap(&other->tv_watch_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_mapgroup_.Swap(&other->game_mapgroup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_map_.Swap(&other->game_map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchableMatchInfo, game_type_)
      + sizeof(WatchableMatchInfo::game_type_)
      - PROTOBUF_FIELD_OFFSET(WatchableMatchInfo, server_ip_)>(
          reinterpret_cast<char*>(&server_ip_),
          reinterpret_cast<char*>(&other->server_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchableMatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_._instance.get_mutable()->res_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
}
class CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_join_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_join_ipp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_Internal::res(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* msg) {
  return *msg->res_;
}
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errormsg()) {
    errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errormsg(),
      GetArena());
  }
  if (from._internal_has_res()) {
    res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.res_);
  } else {
    res_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_ipp_) -
    reinterpret_cast<char*>(&version_)) + sizeof(join_ipp_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_cstrike15_5fgcmessages_2eproto.base);
  errormsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_ipp_) -
      reinterpret_cast<char*>(&res_)) + sizeof(join_ipp_));
}

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::~CMsgGCCStrike15_v2_ClientRequestJoinFriendData() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errormsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete res_;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientRequestJoinFriendData* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      errormsg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&join_ipp_) -
        reinterpret_cast<char*>(&version_)) + sizeof(join_ipp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 join_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_join_token(&has_bits);
          join_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 join_ipp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_join_ipp(&has_bits);
          join_ipp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errormsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 join_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_join_token(), target);
  }

  // optional uint32 join_ipp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_join_ipp(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::res(this), target, stream);
  }

  // optional string errormsg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestJoinFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string errormsg = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errormsg());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 join_token = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_join_token());
    }

    // optional uint32 join_ipp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_join_ipp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errormsg(from._internal_errormsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from._internal_res());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      join_token_ = from.join_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      join_ipp_ = from.join_ipp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errormsg_.Swap(&other->errormsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_ipp_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestJoinFriendData::join_ipp_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, res_)>(
          reinterpret_cast<char*>(&res_),
          reinterpret_cast<char*>(&other->res_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestJoinFriendData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_._instance.get_mutable()->res_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::internal_default_instance());
}
class CMsgGCCStrike15_v2_ClientRequestJoinServerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestJoinServerData>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res(const CMsgGCCStrike15_v2_ClientRequestJoinServerData* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_ClientRequestJoinServerData::_Internal::res(const CMsgGCCStrike15_v2_ClientRequestJoinServerData* msg) {
  return *msg->res_;
}
CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}
CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errormsg()) {
    errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errormsg(),
      GetArena());
  }
  if (from._internal_has_res()) {
    res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from.res_);
  } else {
    res_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData_cstrike15_5fgcmessages_2eproto.base);
  errormsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&res_)) + sizeof(server_port_));
}

CMsgGCCStrike15_v2_ClientRequestJoinServerData::~CMsgGCCStrike15_v2_ClientRequestJoinServerData() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errormsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete res_;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientRequestJoinServerData* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientRequestJoinServerData* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientRequestJoinServerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientRequestJoinServerData& CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientRequestJoinServerData_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestJoinServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      errormsg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_port_) -
        reinterpret_cast<char*>(&version_)) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestJoinServerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_serverid(&has_bits);
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_ip(&has_bits);
          server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errormsg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientRequestJoinServerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_serverid(), target);
  }

  // optional uint32 server_ip = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_ip(), target);
  }

  // optional uint32 server_port = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_port(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::res(this), target, stream);
  }

  // optional string errormsg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestJoinServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string errormsg = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errormsg());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint64 serverid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_serverid());
    }

    // optional uint32 server_ip = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_ip());
    }

    // optional uint32 server_port = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestJoinServerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientRequestJoinServerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errormsg(from._internal_errormsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from._internal_res());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errormsg_.Swap(&other->errormsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_port_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestJoinServerData::server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, res_)>(
          reinterpret_cast<char*>(&res_),
          reinterpret_cast<char*>(&other->res_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestJoinServerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCstrike15_v2_ClientRequestNewMission::InitAsDefaultInstance() {
}
class CMsgGCCstrike15_v2_ClientRequestNewMission::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCstrike15_v2_ClientRequestNewMission>()._has_bits_);
  static void set_has_mission_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_campaign_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
}
CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(const CMsgGCCstrike15_v2_ClientRequestNewMission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&campaign_id_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(campaign_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedCtor() {
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campaign_id_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(campaign_id_));
}

CMsgGCCstrike15_v2_ClientRequestNewMission::~CMsgGCCstrike15_v2_ClientRequestNewMission() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::ArenaDtor(void* object) {
  CMsgGCCstrike15_v2_ClientRequestNewMission* _this = reinterpret_cast< CMsgGCCstrike15_v2_ClientRequestNewMission* >(object);
  (void)_this;
}
void CMsgGCCstrike15_v2_ClientRequestNewMission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCstrike15_v2_ClientRequestNewMission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCstrike15_v2_ClientRequestNewMission& CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCstrike15_v2_ClientRequestNewMission_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCstrike15_v2_ClientRequestNewMission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mission_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&campaign_id_) -
        reinterpret_cast<char*>(&mission_id_)) + sizeof(campaign_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCstrike15_v2_ClientRequestNewMission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mission_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mission_id(&has_bits);
          mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 campaign_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_campaign_id(&has_bits);
          campaign_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCstrike15_v2_ClientRequestNewMission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mission_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mission_id(), target);
  }

  // optional uint32 campaign_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_campaign_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_ClientRequestNewMission)
  return target;
}

size_t CMsgGCCstrike15_v2_ClientRequestNewMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 mission_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mission_id());
    }

    // optional uint32 campaign_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_campaign_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_ClientRequestNewMission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCstrike15_v2_ClientRequestNewMission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCstrike15_v2_ClientRequestNewMission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCstrike15_v2_ClientRequestNewMission)
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mission_id_ = from.mission_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      campaign_id_ = from.campaign_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_ClientRequestNewMission::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::InternalSwap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, campaign_id_)
      + sizeof(CMsgGCCstrike15_v2_ClientRequestNewMission::campaign_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, mission_id_)>(
          reinterpret_cast<char*>(&mission_id_),
          reinterpret_cast<char*>(&other->mission_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCstrike15_v2_ClientRequestNewMission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InitAsDefaultInstance() {
}
class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upgraded_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operation_points_awarded(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  xp_progress_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      xp_progress_data_(from.xp_progress_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_points_awarded_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(operation_points_awarded_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_points_awarded_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(operation_points_awarded_));
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::ArenaDtor(void* object) {
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* _this = reinterpret_cast< CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* >(object);
  (void)_this;
}
void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xp_progress_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_points_awarded_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(operation_points_awarded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .XpProgressData xp_progress_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_progress_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_current_xp(&has_bits);
          current_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_current_level(&has_bits);
          current_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 upgraded_defidx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_upgraded_defidx(&has_bits);
          upgraded_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 operation_points_awarded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_operation_points_awarded(&has_bits);
          operation_points_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XpProgressData xp_progress_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_xp_progress_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_xp_progress_data(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 current_xp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_xp(), target);
  }

  // optional uint32 current_level = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current_level(), target);
  }

  // optional uint32 upgraded_defidx = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_upgraded_defidx(), target);
  }

  // optional uint32 operation_points_awarded = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_operation_points_awarded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  return target;
}

size_t CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XpProgressData xp_progress_data = 1;
  total_size += 1UL * this->_internal_xp_progress_data_size();
  for (const auto& msg : this->xp_progress_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 current_xp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_xp());
    }

    // optional uint32 current_level = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_level());
    }

    // optional uint32 upgraded_defidx = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_upgraded_defidx());
    }

    // optional uint32 operation_points_awarded = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_operation_points_awarded());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_xp_ = from.current_xp_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_level_ = from.current_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      upgraded_defidx_ = from.upgraded_defidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      operation_points_awarded_ = from.operation_points_awarded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InternalSwap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  xp_progress_data_.InternalSwap(&other->xp_progress_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, operation_points_awarded_)
      + sizeof(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::operation_points_awarded_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_WatchInfoUsers::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_WatchInfoUsers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_WatchInfoUsers>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extended_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena),
  watchable_match_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_WatchInfoUsers)
}
CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(const CMsgGCCStrike15_v2_WatchInfoUsers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      watchable_match_infos_(from.watchable_match_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&extended_timeout_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(extended_timeout_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_WatchInfoUsers)
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_WatchInfoUsers_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extended_timeout_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(extended_timeout_));
}

CMsgGCCStrike15_v2_WatchInfoUsers::~CMsgGCCStrike15_v2_WatchInfoUsers() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_WatchInfoUsers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_WatchInfoUsers* _this = reinterpret_cast< CMsgGCCStrike15_v2_WatchInfoUsers* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_WatchInfoUsers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_WatchInfoUsers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_WatchInfoUsers& CMsgGCCStrike15_v2_WatchInfoUsers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_WatchInfoUsers_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_WatchInfoUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  watchable_match_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extended_timeout_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(extended_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_WatchInfoUsers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WatchableMatchInfo watchable_match_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_watchable_match_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 extended_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_extended_timeout(&has_bits);
          extended_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_WatchInfoUsers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids(i), target);
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_watchable_match_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_watchable_match_infos(i), target, stream);
  }

  // optional uint32 extended_timeout = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_extended_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_WatchInfoUsers)
  return target;
}

size_t CMsgGCCStrike15_v2_WatchInfoUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  total_size += 1UL * this->_internal_watchable_match_infos_size();
  for (const auto& msg : this->watchable_match_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_request_id());
    }

    // optional uint32 extended_timeout = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extended_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_WatchInfoUsers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_WatchInfoUsers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_WatchInfoUsers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_WatchInfoUsers)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_WatchInfoUsers::MergeFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  watchable_match_infos_.MergeFrom(from.watchable_match_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_timeout_ = from.extended_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_WatchInfoUsers::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::InternalSwap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  watchable_match_infos_.InternalSwap(&other->watchable_match_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, extended_timeout_)
      + sizeof(CMsgGCCStrike15_v2_WatchInfoUsers::extended_timeout_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_WatchInfoUsers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>()._has_bits_);
  static void set_has_request_id__deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids__deprecated_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids__deprecated_(from.account_ids__deprecated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id__deprecated_, &from.request_id__deprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_level_) -
    reinterpret_cast<char*>(&request_id__deprecated_)) + sizeof(request_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedCtor() {
  ::memset(&request_id__deprecated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_level_) -
      reinterpret_cast<char*>(&request_id__deprecated_)) + sizeof(request_level_));
}

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::~CMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientRequestPlayersProfile* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids__deprecated_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&request_id__deprecated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_level_) -
        reinterpret_cast<char*>(&request_id__deprecated_)) + sizeof(request_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 request_id__deprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_request_id__deprecated(&has_bits);
          request_id__deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_ids__deprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids__deprecated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids__deprecated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 request_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_request_level(&has_bits);
          request_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id__deprecated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id__deprecated(), target);
  }

  // repeated uint32 account_ids__deprecated = 2;
  for (int i = 0, n = this->_internal_account_ids__deprecated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids__deprecated(i), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // optional uint32 request_level = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_request_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestPlayersProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids__deprecated = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids__deprecated_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids__deprecated_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 request_id__deprecated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_request_id__deprecated());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 request_level = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_request_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestPlayersProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids__deprecated_.MergeFrom(from.account_ids__deprecated_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      request_id__deprecated_ = from.request_id__deprecated_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      request_level_ = from.request_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InternalSwap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids__deprecated_.InternalSwap(&other->account_ids__deprecated_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_level_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestPlayersProfile::request_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_id__deprecated_)>(
          reinterpret_cast<char*>(&request_id__deprecated_),
          reinterpret_cast<char*>(&other->request_id__deprecated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestPlayersProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayersProfile::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_PlayersProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayersProfile>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_profiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayersProfile)
}
CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(const CMsgGCCStrike15_v2_PlayersProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_profiles_(from.account_profiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayersProfile)
}

void CMsgGCCStrike15_v2_PlayersProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_PlayersProfile_cstrike15_5fgcmessages_2eproto.base);
  request_id_ = 0u;
}

CMsgGCCStrike15_v2_PlayersProfile::~CMsgGCCStrike15_v2_PlayersProfile() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayersProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_PlayersProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_PlayersProfile::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_PlayersProfile* _this = reinterpret_cast< CMsgGCCStrike15_v2_PlayersProfile* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_PlayersProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_PlayersProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_PlayersProfile& CMsgGCCStrike15_v2_PlayersProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_PlayersProfile_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayersProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayersProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_profiles_.Clear();
  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayersProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_PlayersProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayersProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_account_profiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_account_profiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayersProfile)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayersProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayersProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  total_size += 1UL * this->_internal_account_profiles_size();
  for (const auto& msg : this->account_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 request_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayersProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayersProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_PlayersProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayersProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayersProfile)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayersProfile::MergeFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_profiles_.MergeFrom(from.account_profiles_);
  if (from._internal_has_request_id()) {
    _internal_set_request_id(from._internal_request_id());
  }
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayersProfile::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayersProfile::InternalSwap(CMsgGCCStrike15_v2_PlayersProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_profiles_.InternalSwap(&other->account_profiles_);
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayersProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>()._has_bits_);
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suspectid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fractionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpt_aimbot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rpt_wallhack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rpt_speedhack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rpt_teamharm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedCtor() {
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* _this = reinterpret_cast< CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 caseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_caseid(&has_bits);
          caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suspectid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_suspectid(&has_bits);
          suspectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fractionid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fractionid(&has_bits);
          fractionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_aimbot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rpt_aimbot(&has_bits);
          rpt_aimbot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_wallhack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rpt_wallhack(&has_bits);
          rpt_wallhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_speedhack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rpt_speedhack(&has_bits);
          rpt_speedhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpt_teamharm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rpt_teamharm(&has_bits);
          rpt_teamharm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_caseid(), target);
  }

  // optional uint32 suspectid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_suspectid(), target);
  }

  // optional uint32 fractionid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fractionid(), target);
  }

  // optional uint32 rpt_aimbot = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rpt_teamharm(), target);
  }

  // optional uint32 reason = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 caseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_caseid());
    }

    // optional uint32 suspectid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suspectid());
    }

    // optional uint32 fractionid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fractionid());
    }

    // optional uint32 rpt_aimbot = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rpt_teamharm());
    }

    // optional uint32 reason = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      suspectid_ = from.suspectid_;
    }
    if (cached_has_bits & 0x00000004u) {
      fractionid_ = from.fractionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rpt_aimbot_ = from.rpt_aimbot_;
    }
    if (cached_has_bits & 0x00000010u) {
      rpt_wallhack_ = from.rpt_wallhack_;
    }
    if (cached_has_bits & 0x00000020u) {
      rpt_speedhack_ = from.rpt_speedhack_;
    }
    if (cached_has_bits & 0x00000040u) {
      rpt_teamharm_ = from.rpt_teamharm_;
    }
    if (cached_has_bits & 0x00000080u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, reason_)
      + sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, caseid_)>(
          reinterpret_cast<char*>(&caseid_),
          reinterpret_cast<char*>(&other->caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>()._has_bits_);
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttleseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suspectid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fractionid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_numrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fractionrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_streakconvictions(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caseurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caseurl()) {
    caseurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caseurl(),
      GetArena());
  }
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_cstrike15_5fgcmessages_2eproto.base);
  caseurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(reason_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caseurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* _this = reinterpret_cast< CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    caseurl_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numrounds_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(numrounds_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&fractionrounds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&fractionrounds_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 caseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_caseid(&has_bits);
          caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caseurl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caseurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verdict = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_verdict(&has_bits);
          verdict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 throttleseconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_throttleseconds(&has_bits);
          throttleseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suspectid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_suspectid(&has_bits);
          suspectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fractionid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fractionid(&has_bits);
          fractionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numrounds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_numrounds(&has_bits);
          numrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fractionrounds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fractionrounds(&has_bits);
          fractionrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 streakconvictions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_streakconvictions(&has_bits);
          streakconvictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_caseid(), target);
  }

  // optional string caseurl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caseurl().data(), static_cast<int>(this->_internal_caseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caseurl(), target);
  }

  // optional uint32 verdict = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_verdict(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // optional uint32 throttleseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_throttleseconds(), target);
  }

  // optional uint32 suspectid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_suspectid(), target);
  }

  // optional uint32 fractionid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fractionid(), target);
  }

  // optional uint32 numrounds = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_numrounds(), target);
  }

  // optional uint32 fractionrounds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fractionrounds(), target);
  }

  // optional int32 streakconvictions = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_streakconvictions(), target);
  }

  // optional uint32 reason = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string caseurl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caseurl());
    }

    // optional uint64 caseid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_caseid());
    }

    // optional uint32 verdict = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verdict());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 throttleseconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_throttleseconds());
    }

    // optional uint32 suspectid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suspectid());
    }

    // optional uint32 fractionid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fractionid());
    }

    // optional uint32 numrounds = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numrounds());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 fractionrounds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fractionrounds());
    }

    // optional int32 streakconvictions = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_streakconvictions());
    }

    // optional uint32 reason = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_caseurl(from._internal_caseurl());
    }
    if (cached_has_bits & 0x00000002u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      verdict_ = from.verdict_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttleseconds_ = from.throttleseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      suspectid_ = from.suspectid_;
    }
    if (cached_has_bits & 0x00000040u) {
      fractionid_ = from.fractionid_;
    }
    if (cached_has_bits & 0x00000080u) {
      numrounds_ = from.numrounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      fractionrounds_ = from.fractionrounds_;
    }
    if (cached_has_bits & 0x00000200u) {
      streakconvictions_ = from.streakconvictions_;
    }
    if (cached_has_bits & 0x00000400u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caseurl_.Swap(&other->caseurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, reason_)
      + sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseid_)>(
          reinterpret_cast<char*>(&caseid_),
          reinterpret_cast<char*>(&other->caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>()._has_bits_);
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_statusid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusid_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(statusid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedCtor() {
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusid_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(statusid_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* _this = reinterpret_cast< CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&statusid_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(statusid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 caseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_caseid(&has_bits);
          caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 statusid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_statusid(&has_bits);
          statusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_caseid(), target);
  }

  // optional uint32 statusid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_statusid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 caseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_caseid());
    }

    // optional uint32 statusid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_statusid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      statusid_ = from.statusid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, statusid_)
      + sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::statusid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, caseid_)>(
          reinterpret_cast<char*>(&caseid_),
          reinterpret_cast<char*>(&other->caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CClientHeaderOverwatchEvidence::InitAsDefaultInstance() {
}
class CClientHeaderOverwatchEvidence::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientHeaderOverwatchEvidence>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientHeaderOverwatchEvidence)
}
CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(const CClientHeaderOverwatchEvidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&caseid_, &from.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&caseid_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CClientHeaderOverwatchEvidence)
}

void CClientHeaderOverwatchEvidence::SharedCtor() {
  ::memset(&caseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&caseid_)) + sizeof(accountid_));
}

CClientHeaderOverwatchEvidence::~CClientHeaderOverwatchEvidence() {
  // @@protoc_insertion_point(destructor:CClientHeaderOverwatchEvidence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientHeaderOverwatchEvidence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CClientHeaderOverwatchEvidence::ArenaDtor(void* object) {
  CClientHeaderOverwatchEvidence* _this = reinterpret_cast< CClientHeaderOverwatchEvidence* >(object);
  (void)_this;
}
void CClientHeaderOverwatchEvidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientHeaderOverwatchEvidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientHeaderOverwatchEvidence& CClientHeaderOverwatchEvidence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CClientHeaderOverwatchEvidence_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientHeaderOverwatchEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientHeaderOverwatchEvidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&caseid_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientHeaderOverwatchEvidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 caseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caseid(&has_bits);
          caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientHeaderOverwatchEvidence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientHeaderOverwatchEvidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 caseid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_caseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientHeaderOverwatchEvidence)
  return target;
}

size_t CClientHeaderOverwatchEvidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientHeaderOverwatchEvidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 caseid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_caseid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientHeaderOverwatchEvidence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientHeaderOverwatchEvidence)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientHeaderOverwatchEvidence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientHeaderOverwatchEvidence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientHeaderOverwatchEvidence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientHeaderOverwatchEvidence)
    MergeFrom(*source);
  }
}

void CClientHeaderOverwatchEvidence::MergeFrom(const CClientHeaderOverwatchEvidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientHeaderOverwatchEvidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      caseid_ = from.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientHeaderOverwatchEvidence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientHeaderOverwatchEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientHeaderOverwatchEvidence::CopyFrom(const CClientHeaderOverwatchEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientHeaderOverwatchEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientHeaderOverwatchEvidence::IsInitialized() const {
  return true;
}

void CClientHeaderOverwatchEvidence::InternalSwap(CClientHeaderOverwatchEvidence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientHeaderOverwatchEvidence, accountid_)
      + sizeof(CClientHeaderOverwatchEvidence::accountid_)
      - PROTOBUF_FIELD_OFFSET(CClientHeaderOverwatchEvidence, caseid_)>(
          reinterpret_cast<char*>(&caseid_),
          reinterpret_cast<char*>(&other->caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientHeaderOverwatchEvidence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ClientTextMsg::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GC2ClientTextMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientTextMsg>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}
CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg_cstrike15_5fgcmessages_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgGCCStrike15_v2_GC2ClientTextMsg::~CMsgGCCStrike15_v2_GC2ClientTextMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GC2ClientTextMsg* _this = reinterpret_cast< CMsgGCCStrike15_v2_GC2ClientTextMsg* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GC2ClientTextMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GC2ClientTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GC2ClientTextMsg& CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GC2ClientTextMsg_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ClientTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientTextMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GC2ClientTextMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientTextMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GC2ClientTextMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ClientTextMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ClientTextMsg)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTextMsg::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::InternalSwap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, type_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientTextMsg::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientTextMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCTextMsg::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Client2GCTextMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCTextMsg>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
}
CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(const CMsgGCCStrike15_v2_Client2GCTextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg_cstrike15_5fgcmessages_2eproto.base);
  id_ = 0u;
}

CMsgGCCStrike15_v2_Client2GCTextMsg::~CMsgGCCStrike15_v2_Client2GCTextMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Client2GCTextMsg* _this = reinterpret_cast< CMsgGCCStrike15_v2_Client2GCTextMsg* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Client2GCTextMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Client2GCTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Client2GCTextMsg& CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Client2GCTextMsg_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCTextMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Client2GCTextMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated bytes args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCTextMsg)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      args_.Get(i));
  }

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCTextMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Client2GCTextMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCTextMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCTextMsg)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCTextMsg::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::InternalSwap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCTextMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_._instance.get_mutable()->serverinfo_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::internal_default_instance());
  ::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_._instance.get_mutable()->match_end_quest_data_ = const_cast< ::CMsgGC_ServerQuestUpdateData*>(
      ::CMsgGC_ServerQuestUpdateData::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>()._has_bits_);
  static const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& serverinfo(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg);
  static void set_has_serverinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGC_ServerQuestUpdateData& match_end_quest_data(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg);
  static void set_has_match_end_quest_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse&
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_Internal::serverinfo(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg) {
  return *msg->serverinfo_;
}
const ::CMsgGC_ServerQuestUpdateData&
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_Internal::match_end_quest_data(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg) {
  return *msg->match_end_quest_data_;
}
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serverinfo()) {
    serverinfo_ = new ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(*from.serverinfo_);
  } else {
    serverinfo_ = nullptr;
  }
  if (from._internal_has_match_end_quest_data()) {
    match_end_quest_data_ = new ::CMsgGC_ServerQuestUpdateData(*from.match_end_quest_data_);
  } else {
    match_end_quest_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&serverinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_end_quest_data_) -
      reinterpret_cast<char*>(&serverinfo_)) + sizeof(match_end_quest_data_));
}

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::~CMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete serverinfo_;
  if (this != internal_default_instance()) delete match_end_quest_data_;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchEndRunRewardDrops* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(serverinfo_ != nullptr);
      serverinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(match_end_quest_data_ != nullptr);
      match_end_quest_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_end_quest_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::serverinfo(this), target, stream);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::match_end_quest_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchEndRunRewardDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *serverinfo_);
    }

    // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_end_quest_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_serverinfo()->::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(from._internal_serverinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_match_end_quest_data()->::CMsgGC_ServerQuestUpdateData::MergeFrom(from._internal_match_end_quest_data());
    }
  }
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InternalSwap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, match_end_quest_data_)
      + sizeof(CMsgGCCStrike15_v2_MatchEndRunRewardDrops::match_end_quest_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, serverinfo_)>(
          reinterpret_cast<char*>(&serverinfo_),
          reinterpret_cast<char*>(&other->serverinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchEndRunRewardDrops::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CEconItemPreviewDataBlock_Sticker::InitAsDefaultInstance() {
}
class CEconItemPreviewDataBlock_Sticker::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItemPreviewDataBlock_Sticker>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sticker_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tint_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEconItemPreviewDataBlock.Sticker)
}
CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&tint_id_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(tint_id_));
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock.Sticker)
}

void CEconItemPreviewDataBlock_Sticker::SharedCtor() {
  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tint_id_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(tint_id_));
}

CEconItemPreviewDataBlock_Sticker::~CEconItemPreviewDataBlock_Sticker() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock.Sticker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEconItemPreviewDataBlock_Sticker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CEconItemPreviewDataBlock_Sticker::ArenaDtor(void* object) {
  CEconItemPreviewDataBlock_Sticker* _this = reinterpret_cast< CEconItemPreviewDataBlock_Sticker* >(object);
  (void)_this;
}
void CEconItemPreviewDataBlock_Sticker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItemPreviewDataBlock_Sticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock_Sticker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CEconItemPreviewDataBlock_Sticker_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CEconItemPreviewDataBlock_Sticker::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock.Sticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tint_id_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(tint_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItemPreviewDataBlock_Sticker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sticker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sticker_id(&has_bits);
          sticker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_wear(&has_bits);
          wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 tint_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tint_id(&has_bits);
          tint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEconItemPreviewDataBlock_Sticker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock.Sticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // optional uint32 sticker_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sticker_id(), target);
  }

  // optional float wear = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_wear(), target);
  }

  // optional float scale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scale(), target);
  }

  // optional float rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rotation(), target);
  }

  // optional uint32 tint_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tint_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock.Sticker)
  return target;
}

size_t CEconItemPreviewDataBlock_Sticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock.Sticker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional uint32 sticker_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sticker_id());
    }

    // optional float wear = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float scale = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 tint_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tint_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconItemPreviewDataBlock.Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconItemPreviewDataBlock_Sticker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEconItemPreviewDataBlock_Sticker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconItemPreviewDataBlock.Sticker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconItemPreviewDataBlock.Sticker)
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const CEconItemPreviewDataBlock_Sticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock.Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      sticker_id_ = from.sticker_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      wear_ = from.wear_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00000020u) {
      tint_id_ = from.tint_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconItemPreviewDataBlock.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const CEconItemPreviewDataBlock_Sticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock_Sticker::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock_Sticker::InternalSwap(CEconItemPreviewDataBlock_Sticker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, tint_id_)
      + sizeof(CEconItemPreviewDataBlock_Sticker::tint_id_)
      - PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, slot_)>(
          reinterpret_cast<char*>(&slot_),
          reinterpret_cast<char*>(&other->slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItemPreviewDataBlock_Sticker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CEconItemPreviewDataBlock::InitAsDefaultInstance() {
}
class CEconItemPreviewDataBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItemPreviewDataBlock>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_paintindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_paintwear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_paintseed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_killeaterscoretype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_killeatervalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_customname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dropreason(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_musicindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stickers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEconItemPreviewDataBlock)
}
CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stickers_(from.stickers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customname()) {
    customname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customname(),
      GetArena());
  }
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&entindex_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(entindex_));
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock)
}

void CEconItemPreviewDataBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto.base);
  customname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entindex_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(entindex_));
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEconItemPreviewDataBlock::ArenaDtor(void* object) {
  CEconItemPreviewDataBlock* _this = reinterpret_cast< CEconItemPreviewDataBlock* >(object);
  (void)_this;
}
void CEconItemPreviewDataBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEconItemPreviewDataBlock& CEconItemPreviewDataBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CEconItemPreviewDataBlock_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CEconItemPreviewDataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stickers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    customname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paintwear_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(paintwear_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&paintseed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&musicindex_) -
        reinterpret_cast<char*>(&paintseed_)) + sizeof(musicindex_));
  }
  entindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItemPreviewDataBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paintindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_paintindex(&has_bits);
          paintindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paintwear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_paintwear(&has_bits);
          paintwear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paintseed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_paintseed(&has_bits);
          paintseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killeaterscoretype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_killeaterscoretype(&has_bits);
          killeaterscoretype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killeatervalue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_killeatervalue(&has_bits);
          killeatervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_customname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItemPreviewDataBlock.customname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stickers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 inventory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dropreason = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dropreason(&has_bits);
          dropreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 musicindex = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_musicindex(&has_bits);
          musicindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entindex = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEconItemPreviewDataBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 defindex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_defindex(), target);
  }

  // optional uint32 paintindex = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_paintindex(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rarity(), target);
  }

  // optional uint32 quality = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_quality(), target);
  }

  // optional uint32 paintwear = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_paintwear(), target);
  }

  // optional uint32 paintseed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_paintseed(), target);
  }

  // optional uint32 killeaterscoretype = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_killeaterscoretype(), target);
  }

  // optional uint32 killeatervalue = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_killeatervalue(), target);
  }

  // optional string customname = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_customname().data(), static_cast<int>(this->_internal_customname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItemPreviewDataBlock.customname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_customname(), target);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stickers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_stickers(i), target, stream);
  }

  // optional uint32 inventory = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_inventory(), target);
  }

  // optional uint32 origin = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_origin(), target);
  }

  // optional uint32 questid = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_questid(), target);
  }

  // optional uint32 dropreason = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_dropreason(), target);
  }

  // optional uint32 musicindex = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_musicindex(), target);
  }

  // optional int32 entindex = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock)
  return target;
}

size_t CEconItemPreviewDataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  total_size += 1UL * this->_internal_stickers_size();
  for (const auto& msg : this->stickers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string customname = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customname());
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 defindex = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defindex());
    }

    // optional uint32 paintindex = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paintindex());
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rarity());
    }

    // optional uint32 quality = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 paintwear = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paintwear());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 paintseed = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paintseed());
    }

    // optional uint32 killeaterscoretype = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killeaterscoretype());
    }

    // optional uint32 killeatervalue = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killeatervalue());
    }

    // optional uint32 inventory = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventory());
    }

    // optional uint32 origin = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

    // optional uint32 questid = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional uint32 dropreason = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dropreason());
    }

    // optional uint32 musicindex = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_musicindex());
    }

  }
  // optional int32 entindex = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEconItemPreviewDataBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconItemPreviewDataBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconItemPreviewDataBlock)
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stickers_.MergeFrom(from.stickers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_customname(from._internal_customname());
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      paintindex_ = from.paintindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000040u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000080u) {
      paintwear_ = from.paintwear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      paintseed_ = from.paintseed_;
    }
    if (cached_has_bits & 0x00000200u) {
      killeaterscoretype_ = from.killeaterscoretype_;
    }
    if (cached_has_bits & 0x00000400u) {
      killeatervalue_ = from.killeatervalue_;
    }
    if (cached_has_bits & 0x00000800u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00001000u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00002000u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00004000u) {
      dropreason_ = from.dropreason_;
    }
    if (cached_has_bits & 0x00008000u) {
      musicindex_ = from.musicindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_entindex(from._internal_entindex());
  }
}

void CEconItemPreviewDataBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock::InternalSwap(CEconItemPreviewDataBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stickers_.InternalSwap(&other->stickers_);
  customname_.Swap(&other->customname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock, entindex_)
      + sizeof(CEconItemPreviewDataBlock::entindex_)
      - PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>()._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_Internal::iteminfo(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* msg) {
  return *msg->iteminfo_;
}
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_cstrike15_5fgcmessages_2eproto.base);
  iteminfo_ = nullptr;
}

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::~CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != nullptr);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::iteminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from._internal_iteminfo());
  }
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InternalSwap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(iteminfo_, other->iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgItemAcknowledged::InitAsDefaultInstance() {
  ::_CMsgItemAcknowledged_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
class CMsgItemAcknowledged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAcknowledged>()._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgItemAcknowledged* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgItemAcknowledged::_Internal::iteminfo(const CMsgItemAcknowledged* msg) {
  return *msg->iteminfo_;
}
CMsgItemAcknowledged::CMsgItemAcknowledged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgItemAcknowledged)
}

void CMsgItemAcknowledged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgItemAcknowledged_cstrike15_5fgcmessages_2eproto.base);
  iteminfo_ = nullptr;
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:CMsgItemAcknowledged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemAcknowledged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgItemAcknowledged::ArenaDtor(void* object) {
  CMsgItemAcknowledged* _this = reinterpret_cast< CMsgItemAcknowledged* >(object);
  (void)_this;
}
void CMsgItemAcknowledged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemAcknowledged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgItemAcknowledged& CMsgItemAcknowledged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgItemAcknowledged_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAcknowledged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != nullptr);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAcknowledged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemAcknowledged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAcknowledged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iteminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAcknowledged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemAcknowledged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemAcknowledged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemAcknowledged)
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from._internal_iteminfo());
  }
}

void CMsgItemAcknowledged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(iteminfo_, other->iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAcknowledged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>()._has_bits_);
  static void set_has_param_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param_d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&param_s_, &from.param_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_m_) -
    reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedCtor() {
  ::memset(&param_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_m_) -
      reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* _this = reinterpret_cast< CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&param_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_m_) -
        reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 param_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_param_s(&has_bits);
          param_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 param_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_param_a(&has_bits);
          param_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 param_d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_param_d(&has_bits);
          param_d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 param_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_param_m(&has_bits);
          param_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_param_s(), target);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_param_a(), target);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_param_d(), target);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_param_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 param_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_s());
    }

    // optional uint64 param_a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_a());
    }

    // optional uint64 param_d = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_d());
    }

    // optional uint64 param_m = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_m());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      param_s_ = from.param_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_a_ = from.param_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      param_d_ = from.param_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_m_ = from.param_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_m_)
      + sizeof(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_m_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_s_)>(
          reinterpret_cast<char*>(&param_s_),
          reinterpret_cast<char*>(&other->param_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_._instance.get_mutable()->iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(
      ::CEconItemPreviewDataBlock::internal_default_instance());
}
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>()._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_Internal::iteminfo(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* msg) {
  return *msg->iteminfo_;
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_cstrike15_5fgcmessages_2eproto.base);
  iteminfo_ = nullptr;
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* _this = reinterpret_cast< CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != nullptr);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iteminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from._internal_iteminfo());
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(iteminfo_, other->iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::_Internal {
 public:
};

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}
CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SharedCtor() {
}

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::~CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}
CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedCtor() {
  accountid_ = 0u;
}

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}
CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedCtor() {
  accountid_ = 0u;
}

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::~CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>()._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}
CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedCtor() {
  eventid_ = 0;
}

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::~CMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchListRequestTournamentGames* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestTournamentGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eventid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestTournamentGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eventid()) {
    _internal_set_eventid(from._internal_eventid());
  }
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestTournamentGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>()._has_bits_);
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outcomeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}
CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedCtor() {
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(token_));
}

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::~CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 matchid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 outcomeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_outcomeid(&has_bits);
          outcomeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_matchid(), target);
  }

  // optional uint64 outcomeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_outcomeid(), target);
  }

  // optional uint32 token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 matchid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint64 outcomeid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_outcomeid());
    }

    // optional uint32 token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_token());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      outcomeid_ = from.outcomeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, token_)
      + sizeof(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::token_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, matchid_)>(
          reinterpret_cast<char*>(&matchid_),
          reinterpret_cast<char*>(&other->matchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_MatchInfo::InitAsDefaultInstance() {
  ::_CDataGCCStrike15_v2_MatchInfo_default_instance_._instance.get_mutable()->watchablematchinfo_ = const_cast< ::WatchableMatchInfo*>(
      ::WatchableMatchInfo::internal_default_instance());
  ::_CDataGCCStrike15_v2_MatchInfo_default_instance_._instance.get_mutable()->roundstats_legacy_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::internal_default_instance());
}
class CDataGCCStrike15_v2_MatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_MatchInfo>()._has_bits_);
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_matchtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::WatchableMatchInfo& watchablematchinfo(const CDataGCCStrike15_v2_MatchInfo* msg);
  static void set_has_watchablematchinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& roundstats_legacy(const CDataGCCStrike15_v2_MatchInfo* msg);
  static void set_has_roundstats_legacy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::WatchableMatchInfo&
CDataGCCStrike15_v2_MatchInfo::_Internal::watchablematchinfo(const CDataGCCStrike15_v2_MatchInfo* msg) {
  return *msg->watchablematchinfo_;
}
const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats&
CDataGCCStrike15_v2_MatchInfo::_Internal::roundstats_legacy(const CDataGCCStrike15_v2_MatchInfo* msg) {
  return *msg->roundstats_legacy_;
}
CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roundstatsall_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_MatchInfo)
}
CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(const CDataGCCStrike15_v2_MatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      roundstatsall_(from.roundstatsall_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_watchablematchinfo()) {
    watchablematchinfo_ = new ::WatchableMatchInfo(*from.watchablematchinfo_);
  } else {
    watchablematchinfo_ = nullptr;
  }
  if (from._internal_has_roundstats_legacy()) {
    roundstats_legacy_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(*from.roundstats_legacy_);
  } else {
    roundstats_legacy_ = nullptr;
  }
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchtime_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(matchtime_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_MatchInfo)
}

void CDataGCCStrike15_v2_MatchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&watchablematchinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchtime_) -
      reinterpret_cast<char*>(&watchablematchinfo_)) + sizeof(matchtime_));
}

CDataGCCStrike15_v2_MatchInfo::~CDataGCCStrike15_v2_MatchInfo() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_MatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_MatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete watchablematchinfo_;
  if (this != internal_default_instance()) delete roundstats_legacy_;
}

void CDataGCCStrike15_v2_MatchInfo::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_MatchInfo* _this = reinterpret_cast< CDataGCCStrike15_v2_MatchInfo* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_MatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_MatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_MatchInfo& CDataGCCStrike15_v2_MatchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_MatchInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_MatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roundstatsall_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(watchablematchinfo_ != nullptr);
      watchablematchinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(roundstats_legacy_ != nullptr);
      roundstats_legacy_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchtime_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(matchtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_MatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 matchid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchtime(&has_bits);
          matchtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WatchableMatchInfo watchablematchinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchablematchinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundstats_legacy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roundstatsall(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_MatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_MatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_matchid(), target);
  }

  // optional uint32 matchtime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matchtime(), target);
  }

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::watchablematchinfo(this), target, stream);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::roundstats_legacy(this), target, stream);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roundstatsall_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_roundstatsall(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_MatchInfo)
  return target;
}

size_t CDataGCCStrike15_v2_MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_MatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  total_size += 1UL * this->_internal_roundstatsall_size();
  for (const auto& msg : this->roundstatsall_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .WatchableMatchInfo watchablematchinfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *watchablematchinfo_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roundstats_legacy_);
    }

    // optional uint64 matchid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 matchtime = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_MatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_MatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_MatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_MatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_MatchInfo)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_MatchInfo::MergeFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roundstatsall_.MergeFrom(from.roundstatsall_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_watchablematchinfo()->::WatchableMatchInfo::MergeFrom(from._internal_watchablematchinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_roundstats_legacy()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(from._internal_roundstats_legacy());
    }
    if (cached_has_bits & 0x00000004u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchtime_ = from.matchtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_MatchInfo::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_MatchInfo::InternalSwap(CDataGCCStrike15_v2_MatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  roundstatsall_.InternalSwap(&other->roundstatsall_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, matchtime_)
      + sizeof(CDataGCCStrike15_v2_MatchInfo::matchtime_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, watchablematchinfo_)>(
          reinterpret_cast<char*>(&watchablematchinfo_),
          reinterpret_cast<char*>(&other->watchablematchinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_MatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentGroupTeam::InitAsDefaultInstance() {
}
class CDataGCCStrike15_v2_TournamentGroupTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentGroupTeam>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_correctpick(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentGroupTeam)
}
CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(const CDataGCCStrike15_v2_TournamentGroupTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&correctpick_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(correctpick_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroupTeam)
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correctpick_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(correctpick_));
}

CDataGCCStrike15_v2_TournamentGroupTeam::~CDataGCCStrike15_v2_TournamentGroupTeam() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroupTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentGroupTeam* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentGroupTeam* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentGroupTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentGroupTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentGroupTeam& CDataGCCStrike15_v2_TournamentGroupTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentGroupTeam_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentGroupTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correctpick_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(correctpick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentGroupTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool correctpick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_correctpick(&has_bits);
          correctpick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentGroupTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // optional bool correctpick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_correctpick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroupTeam)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroupTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

    // optional int32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_score());
    }

    // optional bool correctpick = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroupTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentGroupTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentGroupTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentGroupTeam)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroupTeam::MergeFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      correctpick_ = from.correctpick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroupTeam::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::InternalSwap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, correctpick_)
      + sizeof(CDataGCCStrike15_v2_TournamentGroupTeam::correctpick_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentGroupTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentGroup_Picks::InitAsDefaultInstance() {
}
class CDataGCCStrike15_v2_TournamentGroup_Picks::_Internal {
 public:
};

CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pickids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
}
CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(const CDataGCCStrike15_v2_TournamentGroup_Picks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pickids_(from.pickids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedCtor() {
}

CDataGCCStrike15_v2_TournamentGroup_Picks::~CDataGCCStrike15_v2_TournamentGroup_Picks() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentGroup_Picks* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentGroup_Picks* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentGroup_Picks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentGroup_Picks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentGroup_Picks& CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentGroup_Picks_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentGroup_Picks::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pickids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentGroup_Picks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 pickids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pickids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pickids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentGroup_Picks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pickids = 1;
  for (int i = 0, n = this->_internal_pickids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pickids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroup.Picks)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroup_Picks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pickids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pickids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pickids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroup_Picks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentGroup_Picks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentGroup.Picks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentGroup.Picks)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pickids_.MergeFrom(from.pickids_);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup_Picks::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::InternalSwap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pickids_.InternalSwap(&other->pickids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentGroup_Picks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentGroup::InitAsDefaultInstance() {
}
class CDataGCCStrike15_v2_TournamentGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentGroup>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_picks__deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_picklockuntiltime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pickableteams(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_points_per_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  stage_ids_(arena),
  picks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentGroup)
}
CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(const CDataGCCStrike15_v2_TournamentGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      stage_ids_(from.stage_ids_),
      picks_(from.picks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_desc(),
      GetArena());
  }
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_per_pick_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(points_per_pick_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroup)
}

void CDataGCCStrike15_v2_TournamentGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_per_pick_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(points_per_pick_));
}

CDataGCCStrike15_v2_TournamentGroup::~CDataGCCStrike15_v2_TournamentGroup() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDataGCCStrike15_v2_TournamentGroup::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentGroup* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentGroup* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentGroup& CDataGCCStrike15_v2_TournamentGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentGroup_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  stage_ids_.Clear();
  picks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_per_pick_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(points_per_pick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentGroup.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentGroup.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 picks__deprecated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_picks__deprecated(&has_bits);
          picks__deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 stage_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stage_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stage_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 picklockuntiltime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_picklockuntiltime(&has_bits);
          picklockuntiltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pickableteams = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pickableteams(&has_bits);
          pickableteams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_per_pick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_points_per_pick(&has_bits);
          points_per_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // optional uint32 picks__deprecated = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_picks__deprecated(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_teams(i), target, stream);
  }

  // repeated int32 stage_ids = 6;
  for (int i = 0, n = this->_internal_stage_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_stage_ids(i), target);
  }

  // optional uint32 picklockuntiltime = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_picklockuntiltime(), target);
  }

  // optional uint32 pickableteams = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pickableteams(), target);
  }

  // optional uint32 points_per_pick = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_points_per_pick(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_picks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroup)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 stage_ids = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stage_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stage_ids_size());
    total_size += data_size;
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  total_size += 1UL * this->_internal_picks_size();
  for (const auto& msg : this->picks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional uint32 groupid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_groupid());
    }

    // optional uint32 picks__deprecated = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_picks__deprecated());
    }

    // optional uint32 picklockuntiltime = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_picklockuntiltime());
    }

    // optional uint32 pickableteams = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pickableteams());
    }

    // optional uint32 points_per_pick = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_per_pick());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentGroup)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroup::MergeFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  stage_ids_.MergeFrom(from.stage_ids_);
  picks_.MergeFrom(from.picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000008u) {
      picks__deprecated_ = from.picks__deprecated_;
    }
    if (cached_has_bits & 0x00000010u) {
      picklockuntiltime_ = from.picklockuntiltime_;
    }
    if (cached_has_bits & 0x00000020u) {
      pickableteams_ = from.pickableteams_;
    }
    if (cached_has_bits & 0x00000040u) {
      points_per_pick_ = from.points_per_pick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroup::InternalSwap(CDataGCCStrike15_v2_TournamentGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  stage_ids_.InternalSwap(&other->stage_ids_);
  picks_.InternalSwap(&other->picks_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, points_per_pick_)
      + sizeof(CDataGCCStrike15_v2_TournamentGroup::points_per_pick_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, groupid_)>(
          reinterpret_cast<char*>(&groupid_),
          reinterpret_cast<char*>(&other->groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentSection::InitAsDefaultInstance() {
}
class CDataGCCStrike15_v2_TournamentSection::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentSection>()._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentSection)
}
CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(const CDataGCCStrike15_v2_TournamentSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_desc(),
      GetArena());
  }
  sectionid_ = from.sectionid_;
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentSection)
}

void CDataGCCStrike15_v2_TournamentSection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sectionid_ = 0u;
}

CDataGCCStrike15_v2_TournamentSection::~CDataGCCStrike15_v2_TournamentSection() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentSection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentSection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDataGCCStrike15_v2_TournamentSection::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentSection* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentSection* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentSection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentSection& CDataGCCStrike15_v2_TournamentSection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentSection_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentSection::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
  }
  sectionid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentSection.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentSection.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentSection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sectionid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentSection)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentSection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional uint32 sectionid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sectionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentSection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentSection)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentSection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentSection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentSection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentSection)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentSection::MergeFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      sectionid_ = from.sectionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentSection::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentSection::InternalSwap(CDataGCCStrike15_v2_TournamentSection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  groups_.InternalSwap(&other->groups_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sectionid_, other->sectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentSection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CDataGCCStrike15_v2_TournamentInfo::InitAsDefaultInstance() {
  ::_CDataGCCStrike15_v2_TournamentInfo_default_instance_._instance.get_mutable()->tournament_event_ = const_cast< ::TournamentEvent*>(
      ::TournamentEvent::internal_default_instance());
}
class CDataGCCStrike15_v2_TournamentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentInfo>()._has_bits_);
  static const ::TournamentEvent& tournament_event(const CDataGCCStrike15_v2_TournamentInfo* msg);
  static void set_has_tournament_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TournamentEvent&
CDataGCCStrike15_v2_TournamentInfo::_Internal::tournament_event(const CDataGCCStrike15_v2_TournamentInfo* msg) {
  return *msg->tournament_event_;
}
CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sections_(arena),
  tournament_teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentInfo)
}
CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(const CDataGCCStrike15_v2_TournamentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sections_(from.sections_),
      tournament_teams_(from.tournament_teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournament_event()) {
    tournament_event_ = new ::TournamentEvent(*from.tournament_event_);
  } else {
    tournament_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentInfo)
}

void CDataGCCStrike15_v2_TournamentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto.base);
  tournament_event_ = nullptr;
}

CDataGCCStrike15_v2_TournamentInfo::~CDataGCCStrike15_v2_TournamentInfo() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDataGCCStrike15_v2_TournamentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tournament_event_;
}

void CDataGCCStrike15_v2_TournamentInfo::ArenaDtor(void* object) {
  CDataGCCStrike15_v2_TournamentInfo* _this = reinterpret_cast< CDataGCCStrike15_v2_TournamentInfo* >(object);
  (void)_this;
}
void CDataGCCStrike15_v2_TournamentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDataGCCStrike15_v2_TournamentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDataGCCStrike15_v2_TournamentInfo& CDataGCCStrike15_v2_TournamentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CDataGCCStrike15_v2_TournamentInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CDataGCCStrike15_v2_TournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sections_.Clear();
  tournament_teams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tournament_event_ != nullptr);
    tournament_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TournamentEvent tournament_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentTeam tournament_teams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tournament_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDataGCCStrike15_v2_TournamentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sections(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TournamentEvent tournament_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tournament_event(this), target, stream);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tournament_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tournament_teams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentInfo)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  total_size += 1UL * this->_internal_tournament_teams_size();
  for (const auto& msg : this->tournament_teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TournamentEvent tournament_event = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tournament_event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDataGCCStrike15_v2_TournamentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDataGCCStrike15_v2_TournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDataGCCStrike15_v2_TournamentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDataGCCStrike15_v2_TournamentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDataGCCStrike15_v2_TournamentInfo)
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentInfo::MergeFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sections_.MergeFrom(from.sections_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  if (from._internal_has_tournament_event()) {
    _internal_mutable_tournament_event()->::TournamentEvent::MergeFrom(from._internal_tournament_event());
  }
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDataGCCStrike15_v2_TournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentInfo::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentInfo::InternalSwap(CDataGCCStrike15_v2_TournamentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sections_.InternalSwap(&other->sections_);
  tournament_teams_.InternalSwap(&other->tournament_teams_);
  swap(tournament_event_, other->tournament_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_MatchList::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_MatchList_default_instance_._instance.get_mutable()->tournamentinfo_ = const_cast< ::CDataGCCStrike15_v2_TournamentInfo*>(
      ::CDataGCCStrike15_v2_TournamentInfo::internal_default_instance());
}
class CMsgGCCStrike15_v2_MatchList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchList>()._has_bits_);
  static void set_has_msgrequestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CDataGCCStrike15_v2_TournamentInfo& tournamentinfo(const CMsgGCCStrike15_v2_MatchList* msg);
  static void set_has_tournamentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDataGCCStrike15_v2_TournamentInfo&
CMsgGCCStrike15_v2_MatchList::_Internal::tournamentinfo(const CMsgGCCStrike15_v2_MatchList* msg) {
  return *msg->tournamentinfo_;
}
CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena),
  streams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchList)
}
CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(const CMsgGCCStrike15_v2_MatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matches_(from.matches_),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournamentinfo()) {
    tournamentinfo_ = new ::CDataGCCStrike15_v2_TournamentInfo(*from.tournamentinfo_);
  } else {
    tournamentinfo_ = nullptr;
  }
  ::memcpy(&msgrequestid_, &from.msgrequestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&msgrequestid_)) + sizeof(servertime_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchList)
}

void CMsgGCCStrike15_v2_MatchList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_MatchList_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&tournamentinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servertime_) -
      reinterpret_cast<char*>(&tournamentinfo_)) + sizeof(servertime_));
}

CMsgGCCStrike15_v2_MatchList::~CMsgGCCStrike15_v2_MatchList() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_MatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tournamentinfo_;
}

void CMsgGCCStrike15_v2_MatchList::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_MatchList* _this = reinterpret_cast< CMsgGCCStrike15_v2_MatchList* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_MatchList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_MatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_MatchList& CMsgGCCStrike15_v2_MatchList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_MatchList_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  streams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tournamentinfo_ != nullptr);
    tournamentinfo_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&msgrequestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&servertime_) -
        reinterpret_cast<char*>(&msgrequestid_)) + sizeof(servertime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msgrequestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msgrequestid(&has_bits);
          msgrequestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 servertime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_servertime(&has_bits);
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TournamentTeam streams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_MatchList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgrequestid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgrequestid(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // optional uint32 servertime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_servertime(), target);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_matches(i), target, stream);
  }

  // repeated .TournamentTeam streams = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_streams(i), target, stream);
  }

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tournamentinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchList)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentTeam streams = 5;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tournamentinfo_);
    }

    // optional uint32 msgrequestid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msgrequestid());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 servertime = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_servertime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_MatchList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_MatchList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_MatchList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_MatchList)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchList::MergeFrom(const CMsgGCCStrike15_v2_MatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  streams_.MergeFrom(from.streams_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tournamentinfo()->::CDataGCCStrike15_v2_TournamentInfo::MergeFrom(from._internal_tournamentinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      msgrequestid_ = from.msgrequestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      servertime_ = from.servertime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const CMsgGCCStrike15_v2_MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchList::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchList::InternalSwap(CMsgGCCStrike15_v2_MatchList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matches_.InternalSwap(&other->matches_);
  streams_.InternalSwap(&other->streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, servertime_)
      + sizeof(CMsgGCCStrike15_v2_MatchList::servertime_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, tournamentinfo_)>(
          reinterpret_cast<char*>(&tournamentinfo_),
          reinterpret_cast<char*>(&other->tournamentinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>()._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}
CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sectionid_, &from.sectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&sectionid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedCtor() {
  ::memset(&sectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&sectionid_)) + sizeof(itemid_));
}

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* _this = reinterpret_cast< CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&sectionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&sectionid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 itemid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  // optional int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // optional int32 teamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_teamid(), target);
  }

  // optional uint64 itemid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  return target;
}

size_t CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 sectionid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sectionid());
    }

    // optional int32 groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_groupid());
    }

    // optional int32 index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_index());
    }

    // optional int32 teamid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_teamid());
    }

    // optional uint64 itemid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sectionid_ = from.sectionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InternalSwap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, itemid_)
      + sizeof(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, sectionid_)>(
          reinterpret_cast<char*>(&sectionid_),
          reinterpret_cast<char*>(&other->sectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Predictions::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Predictions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Predictions>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  group_match_team_picks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Predictions)
}
CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(const CMsgGCCStrike15_v2_Predictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_match_team_picks_(from.group_match_team_picks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Predictions)
}

void CMsgGCCStrike15_v2_Predictions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Predictions_cstrike15_5fgcmessages_2eproto.base);
  event_id_ = 0u;
}

CMsgGCCStrike15_v2_Predictions::~CMsgGCCStrike15_v2_Predictions() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Predictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Predictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Predictions::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Predictions* _this = reinterpret_cast< CMsgGCCStrike15_v2_Predictions* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Predictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Predictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Predictions& CMsgGCCStrike15_v2_Predictions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Predictions_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Predictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Predictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_match_team_picks_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Predictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_match_team_picks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Predictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Predictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_match_team_picks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_group_match_team_picks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Predictions)
  return target;
}

size_t CMsgGCCStrike15_v2_Predictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Predictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  total_size += 1UL * this->_internal_group_match_team_picks_size();
  for (const auto& msg : this->group_match_team_picks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Predictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Predictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Predictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Predictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Predictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Predictions)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Predictions::MergeFrom(const CMsgGCCStrike15_v2_Predictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Predictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_match_team_picks_.MergeFrom(from.group_match_team_picks_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Predictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const CMsgGCCStrike15_v2_Predictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Predictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Predictions::InternalSwap(CMsgGCCStrike15_v2_Predictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_match_team_picks_.InternalSwap(&other->group_match_team_picks_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Predictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Fantasy_FantasySlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Fantasy_FantasySlot>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}
CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(itemid_));
}

CMsgGCCStrike15_v2_Fantasy_FantasySlot::~CMsgGCCStrike15_v2_Fantasy_FantasySlot() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Fantasy_FantasySlot* _this = reinterpret_cast< CMsgGCCStrike15_v2_Fantasy_FantasySlot* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Fantasy_FantasySlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Fantasy_FantasySlot& CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasySlot_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Fantasy_FantasySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&type_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Fantasy_FantasySlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pick(&has_bits);
          pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 itemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Fantasy_FantasySlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 pick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pick(), target);
  }

  // optional uint64 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy_FantasySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 pick = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pick());
    }

    // optional uint64 itemid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy_FantasySlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Fantasy_FantasySlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      pick_ = from.pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, itemid_)
      + sizeof(CMsgGCCStrike15_v2_Fantasy_FantasySlot::itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Fantasy_FantasySlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>()._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sectionid_ = from.sectionid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto.base);
  sectionid_ = 0;
}

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::~CMsgGCCStrike15_v2_Fantasy_FantasyTeam() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam* _this = reinterpret_cast< CMsgGCCStrike15_v2_Fantasy_FantasyTeam* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  sectionid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy_FantasyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 sectionid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sectionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy_FantasyTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from._internal_has_sectionid()) {
    _internal_set_sectionid(from._internal_sectionid());
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slots_.InternalSwap(&other->slots_);
  swap(sectionid_, other->sectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Fantasy_FantasyTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Fantasy::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Fantasy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Fantasy>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Fantasy)
}
CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(const CMsgGCCStrike15_v2_Fantasy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy)
}

void CMsgGCCStrike15_v2_Fantasy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Fantasy_cstrike15_5fgcmessages_2eproto.base);
  event_id_ = 0u;
}

CMsgGCCStrike15_v2_Fantasy::~CMsgGCCStrike15_v2_Fantasy() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Fantasy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Fantasy::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Fantasy* _this = reinterpret_cast< CMsgGCCStrike15_v2_Fantasy* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Fantasy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Fantasy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Fantasy& CMsgGCCStrike15_v2_Fantasy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Fantasy_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Fantasy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Fantasy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Fantasy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Fantasy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Fantasy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Fantasy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Fantasy)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy::MergeFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Fantasy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy::InternalSwap(CMsgGCCStrike15_v2_Fantasy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Fantasy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAttribute_String::InitAsDefaultInstance() {
}
class CAttribute_String::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_String>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAttribute_String::CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

void CAttribute_String::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CAttribute_String_cstrike15_5fgcmessages_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_String::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_String::ArenaDtor(void* object) {
  CAttribute_String* _this = reinterpret_cast< CAttribute_String* >(object);
  (void)_this;
}
void CAttribute_String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAttribute_String& CAttribute_String::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAttribute_String_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_String.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_String)
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void CAttribute_String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_String::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgCStrike15Welcome::InitAsDefaultInstance() {
}
class CMsgCStrike15Welcome::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCStrike15Welcome>()._has_bits_);
  static void set_has_store_item_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeplayedconsecutively(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_first_played(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_time_played(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gscookieid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgCStrike15Welcome::CMsgCStrike15Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCStrike15Welcome)
}
CMsgCStrike15Welcome::CMsgCStrike15Welcome(const CMsgCStrike15Welcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&store_item_hash_, &from.store_item_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&uniqueid_) -
    reinterpret_cast<char*>(&store_item_hash_)) + sizeof(uniqueid_));
  // @@protoc_insertion_point(copy_constructor:CMsgCStrike15Welcome)
}

void CMsgCStrike15Welcome::SharedCtor() {
  ::memset(&store_item_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniqueid_) -
      reinterpret_cast<char*>(&store_item_hash_)) + sizeof(uniqueid_));
}

CMsgCStrike15Welcome::~CMsgCStrike15Welcome() {
  // @@protoc_insertion_point(destructor:CMsgCStrike15Welcome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCStrike15Welcome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCStrike15Welcome::ArenaDtor(void* object) {
  CMsgCStrike15Welcome* _this = reinterpret_cast< CMsgCStrike15Welcome* >(object);
  (void)_this;
}
void CMsgCStrike15Welcome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCStrike15Welcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCStrike15Welcome& CMsgCStrike15Welcome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgCStrike15Welcome_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCStrike15Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCStrike15Welcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&store_item_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uniqueid_) -
        reinterpret_cast<char*>(&store_item_hash_)) + sizeof(uniqueid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCStrike15Welcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 store_item_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_store_item_hash(&has_bits);
          store_item_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeplayedconsecutively = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timeplayedconsecutively(&has_bits);
          timeplayedconsecutively_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_first_played = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_time_first_played(&has_bits);
          time_first_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_time_played = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_last_time_played(&has_bits);
          last_time_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_ip_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_last_ip_address(&has_bits);
          last_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gscookieid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_gscookieid(&has_bits);
          gscookieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uniqueid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_uniqueid(&has_bits);
          uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCStrike15Welcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCStrike15Welcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 store_item_hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_store_item_hash(), target);
  }

  // optional uint32 timeplayedconsecutively = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeplayedconsecutively(), target);
  }

  // optional uint32 time_first_played = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_time_first_played(), target);
  }

  // optional uint32 last_time_played = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_time_played(), target);
  }

  // optional uint32 last_ip_address = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_last_ip_address(), target);
  }

  // optional uint64 gscookieid = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_gscookieid(), target);
  }

  // optional uint64 uniqueid = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_uniqueid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCStrike15Welcome)
  return target;
}

size_t CMsgCStrike15Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCStrike15Welcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 store_item_hash = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_store_item_hash());
    }

    // optional uint32 timeplayedconsecutively = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeplayedconsecutively());
    }

    // optional uint32 last_ip_address = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_ip_address());
    }

    // optional uint32 time_first_played = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_first_played());
    }

    // optional uint32 last_time_played = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_time_played());
    }

    // optional uint64 gscookieid = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gscookieid());
    }

    // optional uint64 uniqueid = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uniqueid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCStrike15Welcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCStrike15Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCStrike15Welcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCStrike15Welcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCStrike15Welcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCStrike15Welcome)
    MergeFrom(*source);
  }
}

void CMsgCStrike15Welcome::MergeFrom(const CMsgCStrike15Welcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCStrike15Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      store_item_hash_ = from.store_item_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeplayedconsecutively_ = from.timeplayedconsecutively_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_ip_address_ = from.last_ip_address_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_first_played_ = from.time_first_played_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_time_played_ = from.last_time_played_;
    }
    if (cached_has_bits & 0x00000020u) {
      gscookieid_ = from.gscookieid_;
    }
    if (cached_has_bits & 0x00000040u) {
      uniqueid_ = from.uniqueid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCStrike15Welcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCStrike15Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCStrike15Welcome::CopyFrom(const CMsgCStrike15Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCStrike15Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCStrike15Welcome::IsInitialized() const {
  return true;
}

void CMsgCStrike15Welcome::InternalSwap(CMsgCStrike15Welcome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCStrike15Welcome, uniqueid_)
      + sizeof(CMsgCStrike15Welcome::uniqueid_)
      - PROTOBUF_FIELD_OFFSET(CMsgCStrike15Welcome, store_item_hash_)>(
          reinterpret_cast<char*>(&store_item_hash_),
          reinterpret_cast<char*>(&other->store_item_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCStrike15Welcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>()._has_bits_);
  static void set_has_value_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_int(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  choked_blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      choked_blocks_(from.choked_blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_name()) {
    value_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value_name(),
      GetArena());
  }
  ::memcpy(&value_int_, &from.value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&value_int_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto.base);
  value_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&value_int_)) + sizeof(server_port_));
}

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::~CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choked_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&value_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_port_) -
        reinterpret_cast<char*>(&value_int_)) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string value_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value_int(&has_bits);
          value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_addr(&has_bits);
          server_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string choked_blocks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_choked_blocks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_name().data(), static_cast<int>(this->_internal_value_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value_name(), target);
  }

  // optional int32 value_int = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value_int(), target);
  }

  // optional uint32 server_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_addr(), target);
  }

  // optional uint32 server_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_port(), target);
  }

  // repeated string choked_blocks = 5;
  for (int i = 0, n = this->_internal_choked_blocks_size(); i < n; i++) {
    const auto& s = this->_internal_choked_blocks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string choked_blocks = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(choked_blocks_.size());
  for (int i = 0, n = choked_blocks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      choked_blocks_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string value_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_name());
    }

    // optional int32 value_int = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value_int());
    }

    // optional uint32 server_addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_addr());
    }

    // optional uint32 server_port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choked_blocks_.MergeFrom(from.choked_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_name(from._internal_value_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_int_ = from.value_int_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_addr_ = from.server_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InternalSwap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  choked_blocks_.InternalSwap(&other->choked_blocks_);
  value_name_.Swap(&other->value_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_port_)
      + sizeof(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_int_)>(
          reinterpret_cast<char*>(&value_int_),
          reinterpret_cast<char*>(&other->value_int_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  viewangles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      viewangles_(from.viewangles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(type_));
}

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::~CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* _this = reinterpret_cast< CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewangles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 viewangles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_viewangles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_viewangles(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // repeated uint32 viewangles = 2;
  for (int i = 0, n = this->_internal_viewangles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_viewangles(i), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 viewangles = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->viewangles_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_viewangles_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  viewangles_.MergeFrom(from.viewangles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InternalSwap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  viewangles_.InternalSwap(&other->viewangles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, type_)
      + sizeof(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GiftsLeaderboardRequest::_Internal {
 public:
};

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}
CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SharedCtor() {
}

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::~CMsgGCCStrike15_v2_GiftsLeaderboardRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest* _this = reinterpret_cast< CMsgGCCStrike15_v2_GiftsLeaderboardRequest* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GiftsLeaderboardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardRequest::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gifts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}
CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gifts_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(gifts_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gifts_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(gifts_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* _this = reinterpret_cast< CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gifts_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(gifts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gifts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gifts(&has_bits);
          gifts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 gifts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gifts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 gifts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gifts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gifts_ = from.gifts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, gifts_)
      + sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::gifts_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>()._has_bits_);
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_period_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_gifts_given(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_givers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&servertime_, &from.servertime_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_givers_) -
    reinterpret_cast<char*>(&servertime_)) + sizeof(total_givers_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&servertime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_givers_) -
      reinterpret_cast<char*>(&servertime_)) + sizeof(total_givers_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse* _this = reinterpret_cast< CMsgGCCStrike15_v2_GiftsLeaderboardResponse* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&servertime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_givers_) -
        reinterpret_cast<char*>(&servertime_)) + sizeof(total_givers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 servertime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_servertime(&has_bits);
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_period_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_period_seconds(&has_bits);
          time_period_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_gifts_given = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_gifts_given(&has_bits);
          total_gifts_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_givers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_givers(&has_bits);
          total_givers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 servertime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_servertime(), target);
  }

  // optional uint32 time_period_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_period_seconds(), target);
  }

  // optional uint32 total_gifts_given = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_gifts_given(), target);
  }

  // optional uint32 total_givers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_givers(), target);
  }

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 servertime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_servertime());
    }

    // optional uint32 time_period_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_period_seconds());
    }

    // optional uint32 total_gifts_given = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_gifts_given());
    }

    // optional uint32 total_givers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_givers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      servertime_ = from.servertime_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_period_seconds_ = from.time_period_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_gifts_given_ = from.total_gifts_given_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_givers_ = from.total_givers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_givers_)
      + sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardResponse::total_givers_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, servertime_)>(
          reinterpret_cast<char*>(&servertime_),
          reinterpret_cast<char*>(&other->servertime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>()._has_bits_);
  static void set_has_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}
CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&survey_id_, &from.survey_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_) -
    reinterpret_cast<char*>(&survey_id_)) + sizeof(vote_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedCtor() {
  ::memset(&survey_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_) -
      reinterpret_cast<char*>(&survey_id_)) + sizeof(vote_));
}

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::~CMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientSubmitSurveyVote* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&survey_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_) -
        reinterpret_cast<char*>(&survey_id_)) + sizeof(vote_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 survey_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_survey_id(&has_bits);
          survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vote(&has_bits);
          vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 survey_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_survey_id(), target);
  }

  // optional uint32 vote = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientSubmitSurveyVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 survey_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_survey_id());
    }

    // optional uint32 vote = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vote());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientSubmitSurveyVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      survey_id_ = from.survey_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_ = from.vote_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InternalSwap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, vote_)
      + sizeof(CMsgGCCStrike15_v2_ClientSubmitSurveyVote::vote_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, survey_id_)>(
          reinterpret_cast<char*>(&survey_id_),
          reinterpret_cast<char*>(&other->survey_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientSubmitSurveyVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Server2GCClientValidate::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Server2GCClientValidate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Server2GCClientValidate>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
}
CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(const CMsgGCCStrike15_v2_Server2GCClientValidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedCtor() {
  accountid_ = 0u;
}

CMsgGCCStrike15_v2_Server2GCClientValidate::~CMsgGCCStrike15_v2_Server2GCClientValidate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Server2GCClientValidate* _this = reinterpret_cast< CMsgGCCStrike15_v2_Server2GCClientValidate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Server2GCClientValidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Server2GCClientValidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Server2GCClientValidate& CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Server2GCClientValidate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Server2GCClientValidate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Server2GCClientValidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Server2GCClientValidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Server2GCClientValidate)
  return target;
}

size_t CMsgGCCStrike15_v2_Server2GCClientValidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Server2GCClientValidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Server2GCClientValidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Server2GCClientValidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Server2GCClientValidate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Server2GCClientValidate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::InternalSwap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Server2GCClientValidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>()._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teamids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teamids_(from.teamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eventid_, &from.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&eventid_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedCtor() {
  ::memset(&eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&eventid_)) + sizeof(game_type_));
}

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::~CMsgGCCStrike15_v2_GC2ClientTournamentInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo* _this = reinterpret_cast< CMsgGCCStrike15_v2_GC2ClientTournamentInfo* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_type_) -
        reinterpret_cast<char*>(&eventid_)) + sizeof(game_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stageid(&has_bits);
          stageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 teamids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_teamids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_teamids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional uint32 stageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stageid(), target);
  }

  // optional uint32 game_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // repeated uint32 teamids = 4;
  for (int i = 0, n = this->_internal_teamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientTournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 teamids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->teamids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_teamids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 eventid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eventid());
    }

    // optional uint32 stageid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stageid());
    }

    // optional uint32 game_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientTournamentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teamids_.MergeFrom(from.teamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      eventid_ = from.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_type_ = from.game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InternalSwap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamids_.InternalSwap(&other->teamids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, game_type_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientTournamentInfo::game_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, eventid_)>(
          reinterpret_cast<char*>(&eventid_),
          reinterpret_cast<char*>(&other->eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientTournamentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSOEconCoupon::InitAsDefaultInstance() {
}
class CSOEconCoupon::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconCoupon>()._has_bits_);
  static void set_has_entryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expiration_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOEconCoupon::CSOEconCoupon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconCoupon)
}
CSOEconCoupon::CSOEconCoupon(const CSOEconCoupon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_date_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(expiration_date_));
  // @@protoc_insertion_point(copy_constructor:CSOEconCoupon)
}

void CSOEconCoupon::SharedCtor() {
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_date_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(expiration_date_));
}

CSOEconCoupon::~CSOEconCoupon() {
  // @@protoc_insertion_point(destructor:CSOEconCoupon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconCoupon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconCoupon::ArenaDtor(void* object) {
  CSOEconCoupon* _this = reinterpret_cast< CSOEconCoupon* >(object);
  (void)_this;
}
void CSOEconCoupon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconCoupon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconCoupon& CSOEconCoupon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOEconCoupon_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconCoupon::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconCoupon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_date_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(expiration_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconCoupon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 entryid = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entryid(&has_bits);
          entryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_defidx(&has_bits);
          defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 expiration_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_expiration_date(&has_bits);
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconCoupon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconCoupon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entryid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entryid(), target);
  }

  // optional uint32 defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_defidx(), target);
  }

  // optional fixed32 expiration_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_expiration_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconCoupon)
  return target;
}

size_t CSOEconCoupon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconCoupon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 entryid = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entryid());
    }

    // optional uint32 defidx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defidx());
    }

    // optional fixed32 expiration_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconCoupon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconCoupon)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconCoupon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconCoupon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconCoupon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconCoupon)
    MergeFrom(*source);
  }
}

void CSOEconCoupon::MergeFrom(const CSOEconCoupon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconCoupon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      defidx_ = from.defidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiration_date_ = from.expiration_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconCoupon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconCoupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconCoupon::CopyFrom(const CSOEconCoupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconCoupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconCoupon::IsInitialized() const {
  return true;
}

void CSOEconCoupon::InternalSwap(CSOEconCoupon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconCoupon, expiration_date_)
      + sizeof(CSOEconCoupon::expiration_date_)
      - PROTOBUF_FIELD_OFFSET(CSOEconCoupon, entryid_)>(
          reinterpret_cast<char*>(&entryid_),
          reinterpret_cast<char*>(&other->entryid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconCoupon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSOQuestProgress::InitAsDefaultInstance() {
}
class CSOQuestProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOQuestProgress>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOQuestProgress::CSOQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOQuestProgress)
}
CSOQuestProgress::CSOQuestProgress(const CSOQuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bonus_points_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(bonus_points_));
  // @@protoc_insertion_point(copy_constructor:CSOQuestProgress)
}

void CSOQuestProgress::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bonus_points_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(bonus_points_));
}

CSOQuestProgress::~CSOQuestProgress() {
  // @@protoc_insertion_point(destructor:CSOQuestProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOQuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOQuestProgress::ArenaDtor(void* object) {
  CSOQuestProgress* _this = reinterpret_cast< CSOQuestProgress* >(object);
  (void)_this;
}
void CSOQuestProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOQuestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOQuestProgress& CSOQuestProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOQuestProgress_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOQuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOQuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bonus_points_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(bonus_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOQuestProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_points_remaining(&has_bits);
          points_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bonus_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bonus_points(&has_bits);
          bonus_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOQuestProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOQuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional uint32 points_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_points_remaining(), target);
  }

  // optional uint32 bonus_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bonus_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOQuestProgress)
  return target;
}

size_t CSOQuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOQuestProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 questid = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional uint32 points_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_remaining());
    }

    // optional uint32 bonus_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bonus_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOQuestProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOQuestProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOQuestProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOQuestProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOQuestProgress)
    MergeFrom(*source);
  }
}

void CSOQuestProgress::MergeFrom(const CSOQuestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_remaining_ = from.points_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_points_ = from.bonus_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOQuestProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestProgress::CopyFrom(const CSOQuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestProgress::IsInitialized() const {
  return true;
}

void CSOQuestProgress::InternalSwap(CSOQuestProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOQuestProgress, bonus_points_)
      + sizeof(CSOQuestProgress::bonus_points_)
      - PROTOBUF_FIELD_OFFSET(CSOQuestProgress, questid_)>(
          reinterpret_cast<char*>(&questid_),
          reinterpret_cast<char*>(&other->questid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOQuestProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSOAccountSeasonalOperation::InitAsDefaultInstance() {
}
class CSOAccountSeasonalOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOAccountSeasonalOperation>()._has_bits_);
  static void set_has_season_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tier_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_premium_tiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mission_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_missions_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSOAccountSeasonalOperation::CSOAccountSeasonalOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOAccountSeasonalOperation)
}
CSOAccountSeasonalOperation::CSOAccountSeasonalOperation(const CSOAccountSeasonalOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&season_value_, &from.season_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&missions_completed_) -
    reinterpret_cast<char*>(&season_value_)) + sizeof(missions_completed_));
  // @@protoc_insertion_point(copy_constructor:CSOAccountSeasonalOperation)
}

void CSOAccountSeasonalOperation::SharedCtor() {
  ::memset(&season_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missions_completed_) -
      reinterpret_cast<char*>(&season_value_)) + sizeof(missions_completed_));
}

CSOAccountSeasonalOperation::~CSOAccountSeasonalOperation() {
  // @@protoc_insertion_point(destructor:CSOAccountSeasonalOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOAccountSeasonalOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOAccountSeasonalOperation::ArenaDtor(void* object) {
  CSOAccountSeasonalOperation* _this = reinterpret_cast< CSOAccountSeasonalOperation* >(object);
  (void)_this;
}
void CSOAccountSeasonalOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOAccountSeasonalOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOAccountSeasonalOperation& CSOAccountSeasonalOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOAccountSeasonalOperation_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOAccountSeasonalOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOAccountSeasonalOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&season_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&missions_completed_) -
        reinterpret_cast<char*>(&season_value_)) + sizeof(missions_completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOAccountSeasonalOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 season_value = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_season_value(&has_bits);
          season_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tier_unlocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tier_unlocked(&has_bits);
          tier_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 premium_tiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_premium_tiers(&has_bits);
          premium_tiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mission_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mission_id(&has_bits);
          mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 missions_completed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_missions_completed(&has_bits);
          missions_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOAccountSeasonalOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOAccountSeasonalOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season_value = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_season_value(), target);
  }

  // optional uint32 tier_unlocked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tier_unlocked(), target);
  }

  // optional uint32 premium_tiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_premium_tiers(), target);
  }

  // optional uint32 mission_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mission_id(), target);
  }

  // optional uint32 missions_completed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_missions_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOAccountSeasonalOperation)
  return target;
}

size_t CSOAccountSeasonalOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOAccountSeasonalOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 season_value = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_value());
    }

    // optional uint32 tier_unlocked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tier_unlocked());
    }

    // optional uint32 premium_tiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_premium_tiers());
    }

    // optional uint32 mission_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mission_id());
    }

    // optional uint32 missions_completed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_missions_completed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOAccountSeasonalOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOAccountSeasonalOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOAccountSeasonalOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOAccountSeasonalOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOAccountSeasonalOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOAccountSeasonalOperation)
    MergeFrom(*source);
  }
}

void CSOAccountSeasonalOperation::MergeFrom(const CSOAccountSeasonalOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOAccountSeasonalOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      season_value_ = from.season_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      tier_unlocked_ = from.tier_unlocked_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_tiers_ = from.premium_tiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      mission_id_ = from.mission_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      missions_completed_ = from.missions_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOAccountSeasonalOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOAccountSeasonalOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOAccountSeasonalOperation::CopyFrom(const CSOAccountSeasonalOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOAccountSeasonalOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOAccountSeasonalOperation::IsInitialized() const {
  return true;
}

void CSOAccountSeasonalOperation::InternalSwap(CSOAccountSeasonalOperation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOAccountSeasonalOperation, missions_completed_)
      + sizeof(CSOAccountSeasonalOperation::missions_completed_)
      - PROTOBUF_FIELD_OFFSET(CSOAccountSeasonalOperation, season_value_)>(
          reinterpret_cast<char*>(&season_value_),
          reinterpret_cast<char*>(&other->season_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOAccountSeasonalOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSOPersonaDataPublic::InitAsDefaultInstance() {
  ::_CSOPersonaDataPublic_default_instance_._instance.get_mutable()->commendation_ = const_cast< ::PlayerCommendationInfo*>(
      ::PlayerCommendationInfo::internal_default_instance());
}
class CSOPersonaDataPublic::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOPersonaDataPublic>()._has_bits_);
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PlayerCommendationInfo& commendation(const CSOPersonaDataPublic* msg);
  static void set_has_commendation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elevated_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PlayerCommendationInfo&
CSOPersonaDataPublic::_Internal::commendation(const CSOPersonaDataPublic* msg) {
  return *msg->commendation_;
}
CSOPersonaDataPublic::CSOPersonaDataPublic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOPersonaDataPublic)
}
CSOPersonaDataPublic::CSOPersonaDataPublic(const CSOPersonaDataPublic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commendation()) {
    commendation_ = new ::PlayerCommendationInfo(*from.commendation_);
  } else {
    commendation_ = nullptr;
  }
  ::memcpy(&player_level_, &from.player_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&elevated_state_) -
    reinterpret_cast<char*>(&player_level_)) + sizeof(elevated_state_));
  // @@protoc_insertion_point(copy_constructor:CSOPersonaDataPublic)
}

void CSOPersonaDataPublic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSOPersonaDataPublic_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&commendation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elevated_state_) -
      reinterpret_cast<char*>(&commendation_)) + sizeof(elevated_state_));
}

CSOPersonaDataPublic::~CSOPersonaDataPublic() {
  // @@protoc_insertion_point(destructor:CSOPersonaDataPublic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOPersonaDataPublic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commendation_;
}

void CSOPersonaDataPublic::ArenaDtor(void* object) {
  CSOPersonaDataPublic* _this = reinterpret_cast< CSOPersonaDataPublic* >(object);
  (void)_this;
}
void CSOPersonaDataPublic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOPersonaDataPublic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOPersonaDataPublic& CSOPersonaDataPublic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOPersonaDataPublic_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOPersonaDataPublic::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOPersonaDataPublic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commendation_ != nullptr);
    commendation_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elevated_state_) -
        reinterpret_cast<char*>(&player_level_)) + sizeof(elevated_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOPersonaDataPublic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_level(&has_bits);
          player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerCommendationInfo commendation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commendation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool elevated_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_elevated_state(&has_bits);
          elevated_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOPersonaDataPublic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOPersonaDataPublic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_level = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_level(), target);
  }

  // optional .PlayerCommendationInfo commendation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::commendation(this), target, stream);
  }

  // optional bool elevated_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_elevated_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOPersonaDataPublic)
  return target;
}

size_t CSOPersonaDataPublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOPersonaDataPublic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .PlayerCommendationInfo commendation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commendation_);
    }

    // optional int32 player_level = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_level());
    }

    // optional bool elevated_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOPersonaDataPublic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOPersonaDataPublic)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOPersonaDataPublic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOPersonaDataPublic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOPersonaDataPublic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOPersonaDataPublic)
    MergeFrom(*source);
  }
}

void CSOPersonaDataPublic::MergeFrom(const CSOPersonaDataPublic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOPersonaDataPublic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from._internal_commendation());
    }
    if (cached_has_bits & 0x00000002u) {
      player_level_ = from.player_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      elevated_state_ = from.elevated_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOPersonaDataPublic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOPersonaDataPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOPersonaDataPublic::CopyFrom(const CSOPersonaDataPublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOPersonaDataPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPersonaDataPublic::IsInitialized() const {
  return true;
}

void CSOPersonaDataPublic::InternalSwap(CSOPersonaDataPublic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOPersonaDataPublic, elevated_state_)
      + sizeof(CSOPersonaDataPublic::elevated_state_)
      - PROTOBUF_FIELD_OFFSET(CSOPersonaDataPublic, commendation_)>(
          reinterpret_cast<char*>(&commendation_),
          reinterpret_cast<char*>(&other->commendation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOPersonaDataPublic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGC_GlobalGame_Subscribe::InitAsDefaultInstance() {
}
class CMsgGC_GlobalGame_Subscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GlobalGame_Subscribe>()._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GlobalGame_Subscribe)
}
CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(const CMsgGC_GlobalGame_Subscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_ = from.ticket_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Subscribe)
}

void CMsgGC_GlobalGame_Subscribe::SharedCtor() {
  ticket_ = PROTOBUF_ULONGLONG(0);
}

CMsgGC_GlobalGame_Subscribe::~CMsgGC_GlobalGame_Subscribe() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Subscribe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GlobalGame_Subscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGC_GlobalGame_Subscribe::ArenaDtor(void* object) {
  CMsgGC_GlobalGame_Subscribe* _this = reinterpret_cast< CMsgGC_GlobalGame_Subscribe* >(object);
  (void)_this;
}
void CMsgGC_GlobalGame_Subscribe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GlobalGame_Subscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGC_GlobalGame_Subscribe& CMsgGC_GlobalGame_Subscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGC_GlobalGame_Subscribe_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGC_GlobalGame_Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Subscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GlobalGame_Subscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ticket(&has_bits);
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GlobalGame_Subscribe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Subscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Subscribe)
  return target;
}

size_t CMsgGC_GlobalGame_Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Subscribe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 ticket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GlobalGame_Subscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GlobalGame_Subscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Subscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GlobalGame_Subscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GlobalGame_Subscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GlobalGame_Subscribe)
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Subscribe::MergeFrom(const CMsgGC_GlobalGame_Subscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Subscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticket()) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GlobalGame_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const CMsgGC_GlobalGame_Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Subscribe::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Subscribe::InternalSwap(CMsgGC_GlobalGame_Subscribe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ticket_, other->ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GlobalGame_Subscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGC_GlobalGame_Unsubscribe::InitAsDefaultInstance() {
}
class CMsgGC_GlobalGame_Unsubscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GlobalGame_Unsubscribe>()._has_bits_);
  static void set_has_timeleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GlobalGame_Unsubscribe)
}
CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(const CMsgGC_GlobalGame_Unsubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeleft_ = from.timeleft_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Unsubscribe)
}

void CMsgGC_GlobalGame_Unsubscribe::SharedCtor() {
  timeleft_ = 0;
}

CMsgGC_GlobalGame_Unsubscribe::~CMsgGC_GlobalGame_Unsubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Unsubscribe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GlobalGame_Unsubscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGC_GlobalGame_Unsubscribe::ArenaDtor(void* object) {
  CMsgGC_GlobalGame_Unsubscribe* _this = reinterpret_cast< CMsgGC_GlobalGame_Unsubscribe* >(object);
  (void)_this;
}
void CMsgGC_GlobalGame_Unsubscribe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GlobalGame_Unsubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGC_GlobalGame_Unsubscribe& CMsgGC_GlobalGame_Unsubscribe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGC_GlobalGame_Unsubscribe_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGC_GlobalGame_Unsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Unsubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeleft_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GlobalGame_Unsubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 timeleft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timeleft(&has_bits);
          timeleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GlobalGame_Unsubscribe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Unsubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 timeleft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_timeleft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Unsubscribe)
  return target;
}

size_t CMsgGC_GlobalGame_Unsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Unsubscribe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 timeleft = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeleft());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GlobalGame_Unsubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GlobalGame_Unsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Unsubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GlobalGame_Unsubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GlobalGame_Unsubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GlobalGame_Unsubscribe)
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Unsubscribe::MergeFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Unsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeleft()) {
    _internal_set_timeleft(from._internal_timeleft());
  }
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GlobalGame_Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Unsubscribe::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Unsubscribe::InternalSwap(CMsgGC_GlobalGame_Unsubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeleft_, other->timeleft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GlobalGame_Unsubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGC_GlobalGame_Play::InitAsDefaultInstance() {
}
class CMsgGC_GlobalGame_Play::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GlobalGame_Play>()._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gametimems(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msperpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GlobalGame_Play)
}
CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(const CMsgGC_GlobalGame_Play& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ticket_, &from.ticket_,
    static_cast<size_t>(reinterpret_cast<char*>(&msperpoint_) -
    reinterpret_cast<char*>(&ticket_)) + sizeof(msperpoint_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Play)
}

void CMsgGC_GlobalGame_Play::SharedCtor() {
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msperpoint_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(msperpoint_));
}

CMsgGC_GlobalGame_Play::~CMsgGC_GlobalGame_Play() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Play)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GlobalGame_Play::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGC_GlobalGame_Play::ArenaDtor(void* object) {
  CMsgGC_GlobalGame_Play* _this = reinterpret_cast< CMsgGC_GlobalGame_Play* >(object);
  (void)_this;
}
void CMsgGC_GlobalGame_Play::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GlobalGame_Play::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGC_GlobalGame_Play& CMsgGC_GlobalGame_Play::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGC_GlobalGame_Play_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGC_GlobalGame_Play::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Play)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ticket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msperpoint_) -
        reinterpret_cast<char*>(&ticket_)) + sizeof(msperpoint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GlobalGame_Play::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ticket(&has_bits);
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gametimems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gametimems(&has_bits);
          gametimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msperpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_msperpoint(&has_bits);
          msperpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GlobalGame_Play::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Play)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ticket(), target);
  }

  // optional uint32 gametimems = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gametimems(), target);
  }

  // optional uint32 msperpoint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msperpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Play)
  return target;
}

size_t CMsgGC_GlobalGame_Play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Play)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ticket());
    }

    // optional uint32 gametimems = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gametimems());
    }

    // optional uint32 msperpoint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msperpoint());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GlobalGame_Play::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GlobalGame_Play)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Play* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GlobalGame_Play>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GlobalGame_Play)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GlobalGame_Play)
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Play::MergeFrom(const CMsgGC_GlobalGame_Play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_ = from.ticket_;
    }
    if (cached_has_bits & 0x00000002u) {
      gametimems_ = from.gametimems_;
    }
    if (cached_has_bits & 0x00000004u) {
      msperpoint_ = from.msperpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GlobalGame_Play::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GlobalGame_Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Play::CopyFrom(const CMsgGC_GlobalGame_Play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Play::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Play::InternalSwap(CMsgGC_GlobalGame_Play* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_GlobalGame_Play, msperpoint_)
      + sizeof(CMsgGC_GlobalGame_Play::msperpoint_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_GlobalGame_Play, ticket_)>(
          reinterpret_cast<char*>(&ticket_),
          reinterpret_cast<char*>(&other->ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GlobalGame_Play::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_AcknowledgePenalty::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_AcknowledgePenalty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_AcknowledgePenalty>()._has_bits_);
  static void set_has_acknowledged(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
}
CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(const CMsgGCCStrike15_v2_AcknowledgePenalty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acknowledged_ = from.acknowledged_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedCtor() {
  acknowledged_ = 0;
}

CMsgGCCStrike15_v2_AcknowledgePenalty::~CMsgGCCStrike15_v2_AcknowledgePenalty() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_AcknowledgePenalty* _this = reinterpret_cast< CMsgGCCStrike15_v2_AcknowledgePenalty* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_AcknowledgePenalty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_AcknowledgePenalty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_AcknowledgePenalty& CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_AcknowledgePenalty_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_AcknowledgePenalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acknowledged_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_AcknowledgePenalty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 acknowledged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_acknowledged(&has_bits);
          acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_AcknowledgePenalty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 acknowledged = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_acknowledged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AcknowledgePenalty)
  return target;
}

size_t CMsgGCCStrike15_v2_AcknowledgePenalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 acknowledged = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acknowledged());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AcknowledgePenalty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_AcknowledgePenalty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_AcknowledgePenalty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_AcknowledgePenalty)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acknowledged()) {
    _internal_set_acknowledged(from._internal_acknowledged());
  }
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AcknowledgePenalty::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::InternalSwap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(acknowledged_, other->acknowledged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_AcknowledgePenalty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>()._has_bits_);
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upgradeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prestigetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}
CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upgradeid_, &from.upgradeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prestigetime_) -
    reinterpret_cast<char*>(&upgradeid_)) + sizeof(prestigetime_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedCtor() {
  ::memset(&upgradeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prestigetime_) -
      reinterpret_cast<char*>(&upgradeid_)) + sizeof(prestigetime_));
}

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::~CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* _this = reinterpret_cast< CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&upgradeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prestigetime_) -
        reinterpret_cast<char*>(&upgradeid_)) + sizeof(prestigetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 upgradeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_upgradeid(&has_bits);
          upgradeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hours = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hours(&has_bits);
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prestigetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prestigetime(&has_bits);
          prestigetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 defindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_defindex(), target);
  }

  // optional uint64 upgradeid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_upgradeid(), target);
  }

  // optional uint32 hours = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hours(), target);
  }

  // optional uint32 prestigetime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prestigetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 upgradeid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_upgradeid());
    }

    // optional uint32 defindex = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defindex());
    }

    // optional uint32 hours = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hours());
    }

    // optional uint32 prestigetime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prestigetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      upgradeid_ = from.upgradeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000008u) {
      prestigetime_ = from.prestigetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InternalSwap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, prestigetime_)
      + sizeof(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::prestigetime_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, upgradeid_)>(
          reinterpret_cast<char*>(&upgradeid_),
          reinterpret_cast<char*>(&other->upgradeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Client2GCStreamUnlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCStreamUnlock>()._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}
CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ticket_, &from.ticket_,
    static_cast<size_t>(reinterpret_cast<char*>(&os_) -
    reinterpret_cast<char*>(&ticket_)) + sizeof(os_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedCtor() {
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&os_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(os_));
}

CMsgGCCStrike15_v2_Client2GCStreamUnlock::~CMsgGCCStrike15_v2_Client2GCStreamUnlock() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Client2GCStreamUnlock* _this = reinterpret_cast< CMsgGCCStrike15_v2_Client2GCStreamUnlock* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Client2GCStreamUnlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Client2GCStreamUnlock& CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Client2GCStreamUnlock_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Client2GCStreamUnlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ticket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&os_) -
        reinterpret_cast<char*>(&ticket_)) + sizeof(os_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCStreamUnlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ticket(&has_bits);
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 os = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_os(&has_bits);
          os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Client2GCStreamUnlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ticket(), target);
  }

  // optional int32 os = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_os(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCStreamUnlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ticket());
    }

    // optional int32 os = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_os());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCStreamUnlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Client2GCStreamUnlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_ = from.ticket_;
    }
    if (cached_has_bits & 0x00000002u) {
      os_ = from.os_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::InternalSwap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, os_)
      + sizeof(CMsgGCCStrike15_v2_Client2GCStreamUnlock::os_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, ticket_)>(
          reinterpret_cast<char*>(&ticket_),
          reinterpret_cast<char*>(&other->ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCStreamUnlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientToGCRequestElevate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientToGCRequestElevate>()._has_bits_);
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}
CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedCtor() {
  stage_ = 0u;
}

CMsgGCCStrike15_v2_ClientToGCRequestElevate::~CMsgGCCStrike15_v2_ClientToGCRequestElevate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientToGCRequestElevate* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientToGCRequestElevate* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientToGCRequestElevate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientToGCRequestElevate& CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientToGCRequestElevate_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientToGCRequestElevate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientToGCRequestElevate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stage(&has_bits);
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientToGCRequestElevate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCRequestElevate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 stage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCRequestElevate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientToGCRequestElevate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stage()) {
    _internal_set_stage(from._internal_stage());
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientToGCRequestElevate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientToGCChat::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientToGCChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientToGCChat>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientToGCChat)
}
CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(const CMsgGCCStrike15_v2_ClientToGCChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCChat)
}

void CMsgGCCStrike15_v2_ClientToGCChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientToGCChat_cstrike15_5fgcmessages_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCCStrike15_v2_ClientToGCChat::~CMsgGCCStrike15_v2_ClientToGCChat() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientToGCChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientToGCChat::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientToGCChat* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientToGCChat* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientToGCChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientToGCChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientToGCChat& CMsgGCCStrike15_v2_ClientToGCChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientToGCChat_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientToGCChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientToGCChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientToGCChat.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientToGCChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientToGCChat.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCChat)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientToGCChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientToGCChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientToGCChat)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCChat::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCChat::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCChat::InternalSwap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientToGCChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GCToClientChat::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GCToClientChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GCToClientChat>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GCToClientChat)
}
CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(const CMsgGCCStrike15_v2_GCToClientChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GCToClientChat)
}

void CMsgGCCStrike15_v2_GCToClientChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GCToClientChat_cstrike15_5fgcmessages_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CMsgGCCStrike15_v2_GCToClientChat::~CMsgGCCStrike15_v2_GCToClientChat() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GCToClientChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GCToClientChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GCToClientChat::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GCToClientChat* _this = reinterpret_cast< CMsgGCCStrike15_v2_GCToClientChat* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GCToClientChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GCToClientChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GCToClientChat& CMsgGCCStrike15_v2_GCToClientChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GCToClientChat_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GCToClientChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GCToClientChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GCToClientChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_GCToClientChat.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GCToClientChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GCToClientChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GCToClientChat.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GCToClientChat)
  return target;
}

size_t CMsgGCCStrike15_v2_GCToClientChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GCToClientChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GCToClientChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GCToClientChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GCToClientChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GCToClientChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GCToClientChat)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GCToClientChat::MergeFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GCToClientChat::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GCToClientChat::InternalSwap(CMsgGCCStrike15_v2_GCToClientChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GCToClientChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientAuthKeyCode::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientAuthKeyCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientAuthKeyCode>()._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}
CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode_cstrike15_5fgcmessages_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0u;
}

CMsgGCCStrike15_v2_ClientAuthKeyCode::~CMsgGCCStrike15_v2_ClientAuthKeyCode() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientAuthKeyCode* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientAuthKeyCode* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientAuthKeyCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientAuthKeyCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientAuthKeyCode& CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientAuthKeyCode_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientAuthKeyCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmpty();
  }
  eventid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientAuthKeyCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientAuthKeyCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientAuthKeyCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional uint32 eventid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eventid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientAuthKeyCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientAuthKeyCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientAuthKeyCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientAuthKeyCode)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAuthKeyCode::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::InternalSwap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientAuthKeyCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_GotvSyncPacket::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_GotvSyncPacket_default_instance_._instance.get_mutable()->data_ = const_cast< ::CEngineGotvSyncPacket*>(
      ::CEngineGotvSyncPacket::internal_default_instance());
}
class CMsgGCCStrike15_GotvSyncPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_GotvSyncPacket>()._has_bits_);
  static const ::CEngineGotvSyncPacket& data(const CMsgGCCStrike15_GotvSyncPacket* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEngineGotvSyncPacket&
CMsgGCCStrike15_GotvSyncPacket::_Internal::data(const CMsgGCCStrike15_GotvSyncPacket* msg) {
  return *msg->data_;
}
void CMsgGCCStrike15_GotvSyncPacket::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_GotvSyncPacket)
}
CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(const CMsgGCCStrike15_GotvSyncPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::CEngineGotvSyncPacket(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_GotvSyncPacket)
}

void CMsgGCCStrike15_GotvSyncPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_GotvSyncPacket_cstrike15_5fgcmessages_2eproto.base);
  data_ = nullptr;
}

CMsgGCCStrike15_GotvSyncPacket::~CMsgGCCStrike15_GotvSyncPacket() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_GotvSyncPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_GotvSyncPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CMsgGCCStrike15_GotvSyncPacket::ArenaDtor(void* object) {
  CMsgGCCStrike15_GotvSyncPacket* _this = reinterpret_cast< CMsgGCCStrike15_GotvSyncPacket* >(object);
  (void)_this;
}
void CMsgGCCStrike15_GotvSyncPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_GotvSyncPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_GotvSyncPacket& CMsgGCCStrike15_GotvSyncPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_GotvSyncPacket_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_GotvSyncPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_GotvSyncPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_GotvSyncPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CEngineGotvSyncPacket data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_GotvSyncPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_GotvSyncPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEngineGotvSyncPacket data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_GotvSyncPacket)
  return target;
}

size_t CMsgGCCStrike15_GotvSyncPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_GotvSyncPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEngineGotvSyncPacket data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_GotvSyncPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_GotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_GotvSyncPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_GotvSyncPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_GotvSyncPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_GotvSyncPacket)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_GotvSyncPacket::MergeFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_GotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::CEngineGotvSyncPacket::MergeFrom(from._internal_data());
  }
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_GotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_GotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_GotvSyncPacket::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_GotvSyncPacket::InternalSwap(CMsgGCCStrike15_GotvSyncPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_GotvSyncPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerDecalDigitalSignature::InitAsDefaultInstance() {
}
class PlayerDecalDigitalSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDecalDigitalSignature>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tx_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hitbox(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_equipslot(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tint_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  endpos_(arena),
  startpos_(arena),
  right_(arena),
  normal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerDecalDigitalSignature)
}
PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      endpos_(from.endpos_),
      startpos_(from.startpos_),
      right_(from.right_),
      normal_(from.normal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tint_id_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(tint_id_));
  // @@protoc_insertion_point(copy_constructor:PlayerDecalDigitalSignature)
}

void PlayerDecalDigitalSignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tint_id_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(tint_id_));
}

PlayerDecalDigitalSignature::~PlayerDecalDigitalSignature() {
  // @@protoc_insertion_point(destructor:PlayerDecalDigitalSignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerDecalDigitalSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerDecalDigitalSignature::ArenaDtor(void* object) {
  PlayerDecalDigitalSignature* _this = reinterpret_cast< PlayerDecalDigitalSignature* >(object);
  (void)_this;
}
void PlayerDecalDigitalSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDecalDigitalSignature& PlayerDecalDigitalSignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerDecalDigitalSignature_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerDecalDigitalSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDecalDigitalSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpos_.Clear();
  startpos_.Clear();
  right_.Clear();
  normal_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&equipslot_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(equipslot_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tint_id_) -
        reinterpret_cast<char*>(&trace_id_)) + sizeof(tint_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDecalDigitalSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rtime(&has_bits);
          rtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float endpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_endpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_endpos(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float startpos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_startpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_startpos(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_right(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_right(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tx_defidx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tx_defidx(&has_bits);
          tx_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entindex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hitbox = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hitbox(&has_bits);
          hitbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float creationtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_creationtime(&has_bits);
          creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 equipslot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_equipslot(&has_bits);
          equipslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trace_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_trace_id(&has_bits);
          trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float normal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_normal(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_normal(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tint_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tint_id(&has_bits);
          tint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerDecalDigitalSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDecalDigitalSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // optional uint32 rtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtime(), target);
  }

  // repeated float endpos = 4;
  for (int i = 0, n = this->_internal_endpos_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_endpos(i), target);
  }

  // repeated float startpos = 5;
  for (int i = 0, n = this->_internal_startpos_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_startpos(i), target);
  }

  // repeated float right = 6;
  for (int i = 0, n = this->_internal_right_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_right(i), target);
  }

  // optional uint32 tx_defidx = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tx_defidx(), target);
  }

  // optional int32 entindex = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_entindex(), target);
  }

  // optional uint32 hitbox = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hitbox(), target);
  }

  // optional float creationtime = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_creationtime(), target);
  }

  // optional uint32 equipslot = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_equipslot(), target);
  }

  // optional uint32 trace_id = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_trace_id(), target);
  }

  // repeated float normal = 13;
  for (int i = 0, n = this->_internal_normal_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_normal(i), target);
  }

  // optional uint32 tint_id = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tint_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDecalDigitalSignature)
  return target;
}

size_t PlayerDecalDigitalSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDecalDigitalSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float endpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_endpos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_endpos_size());
    total_size += data_size;
  }

  // repeated float startpos = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_startpos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_startpos_size());
    total_size += data_size;
  }

  // repeated float right = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_right_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_right_size());
    total_size += data_size;
  }

  // repeated float normal = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normal_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_normal_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 rtime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime());
    }

    // optional uint32 tx_defidx = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tx_defidx());
    }

    // optional int32 entindex = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entindex());
    }

    // optional uint32 hitbox = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hitbox());
    }

    // optional float creationtime = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 equipslot = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_equipslot());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 trace_id = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trace_id());
    }

    // optional uint32 tint_id = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tint_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDecalDigitalSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDecalDigitalSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerDecalDigitalSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerDecalDigitalSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerDecalDigitalSignature)
    MergeFrom(*source);
  }
}

void PlayerDecalDigitalSignature::MergeFrom(const PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endpos_.MergeFrom(from.endpos_);
  startpos_.MergeFrom(from.startpos_);
  right_.MergeFrom(from.right_);
  normal_.MergeFrom(from.normal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime_ = from.rtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_defidx_ = from.tx_defidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      hitbox_ = from.hitbox_;
    }
    if (cached_has_bits & 0x00000040u) {
      creationtime_ = from.creationtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      equipslot_ = from.equipslot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      tint_id_ = from.tint_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerDecalDigitalSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDecalDigitalSignature::CopyFrom(const PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDecalDigitalSignature::IsInitialized() const {
  return true;
}

void PlayerDecalDigitalSignature::InternalSwap(PlayerDecalDigitalSignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  endpos_.InternalSwap(&other->endpos_);
  startpos_.InternalSwap(&other->startpos_);
  right_.InternalSwap(&other->right_);
  normal_.InternalSwap(&other->normal_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDecalDigitalSignature, tint_id_)
      + sizeof(PlayerDecalDigitalSignature::tint_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerDecalDigitalSignature, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDecalDigitalSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::InitAsDefaultInstance() {
  ::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_._instance.get_mutable()->data_ = const_cast< ::PlayerDecalDigitalSignature*>(
      ::PlayerDecalDigitalSignature::internal_default_instance());
}
class CMsgGCCStrike15_v2_ClientPlayerDecalSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPlayerDecalSign>()._has_bits_);
  static const ::PlayerDecalDigitalSignature& data(const CMsgGCCStrike15_v2_ClientPlayerDecalSign* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PlayerDecalDigitalSignature&
CMsgGCCStrike15_v2_ClientPlayerDecalSign::_Internal::data(const CMsgGCCStrike15_v2_ClientPlayerDecalSign* msg) {
  return *msg->data_;
}
CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}
CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerDecalDigitalSignature(*from.data_);
  } else {
    data_ = nullptr;
  }
  itemid_ = from.itemid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign_cstrike15_5fgcmessages_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&data_)) + sizeof(itemid_));
}

CMsgGCCStrike15_v2_ClientPlayerDecalSign::~CMsgGCCStrike15_v2_ClientPlayerDecalSign() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPlayerDecalSign* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPlayerDecalSign* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPlayerDecalSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPlayerDecalSign& CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPlayerDecalSign_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPlayerDecalSign::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  itemid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPlayerDecalSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPlayerDecalSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PlayerDecalDigitalSignature data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPlayerDecalSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PlayerDecalDigitalSignature data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPlayerDecalSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPlayerDecalSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::InternalSwap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, itemid_)
      + sizeof(CMsgGCCStrike15_v2_ClientPlayerDecalSign::itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPlayerDecalSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientLogonFatalError::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientLogonFatalError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientLogonFatalError>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
}
CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(const CMsgGCCStrike15_v2_ClientLogonFatalError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError_cstrike15_5fgcmessages_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
}

CMsgGCCStrike15_v2_ClientLogonFatalError::~CMsgGCCStrike15_v2_ClientLogonFatalError() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientLogonFatalError* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientLogonFatalError* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientLogonFatalError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientLogonFatalError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientLogonFatalError& CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientLogonFatalError_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientLogonFatalError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      country_.ClearNonDefaultToEmpty();
    }
  }
  errorcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientLogonFatalError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientLogonFatalError.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientLogonFatalError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errorcode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientLogonFatalError.country");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientLogonFatalError)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientLogonFatalError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string country = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional uint32 errorcode = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errorcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientLogonFatalError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientLogonFatalError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientLogonFatalError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientLogonFatalError)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientLogonFatalError::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::InternalSwap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientLogonFatalError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPollState::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientPollState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPollState>()._has_bits_);
  static void set_has_pollid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPollState)
}
CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(const CMsgGCCStrike15_v2_ClientPollState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      names_(from.names_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pollid_ = from.pollid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPollState)
}

void CMsgGCCStrike15_v2_ClientPollState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPollState_cstrike15_5fgcmessages_2eproto.base);
  pollid_ = 0u;
}

CMsgGCCStrike15_v2_ClientPollState::~CMsgGCCStrike15_v2_ClientPollState() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPollState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPollState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPollState::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPollState* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPollState* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPollState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPollState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPollState& CMsgGCCStrike15_v2_ClientPollState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPollState_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPollState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPollState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  values_.Clear();
  pollid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPollState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pollid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pollid(&has_bits);
          pollid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientPollState.names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPollState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPollState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pollid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pollid(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientPollState.names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPollState)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPollState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPollState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated int32 values = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->values_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  // optional uint32 pollid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pollid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPollState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPollState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPollState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPollState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPollState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPollState)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPollState::MergeFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPollState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  values_.MergeFrom(from.values_);
  if (from._internal_has_pollid()) {
    _internal_set_pollid(from._internal_pollid());
  }
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPollState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPollState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPollState::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPollState::InternalSwap(CMsgGCCStrike15_v2_ClientPollState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  names_.InternalSwap(&other->names_);
  values_.InternalSwap(&other->values_);
  swap(pollid_, other->pollid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPollState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_Register::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Party_Register::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_Register>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_apr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ark(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nby(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_Register)
}
CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(const CMsgGCCStrike15_v2_Party_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Register)
}

void CMsgGCCStrike15_v2_Party_Register::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_type_));
}

CMsgGCCStrike15_v2_Party_Register::~CMsgGCCStrike15_v2_Party_Register() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Register)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Party_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Party_Register::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Party_Register* _this = reinterpret_cast< CMsgGCCStrike15_v2_Party_Register* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Party_Register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Party_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Party_Register& CMsgGCCStrike15_v2_Party_Register::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Party_Register_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launcher_) -
        reinterpret_cast<char*>(&id_)) + sizeof(launcher_));
  }
  game_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 apr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_apr(&has_bits);
          apr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ark = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ark(&has_bits);
          ark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nby = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nby(&has_bits);
          nby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_grp(&has_bits);
          grp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_slots(&has_bits);
          slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 launcher = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_launcher(&has_bits);
          launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Party_Register::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 ver = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ver(), target);
  }

  // optional uint32 apr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apr(), target);
  }

  // optional uint32 ark = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ark(), target);
  }

  // optional uint32 nby = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nby(), target);
  }

  // optional uint32 grp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_grp(), target);
  }

  // optional uint32 slots = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_slots(), target);
  }

  // optional uint32 launcher = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_launcher(), target);
  }

  // optional uint32 game_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Register)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 ver = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ver());
    }

    // optional uint32 apr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_apr());
    }

    // optional uint32 ark = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ark());
    }

    // optional uint32 nby = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nby());
    }

    // optional uint32 grp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grp());
    }

    // optional uint32 slots = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slots());
    }

    // optional uint32 launcher = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_launcher());
    }

  }
  // optional uint32 game_type = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_Register)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Register* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Party_Register>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_Register)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_Register)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Register::MergeFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000004u) {
      apr_ = from.apr_;
    }
    if (cached_has_bits & 0x00000008u) {
      ark_ = from.ark_;
    }
    if (cached_has_bits & 0x00000010u) {
      nby_ = from.nby_;
    }
    if (cached_has_bits & 0x00000020u) {
      grp_ = from.grp_;
    }
    if (cached_has_bits & 0x00000040u) {
      slots_ = from.slots_;
    }
    if (cached_has_bits & 0x00000080u) {
      launcher_ = from.launcher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_game_type(from._internal_game_type());
  }
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Register::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Register::InternalSwap(CMsgGCCStrike15_v2_Party_Register* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, game_type_)
      + sizeof(CMsgGCCStrike15_v2_Party_Register::game_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_Register::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_Search::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Party_Search::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_Search>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_apr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ark(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  grps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_Search)
}
CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(const CMsgGCCStrike15_v2_Party_Search& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      grps_(from.grps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Search)
}

void CMsgGCCStrike15_v2_Party_Search::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_type_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(game_type_));
}

CMsgGCCStrike15_v2_Party_Search::~CMsgGCCStrike15_v2_Party_Search() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Search)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Party_Search::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Party_Search::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Party_Search* _this = reinterpret_cast< CMsgGCCStrike15_v2_Party_Search* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Party_Search::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Party_Search::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Party_Search& CMsgGCCStrike15_v2_Party_Search::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Party_Search_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_Search::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Search)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_type_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(game_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_Search::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 apr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_apr(&has_bits);
          apr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ark = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ark(&has_bits);
          ark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 grps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_grps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_grps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 launcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_launcher(&has_bits);
          launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Party_Search::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Search)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 apr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apr(), target);
  }

  // optional uint32 ark = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ark(), target);
  }

  // repeated uint32 grps = 4;
  for (int i = 0, n = this->_internal_grps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_grps(i), target);
  }

  // optional uint32 launcher = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_launcher(), target);
  }

  // optional uint32 game_type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Search)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Search)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 grps = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->grps_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_grps_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ver());
    }

    // optional uint32 apr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_apr());
    }

    // optional uint32 ark = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ark());
    }

    // optional uint32 launcher = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_launcher());
    }

    // optional uint32 game_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Search::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_Search)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Search* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Party_Search>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_Search)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_Search)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Search::MergeFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Search)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grps_.MergeFrom(from.grps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      apr_ = from.apr_;
    }
    if (cached_has_bits & 0x00000004u) {
      ark_ = from.ark_;
    }
    if (cached_has_bits & 0x00000008u) {
      launcher_ = from.launcher_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_type_ = from.game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Search::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Search::InternalSwap(CMsgGCCStrike15_v2_Party_Search* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  grps_.InternalSwap(&other->grps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, game_type_)
      + sizeof(CMsgGCCStrike15_v2_Party_Search::game_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, ver_)>(
          reinterpret_cast<char*>(&ver_),
          reinterpret_cast<char*>(&other->ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_Search::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Party_SearchResults_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_SearchResults_Entry>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_apr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ark(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}
CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&loc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(loc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loc_) -
      reinterpret_cast<char*>(&id_)) + sizeof(loc_));
}

CMsgGCCStrike15_v2_Party_SearchResults_Entry::~CMsgGCCStrike15_v2_Party_SearchResults_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Party_SearchResults_Entry* _this = reinterpret_cast< CMsgGCCStrike15_v2_Party_SearchResults_Entry* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Party_SearchResults_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Party_SearchResults_Entry& CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Party_SearchResults_Entry_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_SearchResults_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loc_) -
        reinterpret_cast<char*>(&id_)) + sizeof(loc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_SearchResults_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grp(&has_bits);
          grp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 apr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_apr(&has_bits);
          apr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ark = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ark(&has_bits);
          ark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 loc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_loc(&has_bits);
          loc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Party_SearchResults_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 grp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grp(), target);
  }

  // optional uint32 game_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // optional uint32 apr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_apr(), target);
  }

  // optional uint32 ark = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ark(), target);
  }

  // optional uint32 loc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_loc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_SearchResults_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 grp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grp());
    }

    // optional uint32 game_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

    // optional uint32 apr = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_apr());
    }

    // optional uint32 ark = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ark());
    }

    // optional uint32 loc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_SearchResults_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Party_SearchResults_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      grp_ = from.grp_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      apr_ = from.apr_;
    }
    if (cached_has_bits & 0x00000010u) {
      ark_ = from.ark_;
    }
    if (cached_has_bits & 0x00000020u) {
      loc_ = from.loc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, loc_)
      + sizeof(CMsgGCCStrike15_v2_Party_SearchResults_Entry::loc_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_SearchResults_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_SearchResults::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Party_SearchResults::_Internal {
 public:
};

CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_SearchResults)
}
CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(const CMsgGCCStrike15_v2_Party_SearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_SearchResults)
}

void CMsgGCCStrike15_v2_Party_SearchResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Party_SearchResults_cstrike15_5fgcmessages_2eproto.base);
}

CMsgGCCStrike15_v2_Party_SearchResults::~CMsgGCCStrike15_v2_Party_SearchResults() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_SearchResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Party_SearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Party_SearchResults::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Party_SearchResults* _this = reinterpret_cast< CMsgGCCStrike15_v2_Party_SearchResults* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Party_SearchResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Party_SearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Party_SearchResults& CMsgGCCStrike15_v2_Party_SearchResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Party_SearchResults_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_SearchResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Party_SearchResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_SearchResults)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_SearchResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_SearchResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_SearchResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Party_SearchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_SearchResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_SearchResults)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults::MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults::InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_SearchResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Party_Invite::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Party_Invite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_Invite>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobbyid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_Invite)
}
CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(const CMsgGCCStrike15_v2_Party_Invite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobbyid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(lobbyid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Invite)
}

void CMsgGCCStrike15_v2_Party_Invite::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lobbyid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(lobbyid_));
}

CMsgGCCStrike15_v2_Party_Invite::~CMsgGCCStrike15_v2_Party_Invite() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Invite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Party_Invite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Party_Invite::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Party_Invite* _this = reinterpret_cast< CMsgGCCStrike15_v2_Party_Invite* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Party_Invite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Party_Invite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Party_Invite& CMsgGCCStrike15_v2_Party_Invite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Party_Invite_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Party_Invite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Invite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobbyid_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(lobbyid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_Invite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobbyid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lobbyid(&has_bits);
          lobbyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Party_Invite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Invite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 lobbyid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lobbyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Invite)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Invite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 lobbyid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobbyid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Invite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Party_Invite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Invite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Party_Invite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Party_Invite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Party_Invite)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Invite::MergeFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Invite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobbyid_ = from.lobbyid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Party_Invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Invite::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Invite::InternalSwap(CMsgGCCStrike15_v2_Party_Invite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, lobbyid_)
      + sizeof(CMsgGCCStrike15_v2_Party_Invite::lobbyid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_Invite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtcoplay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}
CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(online_));
}

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::~CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* _this = reinterpret_cast< CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&online_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtcoplay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rtcoplay(&has_bits);
          rtcoplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 rtcoplay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtcoplay(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  return target;
}

size_t CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 rtcoplay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtcoplay());
    }

    // optional bool online = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rtcoplay_ = from.rtcoplay_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, online_)
      + sizeof(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::online_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_Account_RequestCoPlays::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_Account_RequestCoPlays::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Account_RequestCoPlays>()._has_bits_);
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}
CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_cstrike15_5fgcmessages_2eproto.base);
  servertime_ = 0u;
}

CMsgGCCStrike15_v2_Account_RequestCoPlays::~CMsgGCCStrike15_v2_Account_RequestCoPlays() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_Account_RequestCoPlays* _this = reinterpret_cast< CMsgGCCStrike15_v2_Account_RequestCoPlays* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_Account_RequestCoPlays::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_Account_RequestCoPlays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_Account_RequestCoPlays& CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_Account_RequestCoPlays_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_Account_RequestCoPlays::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  servertime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Account_RequestCoPlays::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 servertime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_servertime(&has_bits);
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_Account_RequestCoPlays::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 servertime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  return target;
}

size_t CMsgGCCStrike15_v2_Account_RequestCoPlays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 servertime = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_servertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Account_RequestCoPlays* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_Account_RequestCoPlays>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_Account_RequestCoPlays)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_Account_RequestCoPlays)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_has_servertime()) {
    _internal_set_servertime(from._internal_servertime());
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientToGCRequestTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientToGCRequestTicket>()._has_bits_);
  static void set_has_authorized_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_authorized_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameserver_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameserver_sdr_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}
CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameserver_sdr_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gameserver_sdr_routing()) {
    gameserver_sdr_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gameserver_sdr_routing(),
      GetArena());
  }
  ::memcpy(&authorized_steam_id_, &from.authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&authorized_public_ip_) -
    reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(authorized_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket_cstrike15_5fgcmessages_2eproto.base);
  gameserver_sdr_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authorized_public_ip_) -
      reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(authorized_public_ip_));
}

CMsgGCCStrike15_v2_ClientToGCRequestTicket::~CMsgGCCStrike15_v2_ClientToGCRequestTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameserver_sdr_routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientToGCRequestTicket* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientToGCRequestTicket* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientToGCRequestTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientToGCRequestTicket& CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientToGCRequestTicket_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientToGCRequestTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gameserver_sdr_routing_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authorized_public_ip_) -
        reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(authorized_public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientToGCRequestTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 authorized_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_authorized_steam_id(&has_bits);
          authorized_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 authorized_public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_authorized_public_ip(&has_bits);
          authorized_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gameserver_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gameserver_steam_id(&has_bits);
          gameserver_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string gameserver_sdr_routing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gameserver_sdr_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_sdr_routing");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientToGCRequestTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 authorized_steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_gameserver_steam_id(), target);
  }

  // optional string gameserver_sdr_routing = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameserver_sdr_routing().data(), static_cast<int>(this->_internal_gameserver_sdr_routing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_sdr_routing");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gameserver_sdr_routing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCRequestTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string gameserver_sdr_routing = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameserver_sdr_routing());
    }

    // optional fixed64 authorized_steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 authorized_public_ip = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCRequestTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientToGCRequestTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameserver_sdr_routing(from._internal_gameserver_sdr_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      authorized_steam_id_ = from.authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameserver_steam_id_ = from.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      authorized_public_ip_ = from.authorized_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameserver_sdr_routing_.Swap(&other->gameserver_sdr_routing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_public_ip_)
      + sizeof(CMsgGCCStrike15_v2_ClientToGCRequestTicket::authorized_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_steam_id_)>(
          reinterpret_cast<char*>(&authorized_steam_id_),
          reinterpret_cast<char*>(&other->authorized_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientToGCRequestTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCToClientSteamDatagramTicket::InitAsDefaultInstance() {
}
class CMsgGCToClientSteamDatagramTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientSteamDatagramTicket>()._has_bits_);
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientSteamDatagramTicket)
}
CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_ticket()) {
    serialized_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_ticket(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientSteamDatagramTicket)
}

void CMsgGCToClientSteamDatagramTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCToClientSteamDatagramTicket_cstrike15_5fgcmessages_2eproto.base);
  serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToClientSteamDatagramTicket::~CMsgGCToClientSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientSteamDatagramTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientSteamDatagramTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientSteamDatagramTicket::ArenaDtor(void* object) {
  CMsgGCToClientSteamDatagramTicket* _this = reinterpret_cast< CMsgGCToClientSteamDatagramTicket* >(object);
  (void)_this;
}
void CMsgGCToClientSteamDatagramTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientSteamDatagramTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientSteamDatagramTicket& CMsgGCToClientSteamDatagramTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCToClientSteamDatagramTicket_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientSteamDatagramTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_ticket_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientSteamDatagramTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientSteamDatagramTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientSteamDatagramTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_serialized_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientSteamDatagramTicket)
  return target;
}

size_t CMsgGCToClientSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientSteamDatagramTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes serialized_ticket = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientSteamDatagramTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientSteamDatagramTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientSteamDatagramTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serialized_ticket()) {
    _internal_set_serialized_ticket(from._internal_serialized_ticket());
  }
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgGCToClientSteamDatagramTicket::InternalSwap(CMsgGCToClientSteamDatagramTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_ticket_.Swap(&other->serialized_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientSteamDatagramTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestOffers::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientRequestOffers::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestOffers)
}
CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers(const CMsgGCCStrike15_v2_ClientRequestOffers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestOffers)
}

void CMsgGCCStrike15_v2_ClientRequestOffers::SharedCtor() {
}

CMsgGCCStrike15_v2_ClientRequestOffers::~CMsgGCCStrike15_v2_ClientRequestOffers() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestOffers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientRequestOffers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientRequestOffers::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientRequestOffers* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientRequestOffers* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientRequestOffers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientRequestOffers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientRequestOffers& CMsgGCCStrike15_v2_ClientRequestOffers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientRequestOffers_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestOffers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestOffers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientRequestOffers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestOffers)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestOffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestOffers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestOffers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientRequestOffers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestOffers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestOffers)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestOffers::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestOffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCCStrike15_v2_ClientRequestOffers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestOffers::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestOffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestOffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestOffers::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestOffers::InternalSwap(CMsgGCCStrike15_v2_ClientRequestOffers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestOffers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientRequestSouvenir::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientRequestSouvenir::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestSouvenir>()._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_ClientRequestSouvenir::CMsgGCCStrike15_v2_ClientRequestSouvenir(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestSouvenir)
}
CMsgGCCStrike15_v2_ClientRequestSouvenir::CMsgGCCStrike15_v2_ClientRequestSouvenir(const CMsgGCCStrike15_v2_ClientRequestSouvenir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(eventid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestSouvenir)
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::SharedCtor() {
  ::memset(&itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventid_) -
      reinterpret_cast<char*>(&itemid_)) + sizeof(eventid_));
}

CMsgGCCStrike15_v2_ClientRequestSouvenir::~CMsgGCCStrike15_v2_ClientRequestSouvenir() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientRequestSouvenir* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientRequestSouvenir* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientRequestSouvenir::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientRequestSouvenir::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientRequestSouvenir& CMsgGCCStrike15_v2_ClientRequestSouvenir::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientRequestSouvenir_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientRequestSouvenir::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eventid_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(eventid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestSouvenir::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eventid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientRequestSouvenir::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemid(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_matchid(), target);
  }

  // optional int32 eventid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eventid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestSouvenir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 itemid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional int32 eventid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eventid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestSouvenir* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientRequestSouvenir>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientRequestSouvenir)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientRequestSouvenir)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestSouvenir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestSouvenir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestSouvenir::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::InternalSwap(CMsgGCCStrike15_v2_ClientRequestSouvenir* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestSouvenir, eventid_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestSouvenir::eventid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestSouvenir, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestSouvenir::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientAccountBalance::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientAccountBalance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientAccountBalance>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientAccountBalance)
}
CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance(const CMsgGCCStrike15_v2_ClientAccountBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientAccountBalance)
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientAccountBalance_cstrike15_5fgcmessages_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCCStrike15_v2_ClientAccountBalance::~CMsgGCCStrike15_v2_ClientAccountBalance() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientAccountBalance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientAccountBalance::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientAccountBalance* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientAccountBalance* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientAccountBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientAccountBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientAccountBalance& CMsgGCCStrike15_v2_ClientAccountBalance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientAccountBalance_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientAccountBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientAccountBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientAccountBalance.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientAccountBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientAccountBalance.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientAccountBalance)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientAccountBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint64 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientAccountBalance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientAccountBalance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientAccountBalance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientAccountBalance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientAccountBalance)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientAccountBalance::MergeFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientAccountBalance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAccountBalance::CopyFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAccountBalance::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientAccountBalance::InternalSwap(CMsgGCCStrike15_v2_ClientAccountBalance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientAccountBalance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientPartyJoinRelay::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPartyJoinRelay>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobbyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientPartyJoinRelay::CMsgGCCStrike15_v2_ClientPartyJoinRelay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
}
CMsgGCCStrike15_v2_ClientPartyJoinRelay::CMsgGCCStrike15_v2_ClientPartyJoinRelay(const CMsgGCCStrike15_v2_ClientPartyJoinRelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobbyid_, &from.lobbyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&lobbyid_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::SharedCtor() {
  ::memset(&lobbyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&lobbyid_)) + sizeof(accountid_));
}

CMsgGCCStrike15_v2_ClientPartyJoinRelay::~CMsgGCCStrike15_v2_ClientPartyJoinRelay() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPartyJoinRelay* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPartyJoinRelay* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPartyJoinRelay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPartyJoinRelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPartyJoinRelay& CMsgGCCStrike15_v2_ClientPartyJoinRelay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPartyJoinRelay_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPartyJoinRelay::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lobbyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&lobbyid_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPartyJoinRelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobbyid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lobbyid(&has_bits);
          lobbyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPartyJoinRelay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 lobbyid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobbyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPartyJoinRelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 lobbyid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobbyid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPartyJoinRelay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPartyJoinRelay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::MergeFrom(const CMsgGCCStrike15_v2_ClientPartyJoinRelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lobbyid_ = from.lobbyid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::CopyFrom(const CMsgGCCStrike15_v2_ClientPartyJoinRelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPartyJoinRelay::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::InternalSwap(CMsgGCCStrike15_v2_ClientPartyJoinRelay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyJoinRelay, accountid_)
      + sizeof(CMsgGCCStrike15_v2_ClientPartyJoinRelay::accountid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyJoinRelay, lobbyid_)>(
          reinterpret_cast<char*>(&lobbyid_),
          reinterpret_cast<char*>(&other->lobbyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPartyJoinRelay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPartyWarning_Entry>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_warntype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CMsgGCCStrike15_v2_ClientPartyWarning_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
}
CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CMsgGCCStrike15_v2_ClientPartyWarning_Entry(const CMsgGCCStrike15_v2_ClientPartyWarning_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&warntype_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(warntype_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warntype_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(warntype_));
}

CMsgGCCStrike15_v2_ClientPartyWarning_Entry::~CMsgGCCStrike15_v2_ClientPartyWarning_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPartyWarning_Entry* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPartyWarning_Entry* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPartyWarning_Entry& CMsgGCCStrike15_v2_ClientPartyWarning_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&warntype_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(warntype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 warntype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_warntype(&has_bits);
          warntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 warntype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warntype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPartyWarning_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 warntype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_warntype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPartyWarning_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPartyWarning_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::MergeFrom(const CMsgGCCStrike15_v2_ClientPartyWarning_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      warntype_ = from.warntype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CopyFrom(const CMsgGCCStrike15_v2_ClientPartyWarning_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPartyWarning_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::InternalSwap(CMsgGCCStrike15_v2_ClientPartyWarning_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyWarning_Entry, warntype_)
      + sizeof(CMsgGCCStrike15_v2_ClientPartyWarning_Entry::warntype_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyWarning_Entry, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPartyWarning_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPartyWarning::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientPartyWarning::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientPartyWarning::CMsgGCCStrike15_v2_ClientPartyWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPartyWarning)
}
CMsgGCCStrike15_v2_ClientPartyWarning::CMsgGCCStrike15_v2_ClientPartyWarning(const CMsgGCCStrike15_v2_ClientPartyWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPartyWarning)
}

void CMsgGCCStrike15_v2_ClientPartyWarning::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_cstrike15_5fgcmessages_2eproto.base);
}

CMsgGCCStrike15_v2_ClientPartyWarning::~CMsgGCCStrike15_v2_ClientPartyWarning() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPartyWarning)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPartyWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPartyWarning::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPartyWarning* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPartyWarning* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPartyWarning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPartyWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPartyWarning& CMsgGCCStrike15_v2_ClientPartyWarning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPartyWarning_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPartyWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPartyWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPartyWarning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPartyWarning)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPartyWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPartyWarning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPartyWarning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPartyWarning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPartyWarning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPartyWarning)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPartyWarning::MergeFrom(const CMsgGCCStrike15_v2_ClientPartyWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCCStrike15_v2_ClientPartyWarning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPartyWarning::CopyFrom(const CMsgGCCStrike15_v2_ClientPartyWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPartyWarning::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPartyWarning::InternalSwap(CMsgGCCStrike15_v2_ClientPartyWarning* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPartyWarning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_SetEventFavorite::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_SetEventFavorite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_SetEventFavorite>()._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_favorite(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_SetEventFavorite::CMsgGCCStrike15_v2_SetEventFavorite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_SetEventFavorite)
}
CMsgGCCStrike15_v2_SetEventFavorite::CMsgGCCStrike15_v2_SetEventFavorite(const CMsgGCCStrike15_v2_SetEventFavorite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eventid_, &from.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_favorite_) -
    reinterpret_cast<char*>(&eventid_)) + sizeof(is_favorite_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_SetEventFavorite)
}

void CMsgGCCStrike15_v2_SetEventFavorite::SharedCtor() {
  ::memset(&eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_favorite_) -
      reinterpret_cast<char*>(&eventid_)) + sizeof(is_favorite_));
}

CMsgGCCStrike15_v2_SetEventFavorite::~CMsgGCCStrike15_v2_SetEventFavorite() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_SetEventFavorite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_SetEventFavorite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_SetEventFavorite::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_SetEventFavorite* _this = reinterpret_cast< CMsgGCCStrike15_v2_SetEventFavorite* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_SetEventFavorite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_SetEventFavorite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_SetEventFavorite& CMsgGCCStrike15_v2_SetEventFavorite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_SetEventFavorite_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_SetEventFavorite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_SetEventFavorite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_favorite_) -
        reinterpret_cast<char*>(&eventid_)) + sizeof(is_favorite_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_SetEventFavorite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_favorite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_favorite(&has_bits);
          is_favorite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_SetEventFavorite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_SetEventFavorite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_eventid(), target);
  }

  // optional bool is_favorite = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_favorite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_SetEventFavorite)
  return target;
}

size_t CMsgGCCStrike15_v2_SetEventFavorite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_SetEventFavorite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 eventid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_eventid());
    }

    // optional bool is_favorite = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_SetEventFavorite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_SetEventFavorite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_SetEventFavorite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_SetEventFavorite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_SetEventFavorite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_SetEventFavorite)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_SetEventFavorite::MergeFrom(const CMsgGCCStrike15_v2_SetEventFavorite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_SetEventFavorite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eventid_ = from.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_favorite_ = from.is_favorite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_SetEventFavorite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_SetEventFavorite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_SetEventFavorite::CopyFrom(const CMsgGCCStrike15_v2_SetEventFavorite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_SetEventFavorite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_SetEventFavorite::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_SetEventFavorite::InternalSwap(CMsgGCCStrike15_v2_SetEventFavorite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_SetEventFavorite, is_favorite_)
      + sizeof(CMsgGCCStrike15_v2_SetEventFavorite::is_favorite_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_SetEventFavorite, eventid_)>(
          reinterpret_cast<char*>(&eventid_),
          reinterpret_cast<char*>(&other->eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_SetEventFavorite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GetEventFavorites_Request::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GetEventFavorites_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GetEventFavorites_Request>()._has_bits_);
  static void set_has_all_events(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GetEventFavorites_Request::CMsgGCCStrike15_v2_GetEventFavorites_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Request)
}
CMsgGCCStrike15_v2_GetEventFavorites_Request::CMsgGCCStrike15_v2_GetEventFavorites_Request(const CMsgGCCStrike15_v2_GetEventFavorites_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_events_ = from.all_events_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Request)
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::SharedCtor() {
  all_events_ = false;
}

CMsgGCCStrike15_v2_GetEventFavorites_Request::~CMsgGCCStrike15_v2_GetEventFavorites_Request() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GetEventFavorites_Request* _this = reinterpret_cast< CMsgGCCStrike15_v2_GetEventFavorites_Request* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GetEventFavorites_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GetEventFavorites_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GetEventFavorites_Request& CMsgGCCStrike15_v2_GetEventFavorites_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Request_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GetEventFavorites_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_events_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GetEventFavorites_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_events(&has_bits);
          all_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GetEventFavorites_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_events = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  return target;
}

size_t CMsgGCCStrike15_v2_GetEventFavorites_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool all_events = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GetEventFavorites_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GetEventFavorites_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GetEventFavorites_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GetEventFavorites_Request)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::MergeFrom(const CMsgGCCStrike15_v2_GetEventFavorites_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_all_events()) {
    _internal_set_all_events(from._internal_all_events());
  }
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::CopyFrom(const CMsgGCCStrike15_v2_GetEventFavorites_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GetEventFavorites_Request::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::InternalSwap(CMsgGCCStrike15_v2_GetEventFavorites_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(all_events_, other->all_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GetEventFavorites_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GetEventFavorites_Response::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GetEventFavorites_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GetEventFavorites_Response>()._has_bits_);
  static void set_has_all_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_json_favorites(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_featured(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GetEventFavorites_Response::CMsgGCCStrike15_v2_GetEventFavorites_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Response)
}
CMsgGCCStrike15_v2_GetEventFavorites_Response::CMsgGCCStrike15_v2_GetEventFavorites_Response(const CMsgGCCStrike15_v2_GetEventFavorites_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_favorites_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_json_favorites()) {
    json_favorites_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json_favorites(),
      GetArena());
  }
  json_featured_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_json_featured()) {
    json_featured_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json_featured(),
      GetArena());
  }
  all_events_ = from.all_events_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Response)
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Response_cstrike15_5fgcmessages_2eproto.base);
  json_favorites_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_featured_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  all_events_ = false;
}

CMsgGCCStrike15_v2_GetEventFavorites_Response::~CMsgGCCStrike15_v2_GetEventFavorites_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  json_favorites_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_featured_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GetEventFavorites_Response* _this = reinterpret_cast< CMsgGCCStrike15_v2_GetEventFavorites_Response* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GetEventFavorites_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GetEventFavorites_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GetEventFavorites_Response& CMsgGCCStrike15_v2_GetEventFavorites_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GetEventFavorites_Response_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GetEventFavorites_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      json_favorites_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_featured_.ClearNonDefaultToEmpty();
    }
  }
  all_events_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GetEventFavorites_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_events(&has_bits);
          all_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string json_favorites = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_json_favorites();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_favorites");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string json_featured = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_json_featured();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_featured");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GetEventFavorites_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_events = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_events(), target);
  }

  // optional string json_favorites = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_favorites().data(), static_cast<int>(this->_internal_json_favorites().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_favorites");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_favorites(), target);
  }

  // optional string json_featured = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_featured().data(), static_cast<int>(this->_internal_json_featured().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_featured");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_json_featured(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  return target;
}

size_t CMsgGCCStrike15_v2_GetEventFavorites_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string json_favorites = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_favorites());
    }

    // optional string json_featured = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_featured());
    }

    // optional bool all_events = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GetEventFavorites_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GetEventFavorites_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GetEventFavorites_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GetEventFavorites_Response)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::MergeFrom(const CMsgGCCStrike15_v2_GetEventFavorites_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_json_favorites(from._internal_json_favorites());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_featured(from._internal_json_featured());
    }
    if (cached_has_bits & 0x00000004u) {
      all_events_ = from.all_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::CopyFrom(const CMsgGCCStrike15_v2_GetEventFavorites_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GetEventFavorites_Response::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::InternalSwap(CMsgGCCStrike15_v2_GetEventFavorites_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  json_favorites_.Swap(&other->json_favorites_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_featured_.Swap(&other->json_featured_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(all_events_, other->all_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GetEventFavorites_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientPerfReport_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPerfReport_Entry>()._has_bits_);
  static void set_has_perfcounter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCCStrike15_v2_ClientPerfReport_Entry::CMsgGCCStrike15_v2_ClientPerfReport_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
}
CMsgGCCStrike15_v2_ClientPerfReport_Entry::CMsgGCCStrike15_v2_ClientPerfReport_Entry(const CMsgGCCStrike15_v2_ClientPerfReport_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reference()) {
    reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reference(),
      GetArena());
  }
  actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_actual()) {
    actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actual(),
      GetArena());
  }
  ::memcpy(&perfcounter_, &from.perfcounter_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&perfcounter_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&perfcounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&perfcounter_)) + sizeof(status_));
}

CMsgGCCStrike15_v2_ClientPerfReport_Entry::~CMsgGCCStrike15_v2_ClientPerfReport_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPerfReport_Entry* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPerfReport_Entry* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPerfReport_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPerfReport_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPerfReport_Entry& CMsgGCCStrike15_v2_ClientPerfReport_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPerfReport_Entry_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPerfReport_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      actual_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&perfcounter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&perfcounter_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPerfReport_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 perfcounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_perfcounter(&has_bits);
          perfcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes actual = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sourceid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sourceid(&has_bits);
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPerfReport_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 perfcounter = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_perfcounter(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // optional bytes reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reference(), target);
  }

  // optional bytes actual = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_actual(), target);
  }

  // optional uint32 sourceid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sourceid(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPerfReport_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reference());
    }

    // optional bytes actual = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_actual());
    }

    // optional uint32 perfcounter = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_perfcounter());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_length());
    }

    // optional uint32 sourceid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sourceid());
    }

    // optional uint32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPerfReport_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPerfReport_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::MergeFrom(const CMsgGCCStrike15_v2_ClientPerfReport_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reference(from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_actual(from._internal_actual());
    }
    if (cached_has_bits & 0x00000004u) {
      perfcounter_ = from.perfcounter_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      sourceid_ = from.sourceid_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::CopyFrom(const CMsgGCCStrike15_v2_ClientPerfReport_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPerfReport_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::InternalSwap(CMsgGCCStrike15_v2_ClientPerfReport_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actual_.Swap(&other->actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPerfReport_Entry, status_)
      + sizeof(CMsgGCCStrike15_v2_ClientPerfReport_Entry::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPerfReport_Entry, perfcounter_)>(
          reinterpret_cast<char*>(&perfcounter_),
          reinterpret_cast<char*>(&other->perfcounter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPerfReport_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientPerfReport::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientPerfReport::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientPerfReport::CMsgGCCStrike15_v2_ClientPerfReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPerfReport)
}
CMsgGCCStrike15_v2_ClientPerfReport::CMsgGCCStrike15_v2_ClientPerfReport(const CMsgGCCStrike15_v2_ClientPerfReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPerfReport)
}

void CMsgGCCStrike15_v2_ClientPerfReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientPerfReport_cstrike15_5fgcmessages_2eproto.base);
}

CMsgGCCStrike15_v2_ClientPerfReport::~CMsgGCCStrike15_v2_ClientPerfReport() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPerfReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientPerfReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPerfReport::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientPerfReport* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientPerfReport* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientPerfReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientPerfReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientPerfReport& CMsgGCCStrike15_v2_ClientPerfReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientPerfReport_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientPerfReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPerfReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPerfReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientPerfReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPerfReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPerfReport)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPerfReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPerfReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPerfReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientPerfReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPerfReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientPerfReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientPerfReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientPerfReport)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPerfReport::MergeFrom(const CMsgGCCStrike15_v2_ClientPerfReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPerfReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCCStrike15_v2_ClientPerfReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientPerfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPerfReport::CopyFrom(const CMsgGCCStrike15_v2_ClientPerfReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPerfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPerfReport::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPerfReport::InternalSwap(CMsgGCCStrike15_v2_ClientPerfReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPerfReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CVDiagnostic::InitAsDefaultInstance() {
}
class CVDiagnostic::_Internal {
 public:
  using HasBits = decltype(std::declval<CVDiagnostic>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extended(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVDiagnostic::CVDiagnostic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVDiagnostic)
}
CVDiagnostic::CVDiagnostic(const CVDiagnostic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string_value(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CVDiagnostic)
}

void CVDiagnostic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto.base);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

CVDiagnostic::~CVDiagnostic() {
  // @@protoc_insertion_point(destructor:CVDiagnostic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVDiagnostic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVDiagnostic::ArenaDtor(void* object) {
  CVDiagnostic* _this = reinterpret_cast< CVDiagnostic* >(object);
  (void)_this;
}
void CVDiagnostic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVDiagnostic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CVDiagnostic& CVDiagnostic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CVDiagnostic_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CVDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:CVDiagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVDiagnostic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extended = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_extended(&has_bits);
          extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVDiagnostic.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVDiagnostic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVDiagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 extended = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extended(), target);
  }

  // optional uint64 value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVDiagnostic.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVDiagnostic)
  return target;
}

size_t CVDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVDiagnostic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 extended = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extended());
    }

    // optional uint64 value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVDiagnostic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  const CVDiagnostic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVDiagnostic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVDiagnostic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVDiagnostic)
    MergeFrom(*source);
  }
}

void CVDiagnostic::MergeFrom(const CVDiagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      extended_ = from.extended_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVDiagnostic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVDiagnostic::CopyFrom(const CVDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVDiagnostic::IsInitialized() const {
  return true;
}

void CVDiagnostic::InternalSwap(CVDiagnostic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVDiagnostic, value_)
      + sizeof(CVDiagnostic::value_)
      - PROTOBUF_FIELD_OFFSET(CVDiagnostic, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVDiagnostic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_ClientReportValidation::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_ClientReportValidation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportValidation>()._has_bits_);
  static void set_has_file_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_files(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_internal_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trust_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_count_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_osversion(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clientreportversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_status_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_diagnostic1(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_diagnostic2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_diagnostic3(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_last_launch_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_count(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_client_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_diagnostic4(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_diagnostic5(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgGCCStrike15_v2_ClientReportValidation::CMsgGCCStrike15_v2_ClientReportValidation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diagnostics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportValidation)
}
CMsgGCCStrike15_v2_ClientReportValidation::CMsgGCCStrike15_v2_ClientReportValidation(const CMsgGCCStrike15_v2_ClientReportValidation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      diagnostics_(from.diagnostics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_report()) {
    file_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_report(),
      GetArena());
  }
  command_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command_line()) {
    command_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command_line(),
      GetArena());
  }
  last_launch_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_launch_data()) {
    last_launch_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_launch_data(),
      GetArena());
  }
  ::memcpy(&total_files_, &from.total_files_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_count_) -
    reinterpret_cast<char*>(&total_files_)) + sizeof(report_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportValidation)
}

void CMsgGCCStrike15_v2_ClientReportValidation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_ClientReportValidation_cstrike15_5fgcmessages_2eproto.base);
  file_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_launch_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_files_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_count_) -
      reinterpret_cast<char*>(&total_files_)) + sizeof(report_count_));
}

CMsgGCCStrike15_v2_ClientReportValidation::~CMsgGCCStrike15_v2_ClientReportValidation() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportValidation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_ClientReportValidation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_launch_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_ClientReportValidation::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_ClientReportValidation* _this = reinterpret_cast< CMsgGCCStrike15_v2_ClientReportValidation* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_ClientReportValidation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_ClientReportValidation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_ClientReportValidation& CMsgGCCStrike15_v2_ClientReportValidation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_ClientReportValidation_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_ClientReportValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportValidation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnostics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      command_line_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      last_launch_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&total_files_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_completed_) -
        reinterpret_cast<char*>(&total_files_)) + sizeof(count_completed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_time_) -
        reinterpret_cast<char*>(&process_id_)) + sizeof(client_time_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&diagnostic4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_count_) -
        reinterpret_cast<char*>(&diagnostic4_)) + sizeof(report_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportValidation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientReportValidation.file_report");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string command_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientReportValidation.command_line");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_files(&has_bits);
          total_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 internal_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_internal_error(&has_bits);
          internal_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trust_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_trust_time(&has_bits);
          trust_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count_pending = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_count_pending(&has_bits);
          count_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_count_completed(&has_bits);
          count_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 process_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 osversion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_osversion(&has_bits);
          osversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 clientreportversion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_clientreportversion(&has_bits);
          clientreportversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_status_id(&has_bits);
          status_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 diagnostic1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_diagnostic1(&has_bits);
          diagnostic1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 diagnostic2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_diagnostic2(&has_bits);
          diagnostic2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 diagnostic3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_diagnostic3(&has_bits);
          diagnostic3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_launch_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_last_launch_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientReportValidation.last_launch_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 report_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_report_count(&has_bits);
          report_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 client_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_client_time(&has_bits);
          client_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 diagnostic4 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_diagnostic4(&has_bits);
          diagnostic4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 diagnostic5 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_diagnostic5(&has_bits);
          diagnostic5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CVDiagnostic diagnostics = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_ClientReportValidation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportValidation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_report().data(), static_cast<int>(this->_internal_file_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientReportValidation.file_report");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_report(), target);
  }

  // optional string command_line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_line().data(), static_cast<int>(this->_internal_command_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientReportValidation.command_line");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command_line(), target);
  }

  // optional uint32 total_files = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_files(), target);
  }

  // optional uint32 internal_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_internal_error(), target);
  }

  // optional uint32 trust_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trust_time(), target);
  }

  // optional uint32 count_pending = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count_pending(), target);
  }

  // optional uint32 count_completed = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_count_completed(), target);
  }

  // optional uint32 process_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_process_id(), target);
  }

  // optional int32 osversion = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_osversion(), target);
  }

  // optional uint32 clientreportversion = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_clientreportversion(), target);
  }

  // optional uint32 status_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_status_id(), target);
  }

  // optional uint32 diagnostic1 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_diagnostic1(), target);
  }

  // optional uint64 diagnostic2 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_diagnostic2(), target);
  }

  // optional uint64 diagnostic3 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_diagnostic3(), target);
  }

  // optional string last_launch_data = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_launch_data().data(), static_cast<int>(this->_internal_last_launch_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientReportValidation.last_launch_data");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_last_launch_data(), target);
  }

  // optional uint32 report_count = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_report_count(), target);
  }

  // optional uint64 client_time = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_client_time(), target);
  }

  // optional uint64 diagnostic4 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_diagnostic4(), target);
  }

  // optional uint64 diagnostic5 = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_diagnostic5(), target);
  }

  // repeated .CVDiagnostic diagnostics = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnostics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_diagnostics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportValidation)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportValidation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVDiagnostic diagnostics = 20;
  total_size += 2UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_report());
    }

    // optional string command_line = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_line());
    }

    // optional string last_launch_data = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_launch_data());
    }

    // optional uint32 total_files = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_files());
    }

    // optional uint32 internal_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_internal_error());
    }

    // optional uint32 trust_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trust_time());
    }

    // optional uint32 count_pending = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count_pending());
    }

    // optional uint32 count_completed = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count_completed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 process_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_process_id());
    }

    // optional int32 osversion = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_osversion());
    }

    // optional uint32 clientreportversion = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clientreportversion());
    }

    // optional uint32 status_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status_id());
    }

    // optional uint32 diagnostic1 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_diagnostic1());
    }

    // optional uint64 diagnostic2 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_diagnostic2());
    }

    // optional uint64 diagnostic3 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_diagnostic3());
    }

    // optional uint64 client_time = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_time());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint64 diagnostic4 = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_diagnostic4());
    }

    // optional uint64 diagnostic5 = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_diagnostic5());
    }

    // optional uint32 report_count = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_report_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportValidation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_ClientReportValidation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportValidation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_ClientReportValidation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_ClientReportValidation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_ClientReportValidation)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportValidation::MergeFrom(const CMsgGCCStrike15_v2_ClientReportValidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportValidation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diagnostics_.MergeFrom(from.diagnostics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_report(from._internal_file_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_command_line(from._internal_command_line());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_last_launch_data(from._internal_last_launch_data());
    }
    if (cached_has_bits & 0x00000008u) {
      total_files_ = from.total_files_;
    }
    if (cached_has_bits & 0x00000010u) {
      internal_error_ = from.internal_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      trust_time_ = from.trust_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_pending_ = from.count_pending_;
    }
    if (cached_has_bits & 0x00000080u) {
      count_completed_ = from.count_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      osversion_ = from.osversion_;
    }
    if (cached_has_bits & 0x00000400u) {
      clientreportversion_ = from.clientreportversion_;
    }
    if (cached_has_bits & 0x00000800u) {
      status_id_ = from.status_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      diagnostic1_ = from.diagnostic1_;
    }
    if (cached_has_bits & 0x00002000u) {
      diagnostic2_ = from.diagnostic2_;
    }
    if (cached_has_bits & 0x00004000u) {
      diagnostic3_ = from.diagnostic3_;
    }
    if (cached_has_bits & 0x00008000u) {
      client_time_ = from.client_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      diagnostic4_ = from.diagnostic4_;
    }
    if (cached_has_bits & 0x00020000u) {
      diagnostic5_ = from.diagnostic5_;
    }
    if (cached_has_bits & 0x00040000u) {
      report_count_ = from.report_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_ClientReportValidation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_ClientReportValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportValidation::CopyFrom(const CMsgGCCStrike15_v2_ClientReportValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportValidation::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportValidation::InternalSwap(CMsgGCCStrike15_v2_ClientReportValidation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diagnostics_.InternalSwap(&other->diagnostics_);
  file_report_.Swap(&other->file_report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_line_.Swap(&other->command_line_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_launch_data_.Swap(&other->last_launch_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportValidation, report_count_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportValidation::report_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportValidation, total_files_)>(
          reinterpret_cast<char*>(&total_files_),
          reinterpret_cast<char*>(&other->total_files_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportValidation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode>()._has_bits_);
  static void set_has_file_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offer_insecure_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offer_secure_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_show_unsigned_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kick_user(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_trusted_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_show_warning_not_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
}
CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode(const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_report()) {
    file_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_report(),
      GetArena());
  }
  ::memcpy(&offer_insecure_mode_, &from.offer_insecure_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_warning_not_trusted_) -
    reinterpret_cast<char*>(&offer_insecure_mode_)) + sizeof(show_warning_not_trusted_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_cstrike15_5fgcmessages_2eproto.base);
  file_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offer_insecure_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_warning_not_trusted_) -
      reinterpret_cast<char*>(&offer_insecure_mode_)) + sizeof(show_warning_not_trusted_));
}

CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::~CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* _this = reinterpret_cast< CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode& CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_report_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&offer_insecure_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_warning_not_trusted_) -
        reinterpret_cast<char*>(&offer_insecure_mode_)) + sizeof(show_warning_not_trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode.file_report");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool offer_insecure_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offer_insecure_mode(&has_bits);
          offer_insecure_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool offer_secure_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_offer_secure_mode(&has_bits);
          offer_secure_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_unsigned_ui = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_show_unsigned_ui(&has_bits);
          show_unsigned_ui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kick_user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_kick_user(&has_bits);
          kick_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_trusted_ui = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_show_trusted_ui(&has_bits);
          show_trusted_ui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_warning_not_trusted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_show_warning_not_trusted(&has_bits);
          show_warning_not_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_report().data(), static_cast<int>(this->_internal_file_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode.file_report");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_report(), target);
  }

  // optional bool offer_insecure_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_offer_insecure_mode(), target);
  }

  // optional bool offer_secure_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_offer_secure_mode(), target);
  }

  // optional bool show_unsigned_ui = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_show_unsigned_ui(), target);
  }

  // optional bool kick_user = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_kick_user(), target);
  }

  // optional bool show_trusted_ui = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_show_trusted_ui(), target);
  }

  // optional bool show_warning_not_trusted = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_show_warning_not_trusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string file_report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_report());
    }

    // optional bool offer_insecure_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool offer_secure_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool show_unsigned_ui = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool kick_user = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool show_trusted_ui = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool show_warning_not_trusted = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_report(from._internal_file_report());
    }
    if (cached_has_bits & 0x00000002u) {
      offer_insecure_mode_ = from.offer_insecure_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      offer_secure_mode_ = from.offer_secure_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_unsigned_ui_ = from.show_unsigned_ui_;
    }
    if (cached_has_bits & 0x00000010u) {
      kick_user_ = from.kick_user_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_trusted_ui_ = from.show_trusted_ui_;
    }
    if (cached_has_bits & 0x00000040u) {
      show_warning_not_trusted_ = from.show_warning_not_trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::InternalSwap(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_report_.Swap(&other->file_report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, show_warning_not_trusted_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::show_warning_not_trusted_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, offer_insecure_mode_)>(
          reinterpret_cast<char*>(&offer_insecure_mode_),
          reinterpret_cast<char*>(&other->offer_insecure_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::InitAsDefaultInstance() {
}
class CMsgGCCStrike15_v2_GC2ClientRequestValidation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientRequestValidation>()._has_bits_);
  static void set_has_full_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GC2ClientRequestValidation::CMsgGCCStrike15_v2_GC2ClientRequestValidation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
}
CMsgGCCStrike15_v2_GC2ClientRequestValidation::CMsgGCCStrike15_v2_GC2ClientRequestValidation(const CMsgGCCStrike15_v2_GC2ClientRequestValidation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_module()) {
    module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_module(),
      GetArena());
  }
  full_report_ = from.full_report_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgGCCStrike15_v2_GC2ClientRequestValidation_cstrike15_5fgcmessages_2eproto.base);
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_report_ = false;
}

CMsgGCCStrike15_v2_GC2ClientRequestValidation::~CMsgGCCStrike15_v2_GC2ClientRequestValidation() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::ArenaDtor(void* object) {
  CMsgGCCStrike15_v2_GC2ClientRequestValidation* _this = reinterpret_cast< CMsgGCCStrike15_v2_GC2ClientRequestValidation* >(object);
  (void)_this;
}
void CMsgGCCStrike15_v2_GC2ClientRequestValidation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCStrike15_v2_GC2ClientRequestValidation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCStrike15_v2_GC2ClientRequestValidation& CMsgGCCStrike15_v2_GC2ClientRequestValidation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgGCCStrike15_v2_GC2ClientRequestValidation_cstrike15_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCStrike15_v2_GC2ClientRequestValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    module_.ClearNonDefaultToEmpty();
  }
  full_report_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientRequestValidation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool full_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_full_report(&has_bits);
          full_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientRequestValidation.module");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCStrike15_v2_GC2ClientRequestValidation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool full_report = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_full_report(), target);
  }

  // optional string module = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientRequestValidation.module");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientRequestValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string module = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module());
    }

    // optional bool full_report = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientRequestValidation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCStrike15_v2_GC2ClientRequestValidation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientRequestValidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_module(from._internal_module());
    }
    if (cached_has_bits & 0x00000002u) {
      full_report_ = from.full_report_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientRequestValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientRequestValidation::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::InternalSwap(CMsgGCCStrike15_v2_GC2ClientRequestValidation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  module_.Swap(&other->module_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(full_report_, other->full_report_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientRequestValidation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameServerPing* Arena::CreateMaybeMessage< ::GameServerPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameServerPing >(arena);
}
template<> PROTOBUF_NOINLINE ::DataCenterPing* Arena::CreateMaybeMessage< ::DataCenterPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataCenterPing >(arena);
}
template<> PROTOBUF_NOINLINE ::DetailedSearchStatistic* Arena::CreateMaybeMessage< ::DetailedSearchStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetailedSearchStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentPlayer* Arena::CreateMaybeMessage< ::TournamentPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentTeam* Arena::CreateMaybeMessage< ::TournamentTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentEvent* Arena::CreateMaybeMessage< ::TournamentEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::GlobalStatistics* Arena::CreateMaybeMessage< ::GlobalStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GlobalStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalStatisticDescription* Arena::CreateMaybeMessage< ::OperationalStatisticDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalStatisticDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalStatisticElement* Arena::CreateMaybeMessage< ::OperationalStatisticElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalStatisticElement >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalStatisticsPacket* Arena::CreateMaybeMessage< ::OperationalStatisticsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalStatisticsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerRankingInfo* Arena::CreateMaybeMessage< ::PlayerRankingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerRankingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerCommendationInfo* Arena::CreateMaybeMessage< ::PlayerCommendationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerCommendationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerMedalsInfo* Arena::CreateMaybeMessage< ::PlayerMedalsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerMedalsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountActivity* Arena::CreateMaybeMessage< ::AccountActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentMatchSetup* Arena::CreateMaybeMessage< ::TournamentMatchSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentMatchSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerHltvInfo* Arena::CreateMaybeMessage< ::ServerHltvInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerHltvInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IpAddressMask* Arena::CreateMaybeMessage< ::IpAddressMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IpAddressMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCsgoSteamUserStatChange* Arena::CreateMaybeMessage< ::CMsgCsgoSteamUserStatChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCsgoSteamUserStatChange >(arena);
}
template<> PROTOBUF_NOINLINE ::XpProgressData* Arena::CreateMaybeMessage< ::XpProgressData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XpProgressData >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchEndItemUpdates* Arena::CreateMaybeMessage< ::MatchEndItemUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MatchEndItemUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreLeaderboardData_Entry* Arena::CreateMaybeMessage< ::ScoreLeaderboardData_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreLeaderboardData_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreLeaderboardData_AccountEntries* Arena::CreateMaybeMessage< ::ScoreLeaderboardData_AccountEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreLeaderboardData_AccountEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreLeaderboardData* Arena::CreateMaybeMessage< ::ScoreLeaderboardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreLeaderboardData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerQuestData_QuestItemData* Arena::CreateMaybeMessage< ::PlayerQuestData_QuestItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerQuestData_QuestItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerQuestData* Arena::CreateMaybeMessage< ::PlayerQuestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerQuestData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_ServerQuestUpdateData* Arena::CreateMaybeMessage< ::CMsgGC_ServerQuestUpdateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_ServerQuestUpdateData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingStart* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingStart >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingStop* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingStop >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentMatchDraft* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentMatchDraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentMatchDraft >(arena);
}
template<> PROTOBUF_NOINLINE ::CPreMatchInfoData_TeamStats* Arena::CreateMaybeMessage< ::CPreMatchInfoData_TeamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPreMatchInfoData_TeamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CPreMatchInfoData* Arena::CreateMaybeMessage< ::CPreMatchInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPreMatchInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_AccountPrivacySettings* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AccountPrivacySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_AccountPrivacySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientGCRankUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientGCRankUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientGCRankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportPlayer* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientCommendPlayer* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientCommendPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientCommendPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportServer* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends >(arena);
}
template<> PROTOBUF_NOINLINE ::WatchableMatchInfo* Arena::CreateMaybeMessage< ::WatchableMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchableMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestJoinServerData* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestJoinServerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestJoinServerData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCstrike15_v2_ClientRequestNewMission* Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_ClientRequestNewMission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCstrike15_v2_ClientRequestNewMission >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_WatchInfoUsers* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_WatchInfoUsers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_WatchInfoUsers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayersProfile* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayersProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayersProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientHeaderOverwatchEvidence* Arena::CreateMaybeMessage< ::CClientHeaderOverwatchEvidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientHeaderOverwatchEvidence >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientTextMsg* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientTextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientTextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCTextMsg* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCTextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCTextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItemPreviewDataBlock_Sticker* Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock_Sticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItemPreviewDataBlock_Sticker >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItemPreviewDataBlock* Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItemPreviewDataBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAcknowledged* Arena::CreateMaybeMessage< ::CMsgItemAcknowledged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAcknowledged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_MatchInfo* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_MatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_MatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentGroupTeam* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroupTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentGroupTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentGroup_Picks* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroup_Picks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentGroup_Picks >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentGroup* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentSection* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentSection >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentInfo* Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchList* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Predictions* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Predictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Predictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Fantasy* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Fantasy >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_String* Arena::CreateMaybeMessage< ::CAttribute_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_String >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCStrike15Welcome* Arena::CreateMaybeMessage< ::CMsgCStrike15Welcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCStrike15Welcome >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Server2GCClientValidate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Server2GCClientValidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Server2GCClientValidate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconCoupon* Arena::CreateMaybeMessage< ::CSOEconCoupon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconCoupon >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOQuestProgress* Arena::CreateMaybeMessage< ::CSOQuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOQuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOAccountSeasonalOperation* Arena::CreateMaybeMessage< ::CSOAccountSeasonalOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOAccountSeasonalOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOPersonaDataPublic* Arena::CreateMaybeMessage< ::CSOPersonaDataPublic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOPersonaDataPublic >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GlobalGame_Subscribe* Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Subscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GlobalGame_Subscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GlobalGame_Unsubscribe* Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Unsubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GlobalGame_Unsubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GlobalGame_Play* Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Play >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GlobalGame_Play >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_AcknowledgePenalty* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AcknowledgePenalty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_AcknowledgePenalty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCStreamUnlock* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCStreamUnlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCStreamUnlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCRequestElevate* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCRequestElevate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientToGCRequestElevate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCChat* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientToGCChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GCToClientChat* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GCToClientChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GCToClientChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientAuthKeyCode* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientAuthKeyCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientAuthKeyCode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_GotvSyncPacket* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_GotvSyncPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_GotvSyncPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerDecalDigitalSignature* Arena::CreateMaybeMessage< ::PlayerDecalDigitalSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerDecalDigitalSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPlayerDecalSign* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPlayerDecalSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPlayerDecalSign >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientLogonFatalError* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientLogonFatalError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientLogonFatalError >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPollState* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPollState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPollState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_Register* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_Search* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Search >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_Search >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_SearchResults* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_SearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_SearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_Invite* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Invite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_Invite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Account_RequestCoPlays* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Account_RequestCoPlays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Account_RequestCoPlays >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCRequestTicket* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCRequestTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientToGCRequestTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientSteamDatagramTicket* Arena::CreateMaybeMessage< ::CMsgGCToClientSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestOffers* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestOffers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestOffers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestSouvenir* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestSouvenir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestSouvenir >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientAccountBalance* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientAccountBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientAccountBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPartyJoinRelay* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPartyJoinRelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPartyJoinRelay >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPartyWarning* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPartyWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPartyWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_SetEventFavorite* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_SetEventFavorite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_SetEventFavorite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GetEventFavorites_Request* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GetEventFavorites_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GetEventFavorites_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GetEventFavorites_Response* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GetEventFavorites_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GetEventFavorites_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPerfReport_Entry* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPerfReport_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPerfReport_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPerfReport* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPerfReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPerfReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CVDiagnostic* Arena::CreateMaybeMessage< ::CVDiagnostic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVDiagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportValidation* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportValidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportValidation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientRequestValidation* Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientRequestValidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientRequestValidation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
