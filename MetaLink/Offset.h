#pragma once
#include "BaseIncludes.h"
#include "Module.h"


enum Offset {
	__INVALID = -1,
	__PRESENT = 0,
	__RESET,
	__HOSTRUNFRAMEINPUT,
	__CBUFEXECUTE,
	__CLMOVE,
	__BONEACCESSOR,
	__listLeaves,
	__RenderModels,
	__SendTCPData,
	__SAVEDATA,
	__RESTOREDATA,
	__CLIENTSTATE,
	__LOCALPLAYER,
	__GETSEQUENCEACTIVITY,
	__CBASEENTITY_POSTNETWORKDATARECEIVED,
	__CPREDICTION_POSTNETWORKDATARECEIVED,
	__CBASEPLAYER_ONDATACHANGED,
	__CCSPLAYER_ONDATACHANGED,
	__CBASEPLAYER_POSTDATAUPDATE,
	__CBASEENTITY_M_P_STUDIOHDR,
	__CNETCHAN_PROCESSPACKET,
	__LOCKSTUDIOHDR,
	__SETUPVELOCITYRET,
	__ACCUMULATELAYERSRET,
	__DOEXTRABONEPROCESSING,
	__CONCATTRANSFORMS,
	__GETMODELPTR,
	__SETUPBONES,
	__HOSTRUNFRAMERENDER,
	__TELEPORTED,
	__CIKCONTEXT_INIT,
	__SHOULDSKIPANIMATIONFRAME,
	__CBASEANIMATINGSTUDIOHDROFFSET,
	__CBASEANIMATINGIKCONTEXTOFFSET,
	__CBASEANIMATINGEFLAGS,
	__CBASEANIMATINGENTCLIENTFLAGS,
	__CIKCONTEXTCONSTRUCTOR,
	__CIKCONTEXTUPDATECONTEXT,
	__CIKCONTEXTUPDATETARGETS,
	__CIKCONTEXTSOLVEDEPENDENCIES,
	__STANDARDBLENDINGRULES,
	__C_CSPLAYER_SETUPBONES,
	__CBASEANIMATIONGBUILDTRANSFORMATIONS,
	__CACHEDBONEMATRIXOFFSET,
	__UPDATEIKLOCKS,
	__CALCULATEIKLOCKS,
	__ISHLTV,
	__ATTACHMENTS,
	__CBASEANIMATINGSETUPBONELOCK,
	__CBASEANIMATINGFORMATVIEWMODELATTACHMENT,
	__GROUPSTUDIOHDR,
	__SENDSUBCHANNEL,
	__NETCREATECHANNEL,
	__NETCHANNELVAL,
	__ICLIENTENTITYLIST,
	__CSHADERSYSTEM_DRAWELEMENTS,
	__CSHADERSYSTEM_PREPFORSHADERDRAW,
	__SETUPBONES_ATTACHMENTHELPER,
	__THREADHANDLETOIDMAPS_COUNT,
	__REMOVETHREADHANDLETOIDMAP,
	__INVALIDATEBONECACHE,
	__UNKNOWNRENDERVIEWFUNCTION2,
	__SNP_SENDMESSAGE,
	__SNP_GETNEXTTHINKTIME,
	__NETSENDTO,
	__CSTEAMSOCKETMGR_ONP2PSESSIONREQUEST,
	__PROCESSCONNECTIONLESSPACKET,
	OFFSETMAX,
};



class StaticOffset {

public:
//#ifdef _DEBUG
#if 1
	StaticOffset(Modules nModule, const char* szPattern, DWORD dwAddressOffset = 0, const char* szName = nullptr);
	StaticOffset(Modules nModule, DWORD dwOffset, const char* szName = nullptr);
	StaticOffset(Modules nModule, char* pAddress, const char* szName = nullptr);
#else
	StaticOffset(Modules nModule, const char* szPattern, const char* szName, DWORD dwAddressOffset);

	StaticOffset(Modules nModule, DWORD dwOffset = 0);
#endif

	DWORD GetOffset() { return m_dwOffset; }
	Modules GetModule() { return m_nModule; }
	char* GetAddress() { return m_pAddress; }

private:
//#ifdef _DEBUG
#if 1
	const char* m_szPattern = nullptr;
	const char* m_szName = nullptr;
	//const char* m_szModule = nullptr;
#endif
	Modules m_nModule = __INVALID_MODULE;
	DWORD m_dwOffset = NULL;
	char* m_pAddress = NULL;
	Offset m_nOffset = __INVALID;
};
