#include "TextExploits.h"
#include "SDK.h"
#include "tier1/convar.h"
#include "NetDefines.h"
#include "../Hooks/EngineHooks.h"
#include "../Memory.h"
#include "../Other/SendMessage.h"

char* packetbuf = NULL;
bool shouldCall = false;
void SendConnectionPacket()
{

}





// typedef int64_t(__thiscall* SNPNextThink)(void*, int64_t usecNow);
int64_t __fastcall hk_SNP_GetNextThinkTime(void* ecx, void* edx, int64_t usecNow) { // \xE8????\x3B\xD3\x7C\x0E
	int64_t usecNextTime = oSNP_GetNextThinkTime(ecx, usecNow);

	static void* pRateLimReturnAddress{ MemoryTools::FindPattern<void*>(__STEAMNETWORKING, XorStr("\x8B\xCA\x8B\xF0\x8B\x55\x10"), 0 /*addr + 0*/, DEBUGSTR("ReturnAddressToSpoofValueTo"))};

	if (_ReturnAddress() == pRateLimReturnAddress) {
		return 0;
	}
	return usecNextTime; 
}

// This needs simplified!!!!!!
int EXPLOIT_NET_SendLong(void* chan, unsigned char* sendbuf, int sendlen, int nMaxRoutableSize, bool Encrypt = false, bool Decrypt = true)
{

}

unsigned int WINAPI FreezerThread(void*)
{


}
